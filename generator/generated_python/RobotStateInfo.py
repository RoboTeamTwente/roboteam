# AUTOGENERATED. Run generator/main.py to regenerate
# Generated on July 04 2021, 22:21:31

"""
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ] [  10  ] [  11  ] [  12  ] [  13  ] [  14  ] [  15  ] [  16  ] [  17  ] [  18  ] [  19  ] [  20  ] [  21  ] [  22  ] [  23  ] [  24  ] [  25  ] [  26  ] [  27  ] [  28  ] [  29  ] [  30  ] [  31  ] [  32  ] [  33  ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- id
-------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- messageId
-------- -------- 11111111 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- xsensAcc1
-------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- xsensAcc2
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- xsensYaw
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- rateOfTurn
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- wheelSpeed1
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- wheelSpeed2
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 -------- -------- -------- -------- wheelSpeed3
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 wheelSpeed4
"""




class RobotStateInfo:
    header = 0                # Header byte indicating the type of packet
    id = 0                    # Id of the robot 
    messageId = 0             # Id of the message
    xsensAcc1 = 0             # xsensAcc1
    xsensAcc2 = 0             # xsensAcc2
    xsensYaw = 0              # xsensYaw
    rateOfTurn = 0            # rateOfTurn
    wheelSpeed1 = 0           # wheelSpeed1
    wheelSpeed2 = 0           # wheelSpeed2
    wheelSpeed3 = 0           # wheelSpeed3
    wheelSpeed4 = 0           # wheelSpeed4



# ================================ GETTERS ================================
    @staticmethod
    get_header(payload):
        return ((payload[0]));

    @staticmethod
    get_id(payload):
        return ((payload[1] & 0b11110000) >> 4);

    @staticmethod
    get_messageId(payload):
        return ((payload[1] & 0b00001111));

# ================================ SETTERS ================================
    @staticmethod
    set_header(payload, header):
        payload[0] = header;

    @staticmethod
    set_id(payload, id):
        payload[1] = ((id << 4) & 0b11110000) | (payload[1] & 0b00001111);

    @staticmethod
    set_messageId(payload, messageId):
        payload[1] = (messageId & 0b00001111) | (payload[1] & 0b11110000);

# ================================ ENCODE ================================
    def encode(self):
        payload = np.zeros(BaseTypes.PACKET_SIZE_ROBOT_STATE_INFO, dtype=np.uint8)
        RobotStateInfo.set_header              (payload, self.header)
        RobotStateInfo.set_id                  (payload, self.id)
        RobotStateInfo.set_messageId           (payload, self.messageId)
        RobotStateInfo.set_xsensAcc1           (payload, self.xsensAcc1)
        RobotStateInfo.set_xsensAcc2           (payload, self.xsensAcc2)
        RobotStateInfo.set_xsensYaw            (payload, self.xsensYaw)
        RobotStateInfo.set_rateOfTurn          (payload, self.rateOfTurn)
        RobotStateInfo.set_wheelSpeed1         (payload, self.wheelSpeed1)
        RobotStateInfo.set_wheelSpeed2         (payload, self.wheelSpeed2)
        RobotStateInfo.set_wheelSpeed3         (payload, self.wheelSpeed3)
        RobotStateInfo.set_wheelSpeed4         (payload, self.wheelSpeed4)
        return payload


# ================================ DECODE ================================
    def decode(self, payload):
        self.header           = RobotStateInfo.get_header(payload)
        self.id               = RobotStateInfo.get_id(payload)
        self.messageId        = RobotStateInfo.get_messageId(payload)
        self.xsensAcc1        = RobotStateInfo.get_xsensAcc1(payload)
        self.xsensAcc2        = RobotStateInfo.get_xsensAcc2(payload)
        self.xsensYaw         = RobotStateInfo.get_xsensYaw(payload)
        self.rateOfTurn       = RobotStateInfo.get_rateOfTurn(payload)
        self.wheelSpeed1      = RobotStateInfo.get_wheelSpeed1(payload)
        self.wheelSpeed2      = RobotStateInfo.get_wheelSpeed2(payload)
        self.wheelSpeed3      = RobotStateInfo.get_wheelSpeed3(payload)
        self.wheelSpeed4      = RobotStateInfo.get_wheelSpeed4(payload)


    def printBitString(self):        payload = self.encode()        for i in range(len(payload)):            print(format(payload[i], '08b'), end=" ")        print()