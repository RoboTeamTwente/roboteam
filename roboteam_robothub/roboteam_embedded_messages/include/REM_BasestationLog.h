// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ]
11111111 -------- -------- header
-------- 1111---- -------- remVersion
-------- ----1111 1111---- messageLength
*/

#ifndef __REM_BASESTATION_LOG_H
#define __REM_BASESTATION_LOG_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_BasestationLogPayload {
    uint8_t payload[PACKET_SIZE_REM_BASESTATION_LOG];
} REM_BasestationLogPayload;

typedef struct _REM_BasestationLog {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   messageLength       ; // integer [0, 255]             Length of the following message
} REM_BasestationLog;

// ================================ GETTERS ================================
static inline uint32_t REM_BasestationLog_get_header(REM_BasestationLogPayload *remblp){
    return ((remblp->payload[0]));
}

static inline uint32_t REM_BasestationLog_get_remVersion(REM_BasestationLogPayload *remblp){
    return ((remblp->payload[1] & 0b11110000) >> 4);
}

static inline uint32_t REM_BasestationLog_get_messageLength(REM_BasestationLogPayload *remblp){
    return ((remblp->payload[1] & 0b00001111) << 4) | ((remblp->payload[2] & 0b11110000) >> 4);
}

// ================================ SETTERS ================================
static inline void REM_BasestationLog_set_header(REM_BasestationLogPayload *remblp, uint32_t header){
    remblp->payload[0] = header;
}

static inline void REM_BasestationLog_set_remVersion(REM_BasestationLogPayload *remblp, uint32_t remVersion){
    remblp->payload[1] = ((remVersion << 4) & 0b11110000) | (remblp->payload[1] & 0b00001111);
}

static inline void REM_BasestationLog_set_messageLength(REM_BasestationLogPayload *remblp, uint32_t messageLength){
    remblp->payload[1] = ((messageLength >> 4) & 0b00001111) | (remblp->payload[1] & 0b11110000);
    remblp->payload[2] = ((messageLength << 4) & 0b11110000) | (remblp->payload[2] & 0b00001111);
}

// ================================ ENCODE ================================
static inline void encodeREM_BasestationLog(REM_BasestationLogPayload *remblp, REM_BasestationLog *rembl){
    REM_BasestationLog_set_header              (remblp, rembl->header);
    REM_BasestationLog_set_remVersion          (remblp, rembl->remVersion);
    REM_BasestationLog_set_messageLength       (remblp, rembl->messageLength);
}

// ================================ DECODE ================================
static inline void decodeREM_BasestationLog(REM_BasestationLog *rembl, REM_BasestationLogPayload *remblp){
    rembl->header        = REM_BasestationLog_get_header(remblp);
    rembl->remVersion    = REM_BasestationLog_get_remVersion(remblp);
    rembl->messageLength = REM_BasestationLog_get_messageLength(remblp);
}

#endif /*__REM_BASESTATION_LOG_H*/
