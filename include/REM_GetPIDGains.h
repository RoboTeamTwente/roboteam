// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ]
11111111 -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- remVersion
-------- ----1111 -------- -------- -------- id
-------- -------- 11111111 -------- -------- some
-------- -------- -------- 11111111 -------- other
-------- -------- -------- -------- 11111111 stuff
*/

#ifndef __REM_GET_P_I_D_GAINS_H
#define __REM_GET_P_I_D_GAINS_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_GetPIDGainsPayload {
    uint8_t payload[PACKET_SIZE_REM_GET_P_I_D_GAINS];
} REM_GetPIDGainsPayload;

typedef struct _REM_GetPIDGains {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   id                  ; // integer [0, 15]              Id of the robot
    uint32_t   some                ; // integer [0, 255]             Id of the robot
    uint32_t   other               ; // integer [0, 255]             Id of the robot
    uint32_t   stuff               ; // integer [0, 255]             Id of the robot
} REM_GetPIDGains;

// ================================ GETTERS ================================
static inline uint32_t REM_GetPIDGains_get_header(REM_GetPIDGainsPayload *remgpidgp){
    return ((remgpidgp->payload[0]));
}

static inline uint32_t REM_GetPIDGains_get_remVersion(REM_GetPIDGainsPayload *remgpidgp){
    return ((remgpidgp->payload[1] & 0b11110000) >> 4);
}

static inline uint32_t REM_GetPIDGains_get_id(REM_GetPIDGainsPayload *remgpidgp){
    return ((remgpidgp->payload[1] & 0b00001111));
}

static inline uint32_t REM_GetPIDGains_get_some(REM_GetPIDGainsPayload *remgpidgp){
    return ((remgpidgp->payload[2]));
}

static inline uint32_t REM_GetPIDGains_get_other(REM_GetPIDGainsPayload *remgpidgp){
    return ((remgpidgp->payload[3]));
}

static inline uint32_t REM_GetPIDGains_get_stuff(REM_GetPIDGainsPayload *remgpidgp){
    return ((remgpidgp->payload[4]));
}

// ================================ SETTERS ================================
static inline void REM_GetPIDGains_set_header(REM_GetPIDGainsPayload *remgpidgp, uint32_t header){
    remgpidgp->payload[0] = header;
}

static inline void REM_GetPIDGains_set_remVersion(REM_GetPIDGainsPayload *remgpidgp, uint32_t remVersion){
    remgpidgp->payload[1] = ((remVersion << 4) & 0b11110000) | (remgpidgp->payload[1] & 0b00001111);
}

static inline void REM_GetPIDGains_set_id(REM_GetPIDGainsPayload *remgpidgp, uint32_t id){
    remgpidgp->payload[1] = (id & 0b00001111) | (remgpidgp->payload[1] & 0b11110000);
}

static inline void REM_GetPIDGains_set_some(REM_GetPIDGainsPayload *remgpidgp, uint32_t some){
    remgpidgp->payload[2] = some;
}

static inline void REM_GetPIDGains_set_other(REM_GetPIDGainsPayload *remgpidgp, uint32_t other){
    remgpidgp->payload[3] = other;
}

static inline void REM_GetPIDGains_set_stuff(REM_GetPIDGainsPayload *remgpidgp, uint32_t stuff){
    remgpidgp->payload[4] = stuff;
}

// ================================ ENCODE ================================
static inline void encodeREM_GetPIDGains(REM_GetPIDGainsPayload *remgpidgp, REM_GetPIDGains *remgpidg){
    REM_GetPIDGains_set_header              (remgpidgp, remgpidg->header);
    REM_GetPIDGains_set_remVersion          (remgpidgp, remgpidg->remVersion);
    REM_GetPIDGains_set_id                  (remgpidgp, remgpidg->id);
    REM_GetPIDGains_set_some                (remgpidgp, remgpidg->some);
    REM_GetPIDGains_set_other               (remgpidgp, remgpidg->other);
    REM_GetPIDGains_set_stuff               (remgpidgp, remgpidg->stuff);
}

// ================================ DECODE ================================
static inline void decodeREM_GetPIDGains(REM_GetPIDGains *remgpidg, REM_GetPIDGainsPayload *remgpidgp){
    remgpidg->header     = REM_GetPIDGains_get_header(remgpidgp);
    remgpidg->remVersion = REM_GetPIDGains_get_remVersion(remgpidgp);
    remgpidg->id         = REM_GetPIDGains_get_id(remgpidgp);
    remgpidg->some       = REM_GetPIDGains_get_some(remgpidgp);
    remgpidg->other      = REM_GetPIDGains_get_other(remgpidgp);
    remgpidg->stuff      = REM_GetPIDGains_get_stuff(remgpidgp);
}

#endif /*__REM_GET_P_I_D_GAINS_H*/
