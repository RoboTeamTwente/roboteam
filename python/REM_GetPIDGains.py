# AUTOGENERATED. Run generator/main.py to regenerate
"""
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ]
11111111 -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- remVersion
-------- ----1111 -------- -------- -------- id
-------- -------- 11111111 -------- -------- some
-------- -------- -------- 11111111 -------- other
-------- -------- -------- -------- 11111111 stuff
"""

import numpy as np
from . import REM_BaseTypes



class REM_GetPIDGains:
    header = 0                # integer [0, 255]             Header byte indicating the type of packet
    remVersion = 0            # integer [0, 15]              Version of roboteam_embedded_messages
    id = 0                    # integer [0, 15]              Id of the robot
    some = 0                  # integer [0, 255]             Id of the robot
    other = 0                 # integer [0, 255]             Id of the robot
    stuff = 0                 # integer [0, 255]             Id of the robot



# ================================ GETTERS ================================
    @staticmethod
    def get_header(payload):
        return ((payload[0]));

    @staticmethod
    def get_remVersion(payload):
        return ((payload[1] & 0b11110000) >> 4);

    @staticmethod
    def get_id(payload):
        return ((payload[1] & 0b00001111));

    @staticmethod
    def get_some(payload):
        return ((payload[2]));

    @staticmethod
    def get_other(payload):
        return ((payload[3]));

    @staticmethod
    def get_stuff(payload):
        return ((payload[4]));

# ================================ SETTERS ================================
    @staticmethod
    def set_header(payload, header):
        payload[0] = header;

    @staticmethod
    def set_remVersion(payload, remVersion):
        payload[1] = ((remVersion << 4) & 0b11110000) | (payload[1] & 0b00001111);

    @staticmethod
    def set_id(payload, id):
        payload[1] = (id & 0b00001111) | (payload[1] & 0b11110000);

    @staticmethod
    def set_some(payload, some):
        payload[2] = some;

    @staticmethod
    def set_other(payload, other):
        payload[3] = other;

    @staticmethod
    def set_stuff(payload, stuff):
        payload[4] = stuff;

# ================================ ENCODE ================================
    def encode(self):
        payload = np.zeros(REM_BaseTypes.PACKET_SIZE_REM_GET_P_I_D_GAINS, dtype=np.uint8)
        REM_GetPIDGains.set_header              (payload, self.header)
        REM_GetPIDGains.set_remVersion          (payload, self.remVersion)
        REM_GetPIDGains.set_id                  (payload, self.id)
        REM_GetPIDGains.set_some                (payload, self.some)
        REM_GetPIDGains.set_other               (payload, self.other)
        REM_GetPIDGains.set_stuff               (payload, self.stuff)
        return payload


# ================================ DECODE ================================
    def decode(self, payload):
        self.header           = REM_GetPIDGains.get_header(payload)
        self.remVersion       = REM_GetPIDGains.get_remVersion(payload)
        self.id               = REM_GetPIDGains.get_id(payload)
        self.some             = REM_GetPIDGains.get_some(payload)
        self.other            = REM_GetPIDGains.get_other(payload)
        self.stuff            = REM_GetPIDGains.get_stuff(payload)


    def print_bit_string(self):
        payload = self.encode()
        for i in range(len(payload)):
            print(format(payload[i], '08b'), end=" ")
        print()
