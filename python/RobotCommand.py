# AUTOGENERATED. Run generator/main.py to regenerate
# Generated on July 04 2021, 22:47:52

"""
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ] [  10  ] [  11  ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- id
-------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- messageId
-------- -------- 1------- -------- -------- -------- -------- -------- -------- -------- -------- -------- doKick
-------- -------- -1------ -------- -------- -------- -------- -------- -------- -------- -------- -------- doChip
-------- -------- --1----- -------- -------- -------- -------- -------- -------- -------- -------- -------- doForce
-------- -------- ---1---- -------- -------- -------- -------- -------- -------- -------- -------- -------- useCameraAngle
-------- -------- ----1111 11111111 1111---- -------- -------- -------- -------- -------- -------- -------- rho
-------- -------- -------- -------- ----1111 11111111 1111---- -------- -------- -------- -------- -------- theta
-------- -------- -------- -------- -------- -------- ----1111 11111111 1111---- -------- -------- -------- angle
-------- -------- -------- -------- -------- -------- -------- -------- ----1111 11111111 1111---- -------- cameraAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----111- -------- dribbler
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------1 11------ kickChipPower
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --1----- angularControl
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ---1---- feedback
"""




class RobotCommand:
    header = 0                # Header byte indicating the type of packet
    id = 0                    # Id of the robot
    messageId = 0             # Id of the message
    doKick = 0                # Do a kick if ballsensor
    doChip = 0                # Do a chip if ballsensor
    doForce = 0               # Do regardless of ballsensor
    useCameraAngle = 0        # Use the info in 'cameraAngle'
    rho = 0                   # Magnitude of movement (m/s)
    theta = 0                 # Direction of movement (radians)
    angle = 0                 # Absolute angle (rad) / angular velocity (rad/s)
    cameraAngle = 0           # Angle of the robot as seen by camera (rad)
    dribbler = 0              # Dribbler speed
    kickChipPower = 0         # Power of the kick or chip
    angularControl = 0        # 0 = angular velocity, 1 = absolute angle
    feedback = 0              # Ignore the packet. Just send feedback



# ================================ GETTERS ================================
    @staticmethod
    get_header(payload):
        return ((payload[0]));

    @staticmethod
    get_id(payload):
        return ((payload[1] & 0b11110000) >> 4);

    @staticmethod
    get_messageId(payload):
        return ((payload[1] & 0b00001111));

    @staticmethod
    get_doKick(payload):
        return (payload[2] & 0b10000000) > 0
    @staticmethod
    get_doChip(payload):
        return (payload[2] & 0b01000000) > 0
    @staticmethod
    get_doForce(payload):
        return (payload[2] & 0b00100000) > 0
    @staticmethod
    get_useCameraAngle(payload):
        return (payload[2] & 0b00010000) > 0
    @staticmethod
    get_rho(payload):
        _rho = ((payload[2] & 0b00001111) << 12) | ((payload[3]) << 4) | ((payload[4] & 0b11110000) >> 4);
        return (_rho * 0.0001220703125000) + 0.0000000000000000;

    @staticmethod
    get_theta(payload):
        _theta = ((payload[4] & 0b00001111) << 12) | ((payload[5]) << 4) | ((payload[6] & 0b11110000) >> 4);
        return (_theta * 0.0000958737992429) + -3.1415926535897931;

    @staticmethod
    get_angle(payload):
        _angle = ((payload[6] & 0b00001111) << 12) | ((payload[7]) << 4) | ((payload[8] & 0b11110000) >> 4);
        return (_angle * 0.0000958737992429) + -3.1415926535897931;

    @staticmethod
    get_cameraAngle(payload):
        _cameraAngle = ((payload[8] & 0b00001111) << 12) | ((payload[9]) << 4) | ((payload[10] & 0b11110000) >> 4);
        return (_cameraAngle * 0.0000958737992429) + -3.1415926535897931;

    @staticmethod
    get_dribbler(payload):
        return ((payload[10] & 0b00001110) >> 1);

    @staticmethod
    get_kickChipPower(payload):
        return ((payload[10] & 0b00000001) << 2) | ((payload[11] & 0b11000000) >> 6);

    @staticmethod
    get_angularControl(payload):
        return (payload[11] & 0b00100000) > 0
    @staticmethod
    get_feedback(payload):
        return (payload[11] & 0b00010000) > 0
# ================================ SETTERS ================================
    @staticmethod
    set_header(payload, header):
        payload[0] = header;

    @staticmethod
    set_id(payload, id):
        payload[1] = ((id << 4) & 0b11110000) | (payload[1] & 0b00001111);

    @staticmethod
    set_messageId(payload, messageId):
        payload[1] = (messageId & 0b00001111) | (payload[1] & 0b11110000);

    @staticmethod
    set_doKick(payload, doKick):
        payload[2] = ((doKick << 7) & 0b10000000) | (payload[2] & 0b01111111);

    @staticmethod
    set_doChip(payload, doChip):
        payload[2] = ((doChip << 6) & 0b01000000) | (payload[2] & 0b10111111);

    @staticmethod
    set_doForce(payload, doForce):
        payload[2] = ((doForce << 5) & 0b00100000) | (payload[2] & 0b11011111);

    @staticmethod
    set_useCameraAngle(payload, useCameraAngle):
        payload[2] = ((useCameraAngle << 4) & 0b00010000) | (payload[2] & 0b11101111);

    @staticmethod
    set_rho(payload, rho):
        _rho = int(rho / 0.0001220703125000)
        payload[2] = ((_rho >> 12) & 0b00001111) | (payload[2] & 0b11110000);
        payload[3] = (_rho >> 8);
        payload[4] = ((_rho >> 8) & 0b11110000) | (payload[4] & 0b00001111);

    @staticmethod
    set_theta(payload, theta):
        _theta = int((theta +3.1415926535897931) / 0.0000958737992429)
        payload[4] = ((_theta >> 12) & 0b00001111) | (payload[4] & 0b11110000);
        payload[5] = (_theta >> 8);
        payload[6] = ((_theta >> 8) & 0b11110000) | (payload[6] & 0b00001111);

    @staticmethod
    set_angle(payload, angle):
        _angle = int((angle +3.1415926535897931) / 0.0000958737992429)
        payload[6] = ((_angle >> 12) & 0b00001111) | (payload[6] & 0b11110000);
        payload[7] = (_angle >> 8);
        payload[8] = ((_angle >> 8) & 0b11110000) | (payload[8] & 0b00001111);

    @staticmethod
    set_cameraAngle(payload, cameraAngle):
        _cameraAngle = int((cameraAngle +3.1415926535897931) / 0.0000958737992429)
        payload[8] = ((_cameraAngle >> 12) & 0b00001111) | (payload[8] & 0b11110000);
        payload[9] = (_cameraAngle >> 8);
        payload[10] = ((_cameraAngle >> 8) & 0b11110000) | (payload[10] & 0b00001111);

    @staticmethod
    set_dribbler(payload, dribbler):
        payload[10] = ((dribbler << 1) & 0b00001110) | (payload[10] & 0b11110001);

    @staticmethod
    set_kickChipPower(payload, kickChipPower):
        payload[10] = ((kickChipPower >> 2) & 0b00000001) | (payload[10] & 0b11111110);
        payload[11] = ((kickChipPower << 5) & 0b11000000) | (payload[11] & 0b00111111);

    @staticmethod
    set_angularControl(payload, angularControl):
        payload[11] = ((angularControl << 5) & 0b00100000) | (payload[11] & 0b11011111);

    @staticmethod
    set_feedback(payload, feedback):
        payload[11] = ((feedback << 4) & 0b00010000) | (payload[11] & 0b11101111);

# ================================ ENCODE ================================
    def encode(self):
        payload = np.zeros(BaseTypes.PACKET_SIZE_ROBOT_COMMAND, dtype=np.uint8)
        RobotCommand.set_header              (payload, self.header)
        RobotCommand.set_id                  (payload, self.id)
        RobotCommand.set_messageId           (payload, self.messageId)
        RobotCommand.set_doKick              (payload, self.doKick)
        RobotCommand.set_doChip              (payload, self.doChip)
        RobotCommand.set_doForce             (payload, self.doForce)
        RobotCommand.set_useCameraAngle      (payload, self.useCameraAngle)
        RobotCommand.set_rho                 (payload, self.rho)
        RobotCommand.set_theta               (payload, self.theta)
        RobotCommand.set_angle               (payload, self.angle)
        RobotCommand.set_cameraAngle         (payload, self.cameraAngle)
        RobotCommand.set_dribbler            (payload, self.dribbler)
        RobotCommand.set_kickChipPower       (payload, self.kickChipPower)
        RobotCommand.set_angularControl      (payload, self.angularControl)
        RobotCommand.set_feedback            (payload, self.feedback)
        return payload


# ================================ DECODE ================================
    def decode(self, payload):
        self.header           = RobotCommand.get_header(payload)
        self.id               = RobotCommand.get_id(payload)
        self.messageId        = RobotCommand.get_messageId(payload)
        self.doKick           = RobotCommand.get_doKick(payload)
        self.doChip           = RobotCommand.get_doChip(payload)
        self.doForce          = RobotCommand.get_doForce(payload)
        self.useCameraAngle   = RobotCommand.get_useCameraAngle(payload)
        self.rho              = RobotCommand.get_rho(payload)
        self.theta            = RobotCommand.get_theta(payload)
        self.angle            = RobotCommand.get_angle(payload)
        self.cameraAngle      = RobotCommand.get_cameraAngle(payload)
        self.dribbler         = RobotCommand.get_dribbler(payload)
        self.kickChipPower    = RobotCommand.get_kickChipPower(payload)
        self.angularControl   = RobotCommand.get_angularControl(payload)
        self.feedback         = RobotCommand.get_feedback(payload)


    def printBitString(self):        payload = self.encode()        for i in range(len(payload)):            print(format(payload[i], '08b'), end=" ")        print()