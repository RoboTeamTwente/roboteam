// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ]
11111111 -------- -------- header
-------- 1111---- -------- remVersion
-------- ----1111 -------- id
-------- -------- 11111111 message_length
*/

#ifndef __REM_ROBOT_LOG_H
#define __REM_ROBOT_LOG_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_RobotLogPayload {
    uint8_t payload[PACKET_SIZE_REM_ROBOT_LOG];
} REM_RobotLogPayload;

typedef struct _REM_RobotLog {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   id                  ; // integer [0, 15]              Id of the robot
    uint32_t   message_length      ; // integer [0, 255]             Length of the following message
} REM_RobotLog;

// ================================ GETTERS ================================
static inline uint32_t REM_RobotLog_get_header(REM_RobotLogPayload *remrlp){
    return ((remrlp->payload[0]));
}

static inline uint32_t REM_RobotLog_get_remVersion(REM_RobotLogPayload *remrlp){
    return ((remrlp->payload[1] & 0b11110000) >> 4);
}

static inline uint32_t REM_RobotLog_get_id(REM_RobotLogPayload *remrlp){
    return ((remrlp->payload[1] & 0b00001111));
}

static inline uint32_t REM_RobotLog_get_message_length(REM_RobotLogPayload *remrlp){
    return ((remrlp->payload[2]));
}

// ================================ SETTERS ================================
static inline void REM_RobotLog_set_header(REM_RobotLogPayload *remrlp, uint32_t header){
    remrlp->payload[0] = header;
}

static inline void REM_RobotLog_set_remVersion(REM_RobotLogPayload *remrlp, uint32_t remVersion){
    remrlp->payload[1] = ((remVersion << 4) & 0b11110000) | (remrlp->payload[1] & 0b00001111);
}

static inline void REM_RobotLog_set_id(REM_RobotLogPayload *remrlp, uint32_t id){
    remrlp->payload[1] = (id & 0b00001111) | (remrlp->payload[1] & 0b11110000);
}

static inline void REM_RobotLog_set_message_length(REM_RobotLogPayload *remrlp, uint32_t message_length){
    remrlp->payload[2] = message_length;
}

// ================================ ENCODE ================================
static inline void encodeREM_RobotLog(REM_RobotLogPayload *remrlp, REM_RobotLog *remrl){
    REM_RobotLog_set_header              (remrlp, remrl->header);
    REM_RobotLog_set_remVersion          (remrlp, remrl->remVersion);
    REM_RobotLog_set_id                  (remrlp, remrl->id);
    REM_RobotLog_set_message_length      (remrlp, remrl->message_length);
}

// ================================ DECODE ================================
static inline void decodeREM_RobotLog(REM_RobotLog *remrl, REM_RobotLogPayload *remrlp){
    remrl->header        = REM_RobotLog_get_header(remrlp);
    remrl->remVersion    = REM_RobotLog_get_remVersion(remrlp);
    remrl->id            = REM_RobotLog_get_id(remrlp);
    remrl->message_length= REM_RobotLog_get_message_length(remrlp);
}

#endif /*__REM_ROBOT_LOG_H*/
