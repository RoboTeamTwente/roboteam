// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ]
11111111 -------- header
-------- 1111---- remVersion
-------- ----1--- channel
*/

#ifndef __BASESTATION_SET_CONFIGURATION_H
#define __BASESTATION_SET_CONFIGURATION_H

#include <stdbool.h>
#include <stdint.h>
#include "BaseTypes.h"

typedef struct _BasestationSetConfigurationPayload {
    uint8_t payload[PACKET_SIZE_BASESTATION_SET_CONFIGURATION];
} BasestationSetConfigurationPayload;

typedef struct _BasestationSetConfiguration {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    bool       channel             ; // integer [0, 1]               Channel on which the basestation and robots communicate
} BasestationSetConfiguration;

// ================================ GETTERS ================================
static inline uint32_t BasestationSetConfiguration_get_header(BasestationSetConfigurationPayload *bscp){
    return ((bscp->payload[0]));
}

static inline uint32_t BasestationSetConfiguration_get_remVersion(BasestationSetConfigurationPayload *bscp){
    return ((bscp->payload[1] & 0b11110000) >> 4);
}

static inline bool BasestationSetConfiguration_get_channel(BasestationSetConfigurationPayload *bscp){
    return (bscp->payload[1] & 0b00001000) > 0;
}

// ================================ SETTERS ================================
static inline void BasestationSetConfiguration_set_header(BasestationSetConfigurationPayload *bscp, uint32_t header){
    bscp->payload[0] = header;
}

static inline void BasestationSetConfiguration_set_remVersion(BasestationSetConfigurationPayload *bscp, uint32_t remVersion){
    bscp->payload[1] = ((remVersion << 4) & 0b11110000) | (bscp->payload[1] & 0b00001111);
}

static inline void BasestationSetConfiguration_set_channel(BasestationSetConfigurationPayload *bscp, bool channel){
    bscp->payload[1] = ((channel << 3) & 0b00001000) | (bscp->payload[1] & 0b11110111);
}

// ================================ ENCODE ================================
static inline void encodeBasestationSetConfiguration(BasestationSetConfigurationPayload *bscp, BasestationSetConfiguration *bsc){
    BasestationSetConfiguration_set_header              (bscp, bsc->header);
    BasestationSetConfiguration_set_remVersion          (bscp, bsc->remVersion);
    BasestationSetConfiguration_set_channel             (bscp, bsc->channel);
}

// ================================ DECODE ================================
static inline void decodeBasestationSetConfiguration(BasestationSetConfiguration *bsc, BasestationSetConfigurationPayload *bscp){
    bsc->header          = BasestationSetConfiguration_get_header(bscp);
    bsc->remVersion      = BasestationSetConfiguration_get_remVersion(bscp);
    bsc->channel         = BasestationSetConfiguration_get_channel(bscp);
}

#endif /*__BASESTATION_SET_CONFIGURATION_H*/
