# AUTOGENERATED. Run generator/main.py to regenerate
"""
[  0   ] [  1   ] [  2   ] [  3   ]
11111111 -------- -------- -------- header
-------- 1111---- -------- -------- remVersion
-------- ----1111 -------- -------- id
-------- -------- 11111--- -------- volume
-------- -------- -----1-- -------- play
-------- -------- ------11 -------- folder_id
-------- -------- -------- 11111111 song_id
"""

import numpy as np
from . import REM_BaseTypes



class REM_MusicCommand:
    header = 0                # integer [0, 255]             Header byte indicating the type of packet
    remVersion = 0            # integer [0, 15]              Version of roboteam_embedded_messages
    id = 0                    # integer [0, 15]              Id of the robot
    volume = 0                # integer [0, 31]              Volume of the song. 31 is loudest
    play = 0                  # integer [0, 1]               When set, a song will be played. If not, the song will be stopped
    folder_id = 0             # integer [0, 3]               The id of the folder, from which to pick a song
    song_id = 0               # integer [0, 255]             Id of the song, given the folder



# ================================ GETTERS ================================
    @staticmethod
    def get_header(payload):
        return ((payload[0]));

    @staticmethod
    def get_remVersion(payload):
        return ((payload[1] & 0b11110000) >> 4);

    @staticmethod
    def get_id(payload):
        return ((payload[1] & 0b00001111));

    @staticmethod
    def get_volume(payload):
        return ((payload[2] & 0b11111000) >> 3);

    @staticmethod
    def get_play(payload):
        return (payload[2] & 0b00000100) > 0;

    @staticmethod
    def get_folder_id(payload):
        return ((payload[2] & 0b00000011));

    @staticmethod
    def get_song_id(payload):
        return ((payload[3]));

# ================================ SETTERS ================================
    @staticmethod
    def set_header(payload, header):
        payload[0] = header;

    @staticmethod
    def set_remVersion(payload, remVersion):
        payload[1] = ((remVersion << 4) & 0b11110000) | (payload[1] & 0b00001111);

    @staticmethod
    def set_id(payload, id):
        payload[1] = (id & 0b00001111) | (payload[1] & 0b11110000);

    @staticmethod
    def set_volume(payload, volume):
        payload[2] = ((volume << 3) & 0b11111000) | (payload[2] & 0b00000111);

    @staticmethod
    def set_play(payload, play):
        payload[2] = ((play << 2) & 0b00000100) | (payload[2] & 0b11111011);

    @staticmethod
    def set_folder_id(payload, folder_id):
        payload[2] = (folder_id & 0b00000011) | (payload[2] & 0b11111100);

    @staticmethod
    def set_song_id(payload, song_id):
        payload[3] = song_id;

# ================================ ENCODE ================================
    def encode(self):
        payload = np.zeros(REM_BaseTypes.PACKET_SIZE_REM_MUSIC_COMMAND, dtype=np.uint8)
        REM_MusicCommand.set_header              (payload, self.header)
        REM_MusicCommand.set_remVersion          (payload, self.remVersion)
        REM_MusicCommand.set_id                  (payload, self.id)
        REM_MusicCommand.set_volume              (payload, self.volume)
        REM_MusicCommand.set_play                (payload, self.play)
        REM_MusicCommand.set_folder_id           (payload, self.folder_id)
        REM_MusicCommand.set_song_id             (payload, self.song_id)
        return payload


# ================================ DECODE ================================
    def decode(self, payload):
        self.header           = REM_MusicCommand.get_header(payload)
        self.remVersion       = REM_MusicCommand.get_remVersion(payload)
        self.id               = REM_MusicCommand.get_id(payload)
        self.volume           = REM_MusicCommand.get_volume(payload)
        self.play             = REM_MusicCommand.get_play(payload)
        self.folder_id        = REM_MusicCommand.get_folder_id(payload)
        self.song_id          = REM_MusicCommand.get_song_id(payload)


    def print_bit_string(self):
        payload = self.encode()
        for i in range(len(payload)):
            print(format(payload[i], '08b'), end=" ")
        print()
