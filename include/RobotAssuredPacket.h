// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ]
11111111 -------- -------- -------- header
-------- 1111---- -------- -------- remVersion
-------- ----1111 -------- -------- id
-------- -------- 11111111 -------- sequenceNumber
-------- -------- -------- 11111111 messageLength
*/

#ifndef __ROBOT_ASSURED_PACKET_H
#define __ROBOT_ASSURED_PACKET_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _RobotAssuredPacketPayload {
    uint8_t payload[PACKET_SIZE_ROBOT_ASSURED_PACKET];
} RobotAssuredPacketPayload;

typedef struct _RobotAssuredPacket {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   id                  ; // integer [0, 15]              Id of the robot
    uint32_t   sequenceNumber      ; // integer [0, 255]             Number to match this packet with AssuredAck
    uint32_t   messageLength       ; // integer [0, 255]             Length of the following message
} RobotAssuredPacket;

// ================================ GETTERS ================================
static inline uint32_t RobotAssuredPacket_get_header(RobotAssuredPacketPayload *rapp){
    return ((rapp->payload[0]));
}

static inline uint32_t RobotAssuredPacket_get_remVersion(RobotAssuredPacketPayload *rapp){
    return ((rapp->payload[1] & 0b11110000) >> 4);
}

static inline uint32_t RobotAssuredPacket_get_id(RobotAssuredPacketPayload *rapp){
    return ((rapp->payload[1] & 0b00001111));
}

static inline uint32_t RobotAssuredPacket_get_sequenceNumber(RobotAssuredPacketPayload *rapp){
    return ((rapp->payload[2]));
}

static inline uint32_t RobotAssuredPacket_get_messageLength(RobotAssuredPacketPayload *rapp){
    return ((rapp->payload[3]));
}

// ================================ SETTERS ================================
static inline void RobotAssuredPacket_set_header(RobotAssuredPacketPayload *rapp, uint32_t header){
    rapp->payload[0] = header;
}

static inline void RobotAssuredPacket_set_remVersion(RobotAssuredPacketPayload *rapp, uint32_t remVersion){
    rapp->payload[1] = ((remVersion << 4) & 0b11110000) | (rapp->payload[1] & 0b00001111);
}

static inline void RobotAssuredPacket_set_id(RobotAssuredPacketPayload *rapp, uint32_t id){
    rapp->payload[1] = (id & 0b00001111) | (rapp->payload[1] & 0b11110000);
}

static inline void RobotAssuredPacket_set_sequenceNumber(RobotAssuredPacketPayload *rapp, uint32_t sequenceNumber){
    rapp->payload[2] = sequenceNumber;
}

static inline void RobotAssuredPacket_set_messageLength(RobotAssuredPacketPayload *rapp, uint32_t messageLength){
    rapp->payload[3] = messageLength;
}

// ================================ ENCODE ================================
static inline void encodeRobotAssuredPacket(RobotAssuredPacketPayload *rapp, RobotAssuredPacket *rap){
    RobotAssuredPacket_set_header              (rapp, rap->header);
    RobotAssuredPacket_set_remVersion          (rapp, rap->remVersion);
    RobotAssuredPacket_set_id                  (rapp, rap->id);
    RobotAssuredPacket_set_sequenceNumber      (rapp, rap->sequenceNumber);
    RobotAssuredPacket_set_messageLength       (rapp, rap->messageLength);
}

// ================================ DECODE ================================
static inline void decodeRobotAssuredPacket(RobotAssuredPacket *rap, RobotAssuredPacketPayload *rapp){
    rap->header          = RobotAssuredPacket_get_header(rapp);
    rap->remVersion      = RobotAssuredPacket_get_remVersion(rapp);
    rap->id              = RobotAssuredPacket_get_id(rapp);
    rap->sequenceNumber  = RobotAssuredPacket_get_sequenceNumber(rapp);
    rap->messageLength   = RobotAssuredPacket_get_messageLength(rapp);
}

#endif /*__ROBOT_ASSURED_PACKET_H*/
