// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ]
11111111 -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- toRobotId
-------- ----1--- -------- -------- -------- -------- toColor
-------- -----1-- -------- -------- -------- -------- toBC
-------- ------1- -------- -------- -------- -------- toBS
-------- -------1 -------- -------- -------- -------- toPC
-------- -------- 1111---- -------- -------- -------- fromRobotId
-------- -------- ----1--- -------- -------- -------- fromColor
-------- -------- -----1-- -------- -------- -------- reserved
-------- -------- ------1- -------- -------- -------- fromBS
-------- -------- -------1 -------- -------- -------- fromPC
-------- -------- -------- 1111---- -------- -------- remVersion
-------- -------- -------- ----1111 -------- -------- messageId
-------- -------- -------- -------- 11111111 -------- payloadSize
-------- -------- -------- -------- -------- 11111111 header
*/

#ifndef __REM_BASESTATION_SET_CONFIGURATION_H
#define __REM_BASESTATION_SET_CONFIGURATION_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_BasestationSetConfigurationPayload {
    uint8_t payload[PACKET_SIZE_REM_BASESTATION_SET_CONFIGURATION];
} REM_BasestationSetConfigurationPayload;

typedef struct _REM_BasestationSetConfiguration {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   toRobotId           ; // integer [0, 15]              Id of the receiving robot
    bool       toColor             ; // integer [0, 1]               Color of the receiving robot / basestation. Yellow = 0, Blue = 1
    bool       toBC                ; // integer [0, 1]               Bit indicating this packet has to be broadcasted to all robots
    bool       toBS                ; // integer [0, 1]               Bit indicating this packet is meant for the basestation
    bool       toPC                ; // integer [0, 1]               Bit indicating this packet is meant for the PC
    uint32_t   fromRobotId         ; // integer [0, 15]              Id of the transmitting robot
    bool       fromColor           ; // integer [0, 1]               Color of the transmitting robot / basestation. Yellow = 0, Blue = 1
    bool       reserved            ; // integer [0, 1]               reserved
    bool       fromBS              ; // integer [0, 1]               Bit indicating this packet is coming from the basestation
    bool       fromPC              ; // integer [0, 1]               Bit indicating this packet is coming from the PC
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   messageId           ; // integer [0, 15]              messageId. Can be used for aligning packets
    uint32_t   payloadSize         ; // integer [0, 255]             Size of the payload. At most 255 bytes including the generic_packet_header. Keep the 127 byte SX1280 limit in mind
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
} REM_BasestationSetConfiguration;

// ================================ GETTERS ================================
static inline uint32_t REM_BasestationSetConfiguration_get_header(REM_BasestationSetConfigurationPayload *rembscp){
    return ((rembscp->payload[0]));
}

static inline uint32_t REM_BasestationSetConfiguration_get_toRobotId(REM_BasestationSetConfigurationPayload *rembscp){
    return ((rembscp->payload[1] & 0b11110000) >> 4);
}

static inline bool REM_BasestationSetConfiguration_get_toColor(REM_BasestationSetConfigurationPayload *rembscp){
    return (rembscp->payload[1] & 0b00001000) > 0;
}

static inline bool REM_BasestationSetConfiguration_get_toBC(REM_BasestationSetConfigurationPayload *rembscp){
    return (rembscp->payload[1] & 0b00000100) > 0;
}

static inline bool REM_BasestationSetConfiguration_get_toBS(REM_BasestationSetConfigurationPayload *rembscp){
    return (rembscp->payload[1] & 0b00000010) > 0;
}

static inline bool REM_BasestationSetConfiguration_get_toPC(REM_BasestationSetConfigurationPayload *rembscp){
    return (rembscp->payload[1] & 0b00000001) > 0;
}

static inline uint32_t REM_BasestationSetConfiguration_get_fromRobotId(REM_BasestationSetConfigurationPayload *rembscp){
    return ((rembscp->payload[2] & 0b11110000) >> 4);
}

static inline bool REM_BasestationSetConfiguration_get_fromColor(REM_BasestationSetConfigurationPayload *rembscp){
    return (rembscp->payload[2] & 0b00001000) > 0;
}

static inline bool REM_BasestationSetConfiguration_get_reserved(REM_BasestationSetConfigurationPayload *rembscp){
    return (rembscp->payload[2] & 0b00000100) > 0;
}

static inline bool REM_BasestationSetConfiguration_get_fromBS(REM_BasestationSetConfigurationPayload *rembscp){
    return (rembscp->payload[2] & 0b00000010) > 0;
}

static inline bool REM_BasestationSetConfiguration_get_fromPC(REM_BasestationSetConfigurationPayload *rembscp){
    return (rembscp->payload[2] & 0b00000001) > 0;
}

static inline uint32_t REM_BasestationSetConfiguration_get_remVersion(REM_BasestationSetConfigurationPayload *rembscp){
    return ((rembscp->payload[3] & 0b11110000) >> 4);
}

static inline uint32_t REM_BasestationSetConfiguration_get_messageId(REM_BasestationSetConfigurationPayload *rembscp){
    return ((rembscp->payload[3] & 0b00001111));
}

static inline uint32_t REM_BasestationSetConfiguration_get_payloadSize(REM_BasestationSetConfigurationPayload *rembscp){
    return ((rembscp->payload[4]));
}

static inline uint32_t REM_BasestationSetConfiguration_get_header(REM_BasestationSetConfigurationPayload *rembscp){
    return ((rembscp->payload[5]));
}

// ================================ SETTERS ================================
static inline void REM_BasestationSetConfiguration_set_header(REM_BasestationSetConfigurationPayload *rembscp, uint32_t header){
    rembscp->payload[0] = header;
}

static inline void REM_BasestationSetConfiguration_set_toRobotId(REM_BasestationSetConfigurationPayload *rembscp, uint32_t toRobotId){
    rembscp->payload[1] = ((toRobotId << 4) & 0b11110000) | (rembscp->payload[1] & 0b00001111);
}

static inline void REM_BasestationSetConfiguration_set_toColor(REM_BasestationSetConfigurationPayload *rembscp, bool toColor){
    rembscp->payload[1] = ((toColor << 3) & 0b00001000) | (rembscp->payload[1] & 0b11110111);
}

static inline void REM_BasestationSetConfiguration_set_toBC(REM_BasestationSetConfigurationPayload *rembscp, bool toBC){
    rembscp->payload[1] = ((toBC << 2) & 0b00000100) | (rembscp->payload[1] & 0b11111011);
}

static inline void REM_BasestationSetConfiguration_set_toBS(REM_BasestationSetConfigurationPayload *rembscp, bool toBS){
    rembscp->payload[1] = ((toBS << 1) & 0b00000010) | (rembscp->payload[1] & 0b11111101);
}

static inline void REM_BasestationSetConfiguration_set_toPC(REM_BasestationSetConfigurationPayload *rembscp, bool toPC){
    rembscp->payload[1] = (toPC & 0b00000001) | (rembscp->payload[1] & 0b11111110);
}

static inline void REM_BasestationSetConfiguration_set_fromRobotId(REM_BasestationSetConfigurationPayload *rembscp, uint32_t fromRobotId){
    rembscp->payload[2] = ((fromRobotId << 4) & 0b11110000) | (rembscp->payload[2] & 0b00001111);
}

static inline void REM_BasestationSetConfiguration_set_fromColor(REM_BasestationSetConfigurationPayload *rembscp, bool fromColor){
    rembscp->payload[2] = ((fromColor << 3) & 0b00001000) | (rembscp->payload[2] & 0b11110111);
}

static inline void REM_BasestationSetConfiguration_set_reserved(REM_BasestationSetConfigurationPayload *rembscp, bool reserved){
    rembscp->payload[2] = ((reserved << 2) & 0b00000100) | (rembscp->payload[2] & 0b11111011);
}

static inline void REM_BasestationSetConfiguration_set_fromBS(REM_BasestationSetConfigurationPayload *rembscp, bool fromBS){
    rembscp->payload[2] = ((fromBS << 1) & 0b00000010) | (rembscp->payload[2] & 0b11111101);
}

static inline void REM_BasestationSetConfiguration_set_fromPC(REM_BasestationSetConfigurationPayload *rembscp, bool fromPC){
    rembscp->payload[2] = (fromPC & 0b00000001) | (rembscp->payload[2] & 0b11111110);
}

static inline void REM_BasestationSetConfiguration_set_remVersion(REM_BasestationSetConfigurationPayload *rembscp, uint32_t remVersion){
    rembscp->payload[3] = ((remVersion << 4) & 0b11110000) | (rembscp->payload[3] & 0b00001111);
}

static inline void REM_BasestationSetConfiguration_set_messageId(REM_BasestationSetConfigurationPayload *rembscp, uint32_t messageId){
    rembscp->payload[3] = (messageId & 0b00001111) | (rembscp->payload[3] & 0b11110000);
}

static inline void REM_BasestationSetConfiguration_set_payloadSize(REM_BasestationSetConfigurationPayload *rembscp, uint32_t payloadSize){
    rembscp->payload[4] = payloadSize;
}

static inline void REM_BasestationSetConfiguration_set_header(REM_BasestationSetConfigurationPayload *rembscp, uint32_t header){
    rembscp->payload[5] = header;
}

// ================================ ENCODE ================================
static inline void encodeREM_BasestationSetConfiguration(REM_BasestationSetConfigurationPayload *rembscp, REM_BasestationSetConfiguration *rembsc){
    REM_BasestationSetConfiguration_set_header              (rembscp, rembsc->header);
    REM_BasestationSetConfiguration_set_toRobotId           (rembscp, rembsc->toRobotId);
    REM_BasestationSetConfiguration_set_toColor             (rembscp, rembsc->toColor);
    REM_BasestationSetConfiguration_set_toBC                (rembscp, rembsc->toBC);
    REM_BasestationSetConfiguration_set_toBS                (rembscp, rembsc->toBS);
    REM_BasestationSetConfiguration_set_toPC                (rembscp, rembsc->toPC);
    REM_BasestationSetConfiguration_set_fromRobotId         (rembscp, rembsc->fromRobotId);
    REM_BasestationSetConfiguration_set_fromColor           (rembscp, rembsc->fromColor);
    REM_BasestationSetConfiguration_set_reserved            (rembscp, rembsc->reserved);
    REM_BasestationSetConfiguration_set_fromBS              (rembscp, rembsc->fromBS);
    REM_BasestationSetConfiguration_set_fromPC              (rembscp, rembsc->fromPC);
    REM_BasestationSetConfiguration_set_remVersion          (rembscp, rembsc->remVersion);
    REM_BasestationSetConfiguration_set_messageId           (rembscp, rembsc->messageId);
    REM_BasestationSetConfiguration_set_payloadSize         (rembscp, rembsc->payloadSize);
    REM_BasestationSetConfiguration_set_header              (rembscp, rembsc->header);
}

// ================================ DECODE ================================
static inline void decodeREM_BasestationSetConfiguration(REM_BasestationSetConfiguration *rembsc, REM_BasestationSetConfigurationPayload *rembscp){
    rembsc->header       = REM_BasestationSetConfiguration_get_header(rembscp);
    rembsc->toRobotId    = REM_BasestationSetConfiguration_get_toRobotId(rembscp);
    rembsc->toColor      = REM_BasestationSetConfiguration_get_toColor(rembscp);
    rembsc->toBC         = REM_BasestationSetConfiguration_get_toBC(rembscp);
    rembsc->toBS         = REM_BasestationSetConfiguration_get_toBS(rembscp);
    rembsc->toPC         = REM_BasestationSetConfiguration_get_toPC(rembscp);
    rembsc->fromRobotId  = REM_BasestationSetConfiguration_get_fromRobotId(rembscp);
    rembsc->fromColor    = REM_BasestationSetConfiguration_get_fromColor(rembscp);
    rembsc->reserved     = REM_BasestationSetConfiguration_get_reserved(rembscp);
    rembsc->fromBS       = REM_BasestationSetConfiguration_get_fromBS(rembscp);
    rembsc->fromPC       = REM_BasestationSetConfiguration_get_fromPC(rembscp);
    rembsc->remVersion   = REM_BasestationSetConfiguration_get_remVersion(rembscp);
    rembsc->messageId    = REM_BasestationSetConfiguration_get_messageId(rembscp);
    rembsc->payloadSize  = REM_BasestationSetConfiguration_get_payloadSize(rembscp);
    rembsc->header       = REM_BasestationSetConfiguration_get_header(rembscp);
}

#endif /*__REM_BASESTATION_SET_CONFIGURATION_H*/
