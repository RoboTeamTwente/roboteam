// AUTOGENERATED. Run generator/main.py to regenerate
// Generated on July 04 2021, 23:10:36

/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ] [  10  ] [  11  ] [  12  ] [  13  ] [  14  ] [  15  ] [  16  ] [  17  ] [  18  ] [  19  ] [  20  ] [  21  ] [  22  ] [  23  ] [  24  ] [  25  ] [  26  ] [  27  ] [  28  ] [  29  ] [  30  ] [  31  ] [  32  ] [  33  ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- id
-------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- messageId
-------- -------- 11111111 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- xsensAcc1
-------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- xsensAcc2
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- xsensYaw
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- rateOfTurn
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- wheelSpeed1
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- wheelSpeed2
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 -------- -------- -------- -------- wheelSpeed3
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 wheelSpeed4
*/

#ifndef __ROBOT_STATE_INFO_H
#define __ROBOT_STATE_INFO_H

#include <stdbool.h>
#include <stdint.h>
#include "BaseTypes.h"

typedef struct _RobotStateInfoPayload {
    uint8_t payload[PACKET_SIZE_ROBOT_STATE_INFO];
} RobotStateInfoPayload;

typedef struct _RobotStateInfo {
    uint32_t   header              ; // Header byte indicating the type of packet
    uint32_t   id                  ; // Id of the robot 
    uint32_t   messageId           ; // Id of the message
    float      xsensAcc1           ; // xsensAcc1
    float      xsensAcc2           ; // xsensAcc2
    float      xsensYaw            ; // xsensYaw
    float      rateOfTurn          ; // rateOfTurn
    float      wheelSpeed1         ; // wheelSpeed1
    float      wheelSpeed2         ; // wheelSpeed2
    float      wheelSpeed3         ; // wheelSpeed3
    float      wheelSpeed4         ; // wheelSpeed4
} RobotStateInfo;

// ================================ GETTERS ================================
static inline uint32_t RobotStateInfo_get_header(RobotStateInfoPayload *rsip){
    return ((rsip->payload[0]));
}

static inline uint32_t RobotStateInfo_get_id(RobotStateInfoPayload *rsip){
    return ((rsip->payload[1] & 0b11110000) >> 4);
}

static inline uint32_t RobotStateInfo_get_messageId(RobotStateInfoPayload *rsip){
    return ((rsip->payload[1] & 0b00001111));
}

static inline float RobotStateInfo_get_xsensAcc1(RobotStateInfoPayload *rsip){
    uint32_t _xsensAcc1 = ((rsip->payload[2]) << 24) | ((rsip->payload[3]) << 16) | ((rsip->payload[4]) << 8) | ((rsip->payload[5]));
    return (_xsensAcc1 * 0.0000232830643654) + -50000.0000000000000000;
}

static inline float RobotStateInfo_get_xsensAcc2(RobotStateInfoPayload *rsip){
    uint32_t _xsensAcc2 = ((rsip->payload[6]) << 24) | ((rsip->payload[7]) << 16) | ((rsip->payload[8]) << 8) | ((rsip->payload[9]));
    return (_xsensAcc2 * 0.0000232830643654) + -50000.0000000000000000;
}

static inline float RobotStateInfo_get_xsensYaw(RobotStateInfoPayload *rsip){
    uint32_t _xsensYaw = ((rsip->payload[10]) << 24) | ((rsip->payload[11]) << 16) | ((rsip->payload[12]) << 8) | ((rsip->payload[13]));
    return (_xsensYaw * 0.0000232830643654) + -50000.0000000000000000;
}

static inline float RobotStateInfo_get_rateOfTurn(RobotStateInfoPayload *rsip){
    uint32_t _rateOfTurn = ((rsip->payload[14]) << 24) | ((rsip->payload[15]) << 16) | ((rsip->payload[16]) << 8) | ((rsip->payload[17]));
    return (_rateOfTurn * 0.0000232830643654) + -50000.0000000000000000;
}

static inline float RobotStateInfo_get_wheelSpeed1(RobotStateInfoPayload *rsip){
    uint32_t _wheelSpeed1 = ((rsip->payload[18]) << 24) | ((rsip->payload[19]) << 16) | ((rsip->payload[20]) << 8) | ((rsip->payload[21]));
    return (_wheelSpeed1 * 0.0000232830643654) + -50000.0000000000000000;
}

static inline float RobotStateInfo_get_wheelSpeed2(RobotStateInfoPayload *rsip){
    uint32_t _wheelSpeed2 = ((rsip->payload[22]) << 24) | ((rsip->payload[23]) << 16) | ((rsip->payload[24]) << 8) | ((rsip->payload[25]));
    return (_wheelSpeed2 * 0.0000232830643654) + -50000.0000000000000000;
}

static inline float RobotStateInfo_get_wheelSpeed3(RobotStateInfoPayload *rsip){
    uint32_t _wheelSpeed3 = ((rsip->payload[26]) << 24) | ((rsip->payload[27]) << 16) | ((rsip->payload[28]) << 8) | ((rsip->payload[29]));
    return (_wheelSpeed3 * 0.0000232830643654) + -50000.0000000000000000;
}

static inline float RobotStateInfo_get_wheelSpeed4(RobotStateInfoPayload *rsip){
    uint32_t _wheelSpeed4 = ((rsip->payload[30]) << 24) | ((rsip->payload[31]) << 16) | ((rsip->payload[32]) << 8) | ((rsip->payload[33]));
    return (_wheelSpeed4 * 0.0000232830643654) + -50000.0000000000000000;
}

// ================================ SETTERS ================================
static inline void RobotStateInfo_set_header(RobotStateInfoPayload *rsip, uint32_t header){
    rsip->payload[0] = header;
}

static inline void RobotStateInfo_set_id(RobotStateInfoPayload *rsip, uint32_t id){
    rsip->payload[1] = ((id << 4) & 0b11110000) | (rsip->payload[1] & 0b00001111);
}

static inline void RobotStateInfo_set_messageId(RobotStateInfoPayload *rsip, uint32_t messageId){
    rsip->payload[1] = (messageId & 0b00001111) | (rsip->payload[1] & 0b11110000);
}

static inline void RobotStateInfo_set_xsensAcc1(RobotStateInfoPayload *rsip, float xsensAcc1){
    uint32_t _xsensAcc1 = (uint32_t)((xsensAcc1 +50000.0000000000000000) / 0.0000232830643654);
    rsip->payload[2] = (_xsensAcc1 >> 24);
    rsip->payload[3] = (_xsensAcc1 >> 24);
    rsip->payload[4] = (_xsensAcc1 >> 24);
    rsip->payload[5] = (_xsensAcc1 >> 24);
}

static inline void RobotStateInfo_set_xsensAcc2(RobotStateInfoPayload *rsip, float xsensAcc2){
    uint32_t _xsensAcc2 = (uint32_t)((xsensAcc2 +50000.0000000000000000) / 0.0000232830643654);
    rsip->payload[6] = (_xsensAcc2 >> 24);
    rsip->payload[7] = (_xsensAcc2 >> 24);
    rsip->payload[8] = (_xsensAcc2 >> 24);
    rsip->payload[9] = (_xsensAcc2 >> 24);
}

static inline void RobotStateInfo_set_xsensYaw(RobotStateInfoPayload *rsip, float xsensYaw){
    uint32_t _xsensYaw = (uint32_t)((xsensYaw +50000.0000000000000000) / 0.0000232830643654);
    rsip->payload[10] = (_xsensYaw >> 24);
    rsip->payload[11] = (_xsensYaw >> 24);
    rsip->payload[12] = (_xsensYaw >> 24);
    rsip->payload[13] = (_xsensYaw >> 24);
}

static inline void RobotStateInfo_set_rateOfTurn(RobotStateInfoPayload *rsip, float rateOfTurn){
    uint32_t _rateOfTurn = (uint32_t)((rateOfTurn +50000.0000000000000000) / 0.0000232830643654);
    rsip->payload[14] = (_rateOfTurn >> 24);
    rsip->payload[15] = (_rateOfTurn >> 24);
    rsip->payload[16] = (_rateOfTurn >> 24);
    rsip->payload[17] = (_rateOfTurn >> 24);
}

static inline void RobotStateInfo_set_wheelSpeed1(RobotStateInfoPayload *rsip, float wheelSpeed1){
    uint32_t _wheelSpeed1 = (uint32_t)((wheelSpeed1 +50000.0000000000000000) / 0.0000232830643654);
    rsip->payload[18] = (_wheelSpeed1 >> 24);
    rsip->payload[19] = (_wheelSpeed1 >> 24);
    rsip->payload[20] = (_wheelSpeed1 >> 24);
    rsip->payload[21] = (_wheelSpeed1 >> 24);
}

static inline void RobotStateInfo_set_wheelSpeed2(RobotStateInfoPayload *rsip, float wheelSpeed2){
    uint32_t _wheelSpeed2 = (uint32_t)((wheelSpeed2 +50000.0000000000000000) / 0.0000232830643654);
    rsip->payload[22] = (_wheelSpeed2 >> 24);
    rsip->payload[23] = (_wheelSpeed2 >> 24);
    rsip->payload[24] = (_wheelSpeed2 >> 24);
    rsip->payload[25] = (_wheelSpeed2 >> 24);
}

static inline void RobotStateInfo_set_wheelSpeed3(RobotStateInfoPayload *rsip, float wheelSpeed3){
    uint32_t _wheelSpeed3 = (uint32_t)((wheelSpeed3 +50000.0000000000000000) / 0.0000232830643654);
    rsip->payload[26] = (_wheelSpeed3 >> 24);
    rsip->payload[27] = (_wheelSpeed3 >> 24);
    rsip->payload[28] = (_wheelSpeed3 >> 24);
    rsip->payload[29] = (_wheelSpeed3 >> 24);
}

static inline void RobotStateInfo_set_wheelSpeed4(RobotStateInfoPayload *rsip, float wheelSpeed4){
    uint32_t _wheelSpeed4 = (uint32_t)((wheelSpeed4 +50000.0000000000000000) / 0.0000232830643654);
    rsip->payload[30] = (_wheelSpeed4 >> 24);
    rsip->payload[31] = (_wheelSpeed4 >> 24);
    rsip->payload[32] = (_wheelSpeed4 >> 24);
    rsip->payload[33] = (_wheelSpeed4 >> 24);
}

// ================================ ENCODE ================================
static inline void encodeRobotStateInfo(RobotStateInfoPayload *rsip, RobotStateInfo *rsi){
    RobotStateInfo_set_header              (rsip, rsi->header);
    RobotStateInfo_set_id                  (rsip, rsi->id);
    RobotStateInfo_set_messageId           (rsip, rsi->messageId);
    RobotStateInfo_set_xsensAcc1           (rsip, rsi->xsensAcc1);
    RobotStateInfo_set_xsensAcc2           (rsip, rsi->xsensAcc2);
    RobotStateInfo_set_xsensYaw            (rsip, rsi->xsensYaw);
    RobotStateInfo_set_rateOfTurn          (rsip, rsi->rateOfTurn);
    RobotStateInfo_set_wheelSpeed1         (rsip, rsi->wheelSpeed1);
    RobotStateInfo_set_wheelSpeed2         (rsip, rsi->wheelSpeed2);
    RobotStateInfo_set_wheelSpeed3         (rsip, rsi->wheelSpeed3);
    RobotStateInfo_set_wheelSpeed4         (rsip, rsi->wheelSpeed4);
}

// ================================ DECODE ================================
static inline void decodeRobotStateInfo(RobotStateInfo *rsi, RobotStateInfoPayload *rsip){
    rsi->header          = RobotStateInfo_get_header(rsip);
    rsi->id              = RobotStateInfo_get_id(rsip);
    rsi->messageId       = RobotStateInfo_get_messageId(rsip);
    rsi->xsensAcc1       = RobotStateInfo_get_xsensAcc1(rsip);
    rsi->xsensAcc2       = RobotStateInfo_get_xsensAcc2(rsip);
    rsi->xsensYaw        = RobotStateInfo_get_xsensYaw(rsip);
    rsi->rateOfTurn      = RobotStateInfo_get_rateOfTurn(rsip);
    rsi->wheelSpeed1     = RobotStateInfo_get_wheelSpeed1(rsip);
    rsi->wheelSpeed2     = RobotStateInfo_get_wheelSpeed2(rsip);
    rsi->wheelSpeed3     = RobotStateInfo_get_wheelSpeed3(rsip);
    rsi->wheelSpeed4     = RobotStateInfo_get_wheelSpeed4(rsip);
}

#endif /*__ROBOT_STATE_INFO_H*/
