// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotCommands.proto

#include "RobotCommands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace proto {
PROTOBUF_CONSTEXPR Position::Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;
PROTOBUF_CONSTEXPR RobotCommand::RobotCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.angular_velocity_)*/0
  , /*decltype(_impl_.camera_yaw_of_robot_)*/0
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.use_angular_velocity_)*/false
  , /*decltype(_impl_.camera_yaw_of_robot_is_set_)*/false
  , /*decltype(_impl_.wait_for_ball_)*/false
  , /*decltype(_impl_.kick_at_yaw_)*/false
  , /*decltype(_impl_.kick_speed_)*/0
  , /*decltype(_impl_.kick_type_)*/0
  , /*decltype(_impl_.dribbler_on_)*/false
  , /*decltype(_impl_.wheels_off_)*/false
  , /*decltype(_impl_.acceleration_x_)*/0
  , /*decltype(_impl_.acceleration_y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RobotCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotCommandDefaultTypeInternal() {}
  union {
    RobotCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotCommandDefaultTypeInternal _RobotCommand_default_instance_;
PROTOBUF_CONSTEXPR RobotCommands::RobotCommands(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.robot_commands_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RobotCommandsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RobotCommandsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RobotCommandsDefaultTypeInternal() {}
  union {
    RobotCommands _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RobotCommandsDefaultTypeInternal _RobotCommands_default_instance_;
}  // namespace proto
static ::_pb::Metadata file_level_metadata_RobotCommands_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_RobotCommands_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_RobotCommands_2eproto = nullptr;

const uint32_t TableStruct_RobotCommands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::Position, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::proto::Position, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.use_angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.camera_yaw_of_robot_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.camera_yaw_of_robot_is_set_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.kick_speed_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.wait_for_ball_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.kick_at_yaw_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.kick_type_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.dribbler_on_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.wheels_off_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.acceleration_x_),
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommand, _impl_.acceleration_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommands, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::proto::RobotCommands, _impl_.robot_commands_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::proto::Position)},
  { 8, -1, -1, sizeof(::proto::RobotCommand)},
  { 30, -1, -1, sizeof(::proto::RobotCommands)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::proto::_Position_default_instance_._instance,
  &::proto::_RobotCommand_default_instance_._instance,
  &::proto::_RobotCommands_default_instance_._instance,
};

const char descriptor_table_protodef_RobotCommands_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023RobotCommands.proto\022\005proto\" \n\010Position"
  "\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\"\255\003\n\014RobotCommand\022"
  "\n\n\002id\030\001 \001(\005\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\013\n\003yaw"
  "\030\004 \001(\001\022\030\n\020angular_velocity\030\005 \001(\001\022\034\n\024use_"
  "angular_velocity\030\006 \001(\010\022\033\n\023camera_yaw_of_"
  "robot\030\007 \001(\001\022\"\n\032camera_yaw_of_robot_is_se"
  "t\030\010 \001(\010\022\022\n\nkick_speed\030\t \001(\001\022\025\n\rwait_for_"
  "ball\030\n \001(\010\022\023\n\013kick_at_yaw\030\013 \001(\010\022/\n\tkick_"
  "type\030\014 \001(\0162\034.proto.RobotCommand.KickType"
  "\022\023\n\013dribbler_on\030\r \001(\010\022\022\n\nwheels_off\030\016 \001("
  "\010\022\026\n\016acceleration_x\030\017 \001(\001\022\026\n\016acceleratio"
  "n_y\030\020 \001(\001\"+\n\010KickType\022\013\n\007NO_KICK\020\000\022\010\n\004KI"
  "CK\020\001\022\010\n\004CHIP\020\002\"<\n\rRobotCommands\022+\n\016robot"
  "_commands\030\001 \003(\0132\023.proto.RobotCommandb\006pr"
  "oto3"
  ;
static ::_pbi::once_flag descriptor_table_RobotCommands_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_RobotCommands_2eproto = {
    false, false, 564, descriptor_table_protodef_RobotCommands_2eproto,
    "RobotCommands.proto",
    &descriptor_table_RobotCommands_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_RobotCommands_2eproto::offsets,
    file_level_metadata_RobotCommands_2eproto, file_level_enum_descriptors_RobotCommands_2eproto,
    file_level_service_descriptors_RobotCommands_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_RobotCommands_2eproto_getter() {
  return &descriptor_table_RobotCommands_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_RobotCommands_2eproto(&descriptor_table_RobotCommands_2eproto);
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotCommand_KickType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_RobotCommands_2eproto);
  return file_level_enum_descriptors_RobotCommands_2eproto[0];
}
bool RobotCommand_KickType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr RobotCommand_KickType RobotCommand::NO_KICK;
constexpr RobotCommand_KickType RobotCommand::KICK;
constexpr RobotCommand_KickType RobotCommand::CHIP;
constexpr RobotCommand_KickType RobotCommand::KickType_MIN;
constexpr RobotCommand_KickType RobotCommand::KickType_MAX;
constexpr int RobotCommand::KickType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:proto.Position)
}

inline void Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:proto.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }


void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.y_)
      + sizeof(Position::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RobotCommands_2eproto_getter, &descriptor_table_RobotCommands_2eproto_once,
      file_level_metadata_RobotCommands_2eproto[0]);
}

// ===================================================================

class RobotCommand::_Internal {
 public:
};

RobotCommand::RobotCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.RobotCommand)
}
RobotCommand::RobotCommand(const RobotCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RobotCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.angular_velocity_){}
    , decltype(_impl_.camera_yaw_of_robot_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.use_angular_velocity_){}
    , decltype(_impl_.camera_yaw_of_robot_is_set_){}
    , decltype(_impl_.wait_for_ball_){}
    , decltype(_impl_.kick_at_yaw_){}
    , decltype(_impl_.kick_speed_){}
    , decltype(_impl_.kick_type_){}
    , decltype(_impl_.dribbler_on_){}
    , decltype(_impl_.wheels_off_){}
    , decltype(_impl_.acceleration_x_){}
    , decltype(_impl_.acceleration_y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.acceleration_y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.acceleration_y_));
  // @@protoc_insertion_point(copy_constructor:proto.RobotCommand)
}

inline void RobotCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.angular_velocity_){0}
    , decltype(_impl_.camera_yaw_of_robot_){0}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.use_angular_velocity_){false}
    , decltype(_impl_.camera_yaw_of_robot_is_set_){false}
    , decltype(_impl_.wait_for_ball_){false}
    , decltype(_impl_.kick_at_yaw_){false}
    , decltype(_impl_.kick_speed_){0}
    , decltype(_impl_.kick_type_){0}
    , decltype(_impl_.dribbler_on_){false}
    , decltype(_impl_.wheels_off_){false}
    , decltype(_impl_.acceleration_x_){0}
    , decltype(_impl_.acceleration_y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RobotCommand::~RobotCommand() {
  // @@protoc_insertion_point(destructor:proto.RobotCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RobotCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RobotCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RobotCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RobotCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.acceleration_y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.acceleration_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double yaw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double angular_velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.angular_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool use_angular_velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.use_angular_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double camera_yaw_of_robot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.camera_yaw_of_robot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool camera_yaw_of_robot_is_set = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.camera_yaw_of_robot_is_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double kick_speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.kick_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool wait_for_ball = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.wait_for_ball_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool kick_at_yaw = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.kick_at_yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .proto.RobotCommand.KickType kick_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kick_type(static_cast<::proto::RobotCommand_KickType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool dribbler_on = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.dribbler_on_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool wheels_off = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.wheels_off_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_x = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _impl_.acceleration_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_y = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _impl_.acceleration_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RobotCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RobotCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // double x = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // double y = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // double yaw = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_yaw(), target);
  }

  // double angular_velocity = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angular_velocity = this->_internal_angular_velocity();
  uint64_t raw_angular_velocity;
  memcpy(&raw_angular_velocity, &tmp_angular_velocity, sizeof(tmp_angular_velocity));
  if (raw_angular_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_angular_velocity(), target);
  }

  // bool use_angular_velocity = 6;
  if (this->_internal_use_angular_velocity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_angular_velocity(), target);
  }

  // double camera_yaw_of_robot = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_camera_yaw_of_robot = this->_internal_camera_yaw_of_robot();
  uint64_t raw_camera_yaw_of_robot;
  memcpy(&raw_camera_yaw_of_robot, &tmp_camera_yaw_of_robot, sizeof(tmp_camera_yaw_of_robot));
  if (raw_camera_yaw_of_robot != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_camera_yaw_of_robot(), target);
  }

  // bool camera_yaw_of_robot_is_set = 8;
  if (this->_internal_camera_yaw_of_robot_is_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_camera_yaw_of_robot_is_set(), target);
  }

  // double kick_speed = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kick_speed = this->_internal_kick_speed();
  uint64_t raw_kick_speed;
  memcpy(&raw_kick_speed, &tmp_kick_speed, sizeof(tmp_kick_speed));
  if (raw_kick_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_kick_speed(), target);
  }

  // bool wait_for_ball = 10;
  if (this->_internal_wait_for_ball() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_wait_for_ball(), target);
  }

  // bool kick_at_yaw = 11;
  if (this->_internal_kick_at_yaw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_kick_at_yaw(), target);
  }

  // .proto.RobotCommand.KickType kick_type = 12;
  if (this->_internal_kick_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      12, this->_internal_kick_type(), target);
  }

  // bool dribbler_on = 13;
  if (this->_internal_dribbler_on() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_dribbler_on(), target);
  }

  // bool wheels_off = 14;
  if (this->_internal_wheels_off() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_wheels_off(), target);
  }

  // double acceleration_x = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_x = this->_internal_acceleration_x();
  uint64_t raw_acceleration_x;
  memcpy(&raw_acceleration_x, &tmp_acceleration_x, sizeof(tmp_acceleration_x));
  if (raw_acceleration_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_acceleration_x(), target);
  }

  // double acceleration_y = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_y = this->_internal_acceleration_y();
  uint64_t raw_acceleration_y;
  memcpy(&raw_acceleration_y, &tmp_acceleration_y, sizeof(tmp_acceleration_y));
  if (raw_acceleration_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_acceleration_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RobotCommand)
  return target;
}

size_t RobotCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RobotCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double yaw = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = this->_internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 8;
  }

  // double angular_velocity = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angular_velocity = this->_internal_angular_velocity();
  uint64_t raw_angular_velocity;
  memcpy(&raw_angular_velocity, &tmp_angular_velocity, sizeof(tmp_angular_velocity));
  if (raw_angular_velocity != 0) {
    total_size += 1 + 8;
  }

  // double camera_yaw_of_robot = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_camera_yaw_of_robot = this->_internal_camera_yaw_of_robot();
  uint64_t raw_camera_yaw_of_robot;
  memcpy(&raw_camera_yaw_of_robot, &tmp_camera_yaw_of_robot, sizeof(tmp_camera_yaw_of_robot));
  if (raw_camera_yaw_of_robot != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // bool use_angular_velocity = 6;
  if (this->_internal_use_angular_velocity() != 0) {
    total_size += 1 + 1;
  }

  // bool camera_yaw_of_robot_is_set = 8;
  if (this->_internal_camera_yaw_of_robot_is_set() != 0) {
    total_size += 1 + 1;
  }

  // bool wait_for_ball = 10;
  if (this->_internal_wait_for_ball() != 0) {
    total_size += 1 + 1;
  }

  // bool kick_at_yaw = 11;
  if (this->_internal_kick_at_yaw() != 0) {
    total_size += 1 + 1;
  }

  // double kick_speed = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kick_speed = this->_internal_kick_speed();
  uint64_t raw_kick_speed;
  memcpy(&raw_kick_speed, &tmp_kick_speed, sizeof(tmp_kick_speed));
  if (raw_kick_speed != 0) {
    total_size += 1 + 8;
  }

  // .proto.RobotCommand.KickType kick_type = 12;
  if (this->_internal_kick_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kick_type());
  }

  // bool dribbler_on = 13;
  if (this->_internal_dribbler_on() != 0) {
    total_size += 1 + 1;
  }

  // bool wheels_off = 14;
  if (this->_internal_wheels_off() != 0) {
    total_size += 1 + 1;
  }

  // double acceleration_x = 15;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_x = this->_internal_acceleration_x();
  uint64_t raw_acceleration_x;
  memcpy(&raw_acceleration_x, &tmp_acceleration_x, sizeof(tmp_acceleration_x));
  if (raw_acceleration_x != 0) {
    total_size += 1 + 8;
  }

  // double acceleration_y = 16;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_y = this->_internal_acceleration_y();
  uint64_t raw_acceleration_y;
  memcpy(&raw_acceleration_y, &tmp_acceleration_y, sizeof(tmp_acceleration_y));
  if (raw_acceleration_y != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RobotCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotCommand::GetClassData() const { return &_class_data_; }


void RobotCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RobotCommand*>(&to_msg);
  auto& from = static_cast<const RobotCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.RobotCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw = from._internal_yaw();
  uint64_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angular_velocity = from._internal_angular_velocity();
  uint64_t raw_angular_velocity;
  memcpy(&raw_angular_velocity, &tmp_angular_velocity, sizeof(tmp_angular_velocity));
  if (raw_angular_velocity != 0) {
    _this->_internal_set_angular_velocity(from._internal_angular_velocity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_camera_yaw_of_robot = from._internal_camera_yaw_of_robot();
  uint64_t raw_camera_yaw_of_robot;
  memcpy(&raw_camera_yaw_of_robot, &tmp_camera_yaw_of_robot, sizeof(tmp_camera_yaw_of_robot));
  if (raw_camera_yaw_of_robot != 0) {
    _this->_internal_set_camera_yaw_of_robot(from._internal_camera_yaw_of_robot());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_use_angular_velocity() != 0) {
    _this->_internal_set_use_angular_velocity(from._internal_use_angular_velocity());
  }
  if (from._internal_camera_yaw_of_robot_is_set() != 0) {
    _this->_internal_set_camera_yaw_of_robot_is_set(from._internal_camera_yaw_of_robot_is_set());
  }
  if (from._internal_wait_for_ball() != 0) {
    _this->_internal_set_wait_for_ball(from._internal_wait_for_ball());
  }
  if (from._internal_kick_at_yaw() != 0) {
    _this->_internal_set_kick_at_yaw(from._internal_kick_at_yaw());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_kick_speed = from._internal_kick_speed();
  uint64_t raw_kick_speed;
  memcpy(&raw_kick_speed, &tmp_kick_speed, sizeof(tmp_kick_speed));
  if (raw_kick_speed != 0) {
    _this->_internal_set_kick_speed(from._internal_kick_speed());
  }
  if (from._internal_kick_type() != 0) {
    _this->_internal_set_kick_type(from._internal_kick_type());
  }
  if (from._internal_dribbler_on() != 0) {
    _this->_internal_set_dribbler_on(from._internal_dribbler_on());
  }
  if (from._internal_wheels_off() != 0) {
    _this->_internal_set_wheels_off(from._internal_wheels_off());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_x = from._internal_acceleration_x();
  uint64_t raw_acceleration_x;
  memcpy(&raw_acceleration_x, &tmp_acceleration_x, sizeof(tmp_acceleration_x));
  if (raw_acceleration_x != 0) {
    _this->_internal_set_acceleration_x(from._internal_acceleration_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_acceleration_y = from._internal_acceleration_y();
  uint64_t raw_acceleration_y;
  memcpy(&raw_acceleration_y, &tmp_acceleration_y, sizeof(tmp_acceleration_y));
  if (raw_acceleration_y != 0) {
    _this->_internal_set_acceleration_y(from._internal_acceleration_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotCommand::CopyFrom(const RobotCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RobotCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommand::IsInitialized() const {
  return true;
}

void RobotCommand::InternalSwap(RobotCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RobotCommand, _impl_.acceleration_y_)
      + sizeof(RobotCommand::_impl_.acceleration_y_)
      - PROTOBUF_FIELD_OFFSET(RobotCommand, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RobotCommands_2eproto_getter, &descriptor_table_RobotCommands_2eproto_once,
      file_level_metadata_RobotCommands_2eproto[1]);
}

// ===================================================================

class RobotCommands::_Internal {
 public:
};

RobotCommands::RobotCommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:proto.RobotCommands)
}
RobotCommands::RobotCommands(const RobotCommands& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RobotCommands* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.robot_commands_){from._impl_.robot_commands_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.RobotCommands)
}

inline void RobotCommands::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.robot_commands_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RobotCommands::~RobotCommands() {
  // @@protoc_insertion_point(destructor:proto.RobotCommands)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RobotCommands::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.robot_commands_.~RepeatedPtrField();
}

void RobotCommands::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RobotCommands::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RobotCommands)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.robot_commands_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RobotCommands::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .proto.RobotCommand robot_commands = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robot_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RobotCommands::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.RobotCommands)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.RobotCommand robot_commands = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_robot_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_robot_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RobotCommands)
  return target;
}

size_t RobotCommands::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RobotCommands)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.RobotCommand robot_commands = 1;
  total_size += 1UL * this->_internal_robot_commands_size();
  for (const auto& msg : this->_impl_.robot_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RobotCommands::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RobotCommands::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RobotCommands::GetClassData() const { return &_class_data_; }


void RobotCommands::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RobotCommands*>(&to_msg);
  auto& from = static_cast<const RobotCommands&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:proto.RobotCommands)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.robot_commands_.MergeFrom(from._impl_.robot_commands_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RobotCommands::CopyFrom(const RobotCommands& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RobotCommands)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommands::IsInitialized() const {
  return true;
}

void RobotCommands::InternalSwap(RobotCommands* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.robot_commands_.InternalSwap(&other->_impl_.robot_commands_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RobotCommands::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_RobotCommands_2eproto_getter, &descriptor_table_RobotCommands_2eproto_once,
      file_level_metadata_RobotCommands_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::proto::Position*
Arena::CreateMaybeMessage< ::proto::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RobotCommand*
Arena::CreateMaybeMessage< ::proto::RobotCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RobotCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::RobotCommands*
Arena::CreateMaybeMessage< ::proto::RobotCommands >(Arena* arena) {
  return Arena::CreateMessageInternal< ::proto::RobotCommands >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
