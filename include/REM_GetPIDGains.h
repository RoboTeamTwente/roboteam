// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ]
11111111 header
*/

#ifndef __REM_GET_P_I_D_GAINS_H
#define __REM_GET_P_I_D_GAINS_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_GetPIDGainsPayload {
    uint8_t payload[PACKET_SIZE_REM_GET_P_I_D_GAINS];
} REM_GetPIDGainsPayload;

typedef struct _REM_GetPIDGains {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
} REM_GetPIDGains;

// ================================ GETTERS ================================
static inline uint32_t REM_GetPIDGains_get_header(REM_GetPIDGainsPayload *remgpidgp){
    return ((remgpidgp->payload[0]));
}

// ================================ SETTERS ================================
static inline void REM_GetPIDGains_set_header(REM_GetPIDGainsPayload *remgpidgp, uint32_t header){
    remgpidgp->payload[0] = header;
}

// ================================ ENCODE ================================
static inline void encodeREM_GetPIDGains(REM_GetPIDGainsPayload *remgpidgp, REM_GetPIDGains *remgpidg){
    REM_GetPIDGains_set_header              (remgpidgp, remgpidg->header);
}

// ================================ DECODE ================================
static inline void decodeREM_GetPIDGains(REM_GetPIDGains *remgpidg, REM_GetPIDGainsPayload *remgpidgp){
    remgpidg->header     = REM_GetPIDGains_get_header(remgpidgp);
}

#endif /*__REM_GET_P_I_D_GAINS_H*/
