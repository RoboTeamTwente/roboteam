// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ] [  10  ] [  11  ] [  12  ] [  13  ] [  14  ] [  15  ] [  16  ] [  17  ] [  18  ] [  19  ] [  20  ] [  21  ] [  22  ] [  23  ] [  24  ] [  25  ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- remVersion
-------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- id
-------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- PbodyX
-------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- IbodyX
-------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- DbodyX
-------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- PbodyY
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- IbodyY
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- DbodyY
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- PbodyYaw
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- IbodyYaw
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- DbodyYaw
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- Pwheels
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- Iwheels
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 Dwheels
*/

#ifndef __REM_P_I_D_GAINS_H
#define __REM_P_I_D_GAINS_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_PIDGainsPayload {
    uint8_t payload[PACKET_SIZE_REM_P_I_D_GAINS];
} REM_PIDGainsPayload;

typedef struct _REM_PIDGains {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   id                  ; // integer [0, 15]              Id of the robot
    float      PbodyX              ; // float   [0.000, 40.000]      Received P gain of the PID for body_x (x-direction)
    float      IbodyX              ; // float   [0.000, 20.000]      Received I gain of the PID for body_x (x-direction)
    float      DbodyX              ; // float   [0.000, 10.000]      Received D gain of the PID for body_x (x-direction)
    float      PbodyY              ; // float   [0.000, 40.000]      Received P gain of the PID for body_y (y-direction)
    float      IbodyY              ; // float   [0.000, 20.000]      Received I gain of the PID for body_y (y-direction)
    float      DbodyY              ; // float   [0.000, 10.000]      Received D gain of the PID for body_y (y-direction)
    float      PbodyYaw            ; // float   [0.000, 40.000]      Received P gain of the PID for body_yaw (Absolute angle)
    float      IbodyYaw            ; // float   [0.000, 20.000]      Received I gain of the PID for body_yaw (Absolute angle)
    float      DbodyYaw            ; // float   [0.000, 10.000]      Received D gain of the PID for body_yaw (Absolute angle)
    float      Pwheels             ; // float   [0.000, 40.000]      Received P gain of the PID for the wheels
    float      Iwheels             ; // float   [0.000, 20.000]      Received I gain of the PID for the wheels
    float      Dwheels             ; // float   [0.000, 10.000]      Received D gain of the PID for the wheels
} REM_PIDGains;

// ================================ GETTERS ================================
static inline uint32_t REM_PIDGains_get_header(REM_PIDGainsPayload *rempidgp){
    return ((rempidgp->payload[0]));
}

static inline uint32_t REM_PIDGains_get_remVersion(REM_PIDGainsPayload *rempidgp){
    return ((rempidgp->payload[1] & 0b11110000) >> 4);
}

static inline uint32_t REM_PIDGains_get_id(REM_PIDGainsPayload *rempidgp){
    return ((rempidgp->payload[1] & 0b00001111));
}

static inline float REM_PIDGains_get_PbodyX(REM_PIDGainsPayload *rempidgp){
    uint32_t _PbodyX = ((rempidgp->payload[2]) << 8) | ((rempidgp->payload[3]));
    return (_PbodyX * 0.0006103608758679) + 0.0000000000000000;
}

static inline float REM_PIDGains_get_IbodyX(REM_PIDGainsPayload *rempidgp){
    uint32_t _IbodyX = ((rempidgp->payload[4]) << 8) | ((rempidgp->payload[5]));
    return (_IbodyX * 0.0003051804379339) + 0.0000000000000000;
}

static inline float REM_PIDGains_get_DbodyX(REM_PIDGainsPayload *rempidgp){
    uint32_t _DbodyX = ((rempidgp->payload[6]) << 8) | ((rempidgp->payload[7]));
    return (_DbodyX * 0.0001525902189670) + 0.0000000000000000;
}

static inline float REM_PIDGains_get_PbodyY(REM_PIDGainsPayload *rempidgp){
    uint32_t _PbodyY = ((rempidgp->payload[8]) << 8) | ((rempidgp->payload[9]));
    return (_PbodyY * 0.0006103608758679) + 0.0000000000000000;
}

static inline float REM_PIDGains_get_IbodyY(REM_PIDGainsPayload *rempidgp){
    uint32_t _IbodyY = ((rempidgp->payload[10]) << 8) | ((rempidgp->payload[11]));
    return (_IbodyY * 0.0003051804379339) + 0.0000000000000000;
}

static inline float REM_PIDGains_get_DbodyY(REM_PIDGainsPayload *rempidgp){
    uint32_t _DbodyY = ((rempidgp->payload[12]) << 8) | ((rempidgp->payload[13]));
    return (_DbodyY * 0.0001525902189670) + 0.0000000000000000;
}

static inline float REM_PIDGains_get_PbodyYaw(REM_PIDGainsPayload *rempidgp){
    uint32_t _PbodyYaw = ((rempidgp->payload[14]) << 8) | ((rempidgp->payload[15]));
    return (_PbodyYaw * 0.0006103608758679) + 0.0000000000000000;
}

static inline float REM_PIDGains_get_IbodyYaw(REM_PIDGainsPayload *rempidgp){
    uint32_t _IbodyYaw = ((rempidgp->payload[16]) << 8) | ((rempidgp->payload[17]));
    return (_IbodyYaw * 0.0003051804379339) + 0.0000000000000000;
}

static inline float REM_PIDGains_get_DbodyYaw(REM_PIDGainsPayload *rempidgp){
    uint32_t _DbodyYaw = ((rempidgp->payload[18]) << 8) | ((rempidgp->payload[19]));
    return (_DbodyYaw * 0.0001525902189670) + 0.0000000000000000;
}

static inline float REM_PIDGains_get_Pwheels(REM_PIDGainsPayload *rempidgp){
    uint32_t _Pwheels = ((rempidgp->payload[20]) << 8) | ((rempidgp->payload[21]));
    return (_Pwheels * 0.0006103608758679) + 0.0000000000000000;
}

static inline float REM_PIDGains_get_Iwheels(REM_PIDGainsPayload *rempidgp){
    uint32_t _Iwheels = ((rempidgp->payload[22]) << 8) | ((rempidgp->payload[23]));
    return (_Iwheels * 0.0003051804379339) + 0.0000000000000000;
}

static inline float REM_PIDGains_get_Dwheels(REM_PIDGainsPayload *rempidgp){
    uint32_t _Dwheels = ((rempidgp->payload[24]) << 8) | ((rempidgp->payload[25]));
    return (_Dwheels * 0.0001525902189670) + 0.0000000000000000;
}

// ================================ SETTERS ================================
static inline void REM_PIDGains_set_header(REM_PIDGainsPayload *rempidgp, uint32_t header){
    rempidgp->payload[0] = header;
}

static inline void REM_PIDGains_set_remVersion(REM_PIDGainsPayload *rempidgp, uint32_t remVersion){
    rempidgp->payload[1] = ((remVersion << 4) & 0b11110000) | (rempidgp->payload[1] & 0b00001111);
}

static inline void REM_PIDGains_set_id(REM_PIDGainsPayload *rempidgp, uint32_t id){
    rempidgp->payload[1] = (id & 0b00001111) | (rempidgp->payload[1] & 0b11110000);
}

static inline void REM_PIDGains_set_PbodyX(REM_PIDGainsPayload *rempidgp, float PbodyX){
    uint32_t _PbodyX = (uint32_t)(PbodyX / 0.0006103608758679);
    rempidgp->payload[2] = (_PbodyX >> 8);
    rempidgp->payload[3] = _PbodyX;
}

static inline void REM_PIDGains_set_IbodyX(REM_PIDGainsPayload *rempidgp, float IbodyX){
    uint32_t _IbodyX = (uint32_t)(IbodyX / 0.0003051804379339);
    rempidgp->payload[4] = (_IbodyX >> 8);
    rempidgp->payload[5] = _IbodyX;
}

static inline void REM_PIDGains_set_DbodyX(REM_PIDGainsPayload *rempidgp, float DbodyX){
    uint32_t _DbodyX = (uint32_t)(DbodyX / 0.0001525902189670);
    rempidgp->payload[6] = (_DbodyX >> 8);
    rempidgp->payload[7] = _DbodyX;
}

static inline void REM_PIDGains_set_PbodyY(REM_PIDGainsPayload *rempidgp, float PbodyY){
    uint32_t _PbodyY = (uint32_t)(PbodyY / 0.0006103608758679);
    rempidgp->payload[8] = (_PbodyY >> 8);
    rempidgp->payload[9] = _PbodyY;
}

static inline void REM_PIDGains_set_IbodyY(REM_PIDGainsPayload *rempidgp, float IbodyY){
    uint32_t _IbodyY = (uint32_t)(IbodyY / 0.0003051804379339);
    rempidgp->payload[10] = (_IbodyY >> 8);
    rempidgp->payload[11] = _IbodyY;
}

static inline void REM_PIDGains_set_DbodyY(REM_PIDGainsPayload *rempidgp, float DbodyY){
    uint32_t _DbodyY = (uint32_t)(DbodyY / 0.0001525902189670);
    rempidgp->payload[12] = (_DbodyY >> 8);
    rempidgp->payload[13] = _DbodyY;
}

static inline void REM_PIDGains_set_PbodyYaw(REM_PIDGainsPayload *rempidgp, float PbodyYaw){
    uint32_t _PbodyYaw = (uint32_t)(PbodyYaw / 0.0006103608758679);
    rempidgp->payload[14] = (_PbodyYaw >> 8);
    rempidgp->payload[15] = _PbodyYaw;
}

static inline void REM_PIDGains_set_IbodyYaw(REM_PIDGainsPayload *rempidgp, float IbodyYaw){
    uint32_t _IbodyYaw = (uint32_t)(IbodyYaw / 0.0003051804379339);
    rempidgp->payload[16] = (_IbodyYaw >> 8);
    rempidgp->payload[17] = _IbodyYaw;
}

static inline void REM_PIDGains_set_DbodyYaw(REM_PIDGainsPayload *rempidgp, float DbodyYaw){
    uint32_t _DbodyYaw = (uint32_t)(DbodyYaw / 0.0001525902189670);
    rempidgp->payload[18] = (_DbodyYaw >> 8);
    rempidgp->payload[19] = _DbodyYaw;
}

static inline void REM_PIDGains_set_Pwheels(REM_PIDGainsPayload *rempidgp, float Pwheels){
    uint32_t _Pwheels = (uint32_t)(Pwheels / 0.0006103608758679);
    rempidgp->payload[20] = (_Pwheels >> 8);
    rempidgp->payload[21] = _Pwheels;
}

static inline void REM_PIDGains_set_Iwheels(REM_PIDGainsPayload *rempidgp, float Iwheels){
    uint32_t _Iwheels = (uint32_t)(Iwheels / 0.0003051804379339);
    rempidgp->payload[22] = (_Iwheels >> 8);
    rempidgp->payload[23] = _Iwheels;
}

static inline void REM_PIDGains_set_Dwheels(REM_PIDGainsPayload *rempidgp, float Dwheels){
    uint32_t _Dwheels = (uint32_t)(Dwheels / 0.0001525902189670);
    rempidgp->payload[24] = (_Dwheels >> 8);
    rempidgp->payload[25] = _Dwheels;
}

// ================================ ENCODE ================================
static inline void encodeREM_PIDGains(REM_PIDGainsPayload *rempidgp, REM_PIDGains *rempidg){
    REM_PIDGains_set_header              (rempidgp, rempidg->header);
    REM_PIDGains_set_remVersion          (rempidgp, rempidg->remVersion);
    REM_PIDGains_set_id                  (rempidgp, rempidg->id);
    REM_PIDGains_set_PbodyX              (rempidgp, rempidg->PbodyX);
    REM_PIDGains_set_IbodyX              (rempidgp, rempidg->IbodyX);
    REM_PIDGains_set_DbodyX              (rempidgp, rempidg->DbodyX);
    REM_PIDGains_set_PbodyY              (rempidgp, rempidg->PbodyY);
    REM_PIDGains_set_IbodyY              (rempidgp, rempidg->IbodyY);
    REM_PIDGains_set_DbodyY              (rempidgp, rempidg->DbodyY);
    REM_PIDGains_set_PbodyYaw            (rempidgp, rempidg->PbodyYaw);
    REM_PIDGains_set_IbodyYaw            (rempidgp, rempidg->IbodyYaw);
    REM_PIDGains_set_DbodyYaw            (rempidgp, rempidg->DbodyYaw);
    REM_PIDGains_set_Pwheels             (rempidgp, rempidg->Pwheels);
    REM_PIDGains_set_Iwheels             (rempidgp, rempidg->Iwheels);
    REM_PIDGains_set_Dwheels             (rempidgp, rempidg->Dwheels);
}

// ================================ DECODE ================================
static inline void decodeREM_PIDGains(REM_PIDGains *rempidg, REM_PIDGainsPayload *rempidgp){
    rempidg->header      = REM_PIDGains_get_header(rempidgp);
    rempidg->remVersion  = REM_PIDGains_get_remVersion(rempidgp);
    rempidg->id          = REM_PIDGains_get_id(rempidgp);
    rempidg->PbodyX      = REM_PIDGains_get_PbodyX(rempidgp);
    rempidg->IbodyX      = REM_PIDGains_get_IbodyX(rempidgp);
    rempidg->DbodyX      = REM_PIDGains_get_DbodyX(rempidgp);
    rempidg->PbodyY      = REM_PIDGains_get_PbodyY(rempidgp);
    rempidg->IbodyY      = REM_PIDGains_get_IbodyY(rempidgp);
    rempidg->DbodyY      = REM_PIDGains_get_DbodyY(rempidgp);
    rempidg->PbodyYaw    = REM_PIDGains_get_PbodyYaw(rempidgp);
    rempidg->IbodyYaw    = REM_PIDGains_get_IbodyYaw(rempidgp);
    rempidg->DbodyYaw    = REM_PIDGains_get_DbodyYaw(rempidgp);
    rempidg->Pwheels     = REM_PIDGains_get_Pwheels(rempidgp);
    rempidg->Iwheels     = REM_PIDGains_get_Iwheels(rempidgp);
    rempidg->Dwheels     = REM_PIDGains_get_Dwheels(rempidgp);
}

#endif /*__REM_P_I_D_GAINS_H*/
