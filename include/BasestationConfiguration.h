// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ]
11111111 -------- header
-------- 1111---- remVersion
-------- ----1--- channel
*/

#ifndef __BASESTATION_CONFIGURATION_H
#define __BASESTATION_CONFIGURATION_H

#include <stdbool.h>
#include <stdint.h>
#include "BaseTypes.h"

typedef struct _BasestationConfigurationPayload {
    uint8_t payload[PACKET_SIZE_BASESTATION_CONFIGURATION];
} BasestationConfigurationPayload;

typedef struct _BasestationConfiguration {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    bool       channel             ; // integer [0, 1]               Channel on which the basestation and robots communicate
} BasestationConfiguration;

// ================================ GETTERS ================================
static inline uint32_t BasestationConfiguration_get_header(BasestationConfigurationPayload *bcp){
    return ((bcp->payload[0]));
}

static inline uint32_t BasestationConfiguration_get_remVersion(BasestationConfigurationPayload *bcp){
    return ((bcp->payload[1] & 0b11110000) >> 4);
}

static inline bool BasestationConfiguration_get_channel(BasestationConfigurationPayload *bcp){
    return (bcp->payload[1] & 0b00001000) > 0;
}

// ================================ SETTERS ================================
static inline void BasestationConfiguration_set_header(BasestationConfigurationPayload *bcp, uint32_t header){
    bcp->payload[0] = header;
}

static inline void BasestationConfiguration_set_remVersion(BasestationConfigurationPayload *bcp, uint32_t remVersion){
    bcp->payload[1] = ((remVersion << 4) & 0b11110000) | (bcp->payload[1] & 0b00001111);
}

static inline void BasestationConfiguration_set_channel(BasestationConfigurationPayload *bcp, bool channel){
    bcp->payload[1] = ((channel << 3) & 0b00001000) | (bcp->payload[1] & 0b11110111);
}

// ================================ ENCODE ================================
static inline void encodeBasestationConfiguration(BasestationConfigurationPayload *bcp, BasestationConfiguration *bc){
    BasestationConfiguration_set_header              (bcp, bc->header);
    BasestationConfiguration_set_remVersion          (bcp, bc->remVersion);
    BasestationConfiguration_set_channel             (bcp, bc->channel);
}

// ================================ DECODE ================================
static inline void decodeBasestationConfiguration(BasestationConfiguration *bc, BasestationConfigurationPayload *bcp){
    bc->header           = BasestationConfiguration_get_header(bcp);
    bc->remVersion       = BasestationConfiguration_get_remVersion(bcp);
    bc->channel          = BasestationConfiguration_get_channel(bcp);
}

#endif /*__BASESTATION_CONFIGURATION_H*/
