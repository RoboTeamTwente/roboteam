// AUTOGENERATED. Run generator/main.py to regenerate
// Generated on September 09 2021, 16:17:59

/*
[  0   ] [  1   ]
11111111 -------- header
-------- 1111---- id
*/

#ifndef __ROBOT_LOG_H
#define __ROBOT_LOG_H

#include <stdbool.h>
#include <stdint.h>
#include "BaseTypes.h"

typedef struct _RobotLogPayload {
    uint8_t payload[PACKET_SIZE_ROBOT_LOG];
} RobotLogPayload;

typedef struct _RobotLog {
    uint32_t   header              ; // Header byte indicating the type of packet
    uint32_t   id                  ; // Id of the robot
} RobotLog;

// ================================ GETTERS ================================
static inline uint32_t RobotLog_get_header(RobotLogPayload *rlp){
    return ((rlp->payload[0]));
}

static inline uint32_t RobotLog_get_id(RobotLogPayload *rlp){
    return ((rlp->payload[1] & 0b11110000) >> 4);
}

// ================================ SETTERS ================================
static inline void RobotLog_set_header(RobotLogPayload *rlp, uint32_t header){
    rlp->payload[0] = header;
}

static inline void RobotLog_set_id(RobotLogPayload *rlp, uint32_t id){
    rlp->payload[1] = ((id << 4) & 0b11110000) | (rlp->payload[1] & 0b00001111);
}

// ================================ ENCODE ================================
static inline void encodeRobotLog(RobotLogPayload *rlp, RobotLog *rl){
    RobotLog_set_header              (rlp, rl->header);
    RobotLog_set_id                  (rlp, rl->id);
}

// ================================ DECODE ================================
static inline void decodeRobotLog(RobotLog *rl, RobotLogPayload *rlp){
    rl->header           = RobotLog_get_header(rlp);
    rl->id               = RobotLog_get_id(rlp);
}

#endif /*__ROBOT_LOG_H*/
