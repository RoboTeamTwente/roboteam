// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ]
11111111 -------- -------- header
-------- 1111---- -------- remVersion
-------- ----1111 -------- id
-------- -------- 11111111 sequenceNumber
*/

#ifndef __ROBOT_ASSURED_ACK_H
#define __ROBOT_ASSURED_ACK_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _RobotAssuredAckPayload {
    uint8_t payload[PACKET_SIZE_ROBOT_ASSURED_ACK];
} RobotAssuredAckPayload;

typedef struct _RobotAssuredAck {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   id                  ; // integer [0, 15]              Id of the robot
    uint32_t   sequenceNumber      ; // integer [0, 255]             Number to match this packet with AssuredPacket
} RobotAssuredAck;

// ================================ GETTERS ================================
static inline uint32_t RobotAssuredAck_get_header(RobotAssuredAckPayload *raap){
    return ((raap->payload[0]));
}

static inline uint32_t RobotAssuredAck_get_remVersion(RobotAssuredAckPayload *raap){
    return ((raap->payload[1] & 0b11110000) >> 4);
}

static inline uint32_t RobotAssuredAck_get_id(RobotAssuredAckPayload *raap){
    return ((raap->payload[1] & 0b00001111));
}

static inline uint32_t RobotAssuredAck_get_sequenceNumber(RobotAssuredAckPayload *raap){
    return ((raap->payload[2]));
}

// ================================ SETTERS ================================
static inline void RobotAssuredAck_set_header(RobotAssuredAckPayload *raap, uint32_t header){
    raap->payload[0] = header;
}

static inline void RobotAssuredAck_set_remVersion(RobotAssuredAckPayload *raap, uint32_t remVersion){
    raap->payload[1] = ((remVersion << 4) & 0b11110000) | (raap->payload[1] & 0b00001111);
}

static inline void RobotAssuredAck_set_id(RobotAssuredAckPayload *raap, uint32_t id){
    raap->payload[1] = (id & 0b00001111) | (raap->payload[1] & 0b11110000);
}

static inline void RobotAssuredAck_set_sequenceNumber(RobotAssuredAckPayload *raap, uint32_t sequenceNumber){
    raap->payload[2] = sequenceNumber;
}

// ================================ ENCODE ================================
static inline void encodeRobotAssuredAck(RobotAssuredAckPayload *raap, RobotAssuredAck *raa){
    RobotAssuredAck_set_header              (raap, raa->header);
    RobotAssuredAck_set_remVersion          (raap, raa->remVersion);
    RobotAssuredAck_set_id                  (raap, raa->id);
    RobotAssuredAck_set_sequenceNumber      (raap, raa->sequenceNumber);
}

// ================================ DECODE ================================
static inline void decodeRobotAssuredAck(RobotAssuredAck *raa, RobotAssuredAckPayload *raap){
    raa->header          = RobotAssuredAck_get_header(raap);
    raa->remVersion      = RobotAssuredAck_get_remVersion(raap);
    raa->id              = RobotAssuredAck_get_id(raap);
    raa->sequenceNumber  = RobotAssuredAck_get_sequenceNumber(raap);
}

#endif /*__ROBOT_ASSURED_ACK_H*/
