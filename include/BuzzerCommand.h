// AUTOGENERATED. Run generator/main.py to regenerate
// Generated on June 05 2021, 00:35:16

#ifndef __BUZZER_COMMAND_H
#define __BUZZER_COMMAND_H

#include <stdbool.h>
#include <stdint.h>
#include "BaseTypes.h"

typedef struct _BuzzerCommandPayload {
	uint8_t payload[PACKET_SIZE_BUZZER_COMMAND];
} BuzzerCommandPayload;



/** ================================ PACKET ================================ 
[---0--] [---1--] [---2--] [---3--] [---4--] [---5--] [---6--]
11111111 -------- -------- -------- -------- -------- -------- header
-------- 11111111 11111111 -------- -------- -------- -------- period
-------- -------- -------- 11111111 11111111 11111111 11111111 duration
*/



/** ================================ STRUCT ================================ */
typedef struct _BuzzerCommand {
    uint8_t    header;                  // Header byte indicating the type of packet
    uint16_t   period;                  // Sound that the buzzer makes.
    float      duration;                // Duration of the sound
} BuzzerCommand;



/** ================================ GETTERS ================================ */
static inline uint8_t BuzzerCommand_get_header(BuzzerCommandPayload *bcp){
    return ((bcp->payload[0]));
}
static inline uint16_t BuzzerCommand_get_period(BuzzerCommandPayload *bcp){
    return ((bcp->payload[1]) << 8) | ((bcp->payload[2]));
}
static inline float BuzzerCommand_get_duration(BuzzerCommandPayload *bcp){
    uint32_t duration = ((bcp->payload[3]) << 24) | ((bcp->payload[4]) << 16) | ((bcp->payload[5]) << 8) | ((bcp->payload[6]));
    return (duration * 0.0000000023283064) + 0.0000000000000000;
}



/** ================================ SETTERS ================================ */
static inline void BuzzerCommand_set_header(BuzzerCommandPayload *bcp, uint8_t header){
    bcp->payload[0] = header;
}
static inline void BuzzerCommand_set_period(BuzzerCommandPayload *bcp, uint16_t period){
    bcp->payload[1] = (period >> 8);
    bcp->payload[2] = period;
}
static inline void BuzzerCommand_set_duration(BuzzerCommandPayload *bcp, float _duration){
    uint32_t duration = (_duration - 0.0000000000000000) * 429496729.6000000238418579;
    bcp->payload[3] = (duration >> 24);
    bcp->payload[4] = (duration >> 16);
    bcp->payload[5] = (duration >> 8);
    bcp->payload[6] = duration;
}



/** ================================ DECODE ================================ */
static inline void decodeBuzzerCommand(BuzzerCommand *bc, BuzzerCommandPayload *bcp){
	bc->header              = BuzzerCommand_get_header(bcp);
	bc->period              = BuzzerCommand_get_period(bcp);
	bc->duration            = BuzzerCommand_get_duration(bcp);
}



/** ================================ ENCODE ================================ */
static inline void encodeBuzzerCommand(BuzzerCommandPayload *bcp, BuzzerCommand *bc){
	BuzzerCommand_set_header              (bcp, bc->header);
	BuzzerCommand_set_period              (bcp, bc->period);
	BuzzerCommand_set_duration            (bcp, bc->duration);
}

#endif /*__BUZZER_COMMAND_H*/
