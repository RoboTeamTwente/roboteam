// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotCommands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RobotCommands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RobotCommands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RobotCommands_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RobotCommands_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RobotCommands_2eproto;
namespace proto {
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class RobotCommand;
struct RobotCommandDefaultTypeInternal;
extern RobotCommandDefaultTypeInternal _RobotCommand_default_instance_;
class RobotCommands;
struct RobotCommandsDefaultTypeInternal;
extern RobotCommandsDefaultTypeInternal _RobotCommands_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::Position* Arena::CreateMaybeMessage<::proto::Position>(Arena*);
template<> ::proto::RobotCommand* Arena::CreateMaybeMessage<::proto::RobotCommand>(Arena*);
template<> ::proto::RobotCommands* Arena::CreateMaybeMessage<::proto::RobotCommands>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

enum RobotCommand_KickType : int {
  RobotCommand_KickType_NO_KICK = 0,
  RobotCommand_KickType_KICK = 1,
  RobotCommand_KickType_CHIP = 2,
  RobotCommand_KickType_RobotCommand_KickType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RobotCommand_KickType_RobotCommand_KickType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RobotCommand_KickType_IsValid(int value);
constexpr RobotCommand_KickType RobotCommand_KickType_KickType_MIN = RobotCommand_KickType_NO_KICK;
constexpr RobotCommand_KickType RobotCommand_KickType_KickType_MAX = RobotCommand_KickType_CHIP;
constexpr int RobotCommand_KickType_KickType_ARRAYSIZE = RobotCommand_KickType_KickType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotCommand_KickType_descriptor();
template<typename T>
inline const std::string& RobotCommand_KickType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RobotCommand_KickType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RobotCommand_KickType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RobotCommand_KickType_descriptor(), enum_t_value);
}
inline bool RobotCommand_KickType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RobotCommand_KickType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RobotCommand_KickType>(
    RobotCommand_KickType_descriptor(), name, value);
}
// ===================================================================

class Position final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  explicit PROTOBUF_CONSTEXPR Position(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RobotCommands_2eproto;
};
// -------------------------------------------------------------------

class RobotCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RobotCommand) */ {
 public:
  inline RobotCommand() : RobotCommand(nullptr) {}
  ~RobotCommand() override;
  explicit PROTOBUF_CONSTEXPR RobotCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotCommand(const RobotCommand& from);
  RobotCommand(RobotCommand&& from) noexcept
    : RobotCommand() {
    *this = ::std::move(from);
  }

  inline RobotCommand& operator=(const RobotCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotCommand& operator=(RobotCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotCommand* internal_default_instance() {
    return reinterpret_cast<const RobotCommand*>(
               &_RobotCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RobotCommand& a, RobotCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RobotCommand& from) {
    RobotCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RobotCommand";
  }
  protected:
  explicit RobotCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RobotCommand_KickType KickType;
  static constexpr KickType NO_KICK =
    RobotCommand_KickType_NO_KICK;
  static constexpr KickType KICK =
    RobotCommand_KickType_KICK;
  static constexpr KickType CHIP =
    RobotCommand_KickType_CHIP;
  static inline bool KickType_IsValid(int value) {
    return RobotCommand_KickType_IsValid(value);
  }
  static constexpr KickType KickType_MIN =
    RobotCommand_KickType_KickType_MIN;
  static constexpr KickType KickType_MAX =
    RobotCommand_KickType_KickType_MAX;
  static constexpr int KickType_ARRAYSIZE =
    RobotCommand_KickType_KickType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KickType_descriptor() {
    return RobotCommand_KickType_descriptor();
  }
  template<typename T>
  static inline const std::string& KickType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KickType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KickType_Name.");
    return RobotCommand_KickType_Name(enum_t_value);
  }
  static inline bool KickType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      KickType* value) {
    return RobotCommand_KickType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kYawFieldNumber = 4,
    kAngularVelocityFieldNumber = 5,
    kCameraYawOfRobotFieldNumber = 7,
    kIdFieldNumber = 1,
    kUseAngularVelocityFieldNumber = 6,
    kCameraYawOfRobotIsSetFieldNumber = 8,
    kWaitForBallFieldNumber = 10,
    kKickAtYawFieldNumber = 11,
    kKickSpeedFieldNumber = 9,
    kKickTypeFieldNumber = 12,
    kDribblerOnFieldNumber = 13,
    kWheelsOffFieldNumber = 14,
    kAccelerationXFieldNumber = 15,
    kAccelerationYFieldNumber = 16,
  };
  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double yaw = 4;
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // double angular_velocity = 5;
  void clear_angular_velocity();
  double angular_velocity() const;
  void set_angular_velocity(double value);
  private:
  double _internal_angular_velocity() const;
  void _internal_set_angular_velocity(double value);
  public:

  // double camera_yaw_of_robot = 7;
  void clear_camera_yaw_of_robot();
  double camera_yaw_of_robot() const;
  void set_camera_yaw_of_robot(double value);
  private:
  double _internal_camera_yaw_of_robot() const;
  void _internal_set_camera_yaw_of_robot(double value);
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // bool use_angular_velocity = 6;
  void clear_use_angular_velocity();
  bool use_angular_velocity() const;
  void set_use_angular_velocity(bool value);
  private:
  bool _internal_use_angular_velocity() const;
  void _internal_set_use_angular_velocity(bool value);
  public:

  // bool camera_yaw_of_robot_is_set = 8;
  void clear_camera_yaw_of_robot_is_set();
  bool camera_yaw_of_robot_is_set() const;
  void set_camera_yaw_of_robot_is_set(bool value);
  private:
  bool _internal_camera_yaw_of_robot_is_set() const;
  void _internal_set_camera_yaw_of_robot_is_set(bool value);
  public:

  // bool wait_for_ball = 10;
  void clear_wait_for_ball();
  bool wait_for_ball() const;
  void set_wait_for_ball(bool value);
  private:
  bool _internal_wait_for_ball() const;
  void _internal_set_wait_for_ball(bool value);
  public:

  // bool kick_at_yaw = 11;
  void clear_kick_at_yaw();
  bool kick_at_yaw() const;
  void set_kick_at_yaw(bool value);
  private:
  bool _internal_kick_at_yaw() const;
  void _internal_set_kick_at_yaw(bool value);
  public:

  // double kick_speed = 9;
  void clear_kick_speed();
  double kick_speed() const;
  void set_kick_speed(double value);
  private:
  double _internal_kick_speed() const;
  void _internal_set_kick_speed(double value);
  public:

  // .proto.RobotCommand.KickType kick_type = 12;
  void clear_kick_type();
  ::proto::RobotCommand_KickType kick_type() const;
  void set_kick_type(::proto::RobotCommand_KickType value);
  private:
  ::proto::RobotCommand_KickType _internal_kick_type() const;
  void _internal_set_kick_type(::proto::RobotCommand_KickType value);
  public:

  // bool dribbler_on = 13;
  void clear_dribbler_on();
  bool dribbler_on() const;
  void set_dribbler_on(bool value);
  private:
  bool _internal_dribbler_on() const;
  void _internal_set_dribbler_on(bool value);
  public:

  // bool wheels_off = 14;
  void clear_wheels_off();
  bool wheels_off() const;
  void set_wheels_off(bool value);
  private:
  bool _internal_wheels_off() const;
  void _internal_set_wheels_off(bool value);
  public:

  // double acceleration_x = 15;
  void clear_acceleration_x();
  double acceleration_x() const;
  void set_acceleration_x(double value);
  private:
  double _internal_acceleration_x() const;
  void _internal_set_acceleration_x(double value);
  public:

  // double acceleration_y = 16;
  void clear_acceleration_y();
  double acceleration_y() const;
  void set_acceleration_y(double value);
  private:
  double _internal_acceleration_y() const;
  void _internal_set_acceleration_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:proto.RobotCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    double yaw_;
    double angular_velocity_;
    double camera_yaw_of_robot_;
    int32_t id_;
    bool use_angular_velocity_;
    bool camera_yaw_of_robot_is_set_;
    bool wait_for_ball_;
    bool kick_at_yaw_;
    double kick_speed_;
    int kick_type_;
    bool dribbler_on_;
    bool wheels_off_;
    double acceleration_x_;
    double acceleration_y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RobotCommands_2eproto;
};
// -------------------------------------------------------------------

class RobotCommands final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RobotCommands) */ {
 public:
  inline RobotCommands() : RobotCommands(nullptr) {}
  ~RobotCommands() override;
  explicit PROTOBUF_CONSTEXPR RobotCommands(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RobotCommands(const RobotCommands& from);
  RobotCommands(RobotCommands&& from) noexcept
    : RobotCommands() {
    *this = ::std::move(from);
  }

  inline RobotCommands& operator=(const RobotCommands& from) {
    CopyFrom(from);
    return *this;
  }
  inline RobotCommands& operator=(RobotCommands&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RobotCommands& default_instance() {
    return *internal_default_instance();
  }
  static inline const RobotCommands* internal_default_instance() {
    return reinterpret_cast<const RobotCommands*>(
               &_RobotCommands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RobotCommands& a, RobotCommands& b) {
    a.Swap(&b);
  }
  inline void Swap(RobotCommands* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RobotCommands* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RobotCommands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RobotCommands>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RobotCommands& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RobotCommands& from) {
    RobotCommands::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotCommands* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RobotCommands";
  }
  protected:
  explicit RobotCommands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotCommandsFieldNumber = 1,
  };
  // repeated .proto.RobotCommand robot_commands = 1;
  int robot_commands_size() const;
  private:
  int _internal_robot_commands_size() const;
  public:
  void clear_robot_commands();
  ::proto::RobotCommand* mutable_robot_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RobotCommand >*
      mutable_robot_commands();
  private:
  const ::proto::RobotCommand& _internal_robot_commands(int index) const;
  ::proto::RobotCommand* _internal_add_robot_commands();
  public:
  const ::proto::RobotCommand& robot_commands(int index) const;
  ::proto::RobotCommand* add_robot_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RobotCommand >&
      robot_commands() const;

  // @@protoc_insertion_point(class_scope:proto.RobotCommands)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RobotCommand > robot_commands_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_RobotCommands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// double x = 1;
inline void Position::clear_x() {
  _impl_.x_ = 0;
}
inline double Position::_internal_x() const {
  return _impl_.x_;
}
inline double Position::x() const {
  // @@protoc_insertion_point(field_get:proto.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Position::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.Position.x)
}

// double y = 2;
inline void Position::clear_y() {
  _impl_.y_ = 0;
}
inline double Position::_internal_y() const {
  return _impl_.y_;
}
inline double Position::y() const {
  // @@protoc_insertion_point(field_get:proto.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Position::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.Position.y)
}

// -------------------------------------------------------------------

// RobotCommand

// int32 id = 1;
inline void RobotCommand::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t RobotCommand::_internal_id() const {
  return _impl_.id_;
}
inline int32_t RobotCommand::id() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.id)
  return _internal_id();
}
inline void RobotCommand::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void RobotCommand::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.id)
}

// double x = 2;
inline void RobotCommand::clear_x() {
  _impl_.x_ = 0;
}
inline double RobotCommand::_internal_x() const {
  return _impl_.x_;
}
inline double RobotCommand::x() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.x)
  return _internal_x();
}
inline void RobotCommand::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void RobotCommand::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.x)
}

// double y = 3;
inline void RobotCommand::clear_y() {
  _impl_.y_ = 0;
}
inline double RobotCommand::_internal_y() const {
  return _impl_.y_;
}
inline double RobotCommand::y() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.y)
  return _internal_y();
}
inline void RobotCommand::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void RobotCommand::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.y)
}

// double yaw = 4;
inline void RobotCommand::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline double RobotCommand::_internal_yaw() const {
  return _impl_.yaw_;
}
inline double RobotCommand::yaw() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.yaw)
  return _internal_yaw();
}
inline void RobotCommand::_internal_set_yaw(double value) {
  
  _impl_.yaw_ = value;
}
inline void RobotCommand::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.yaw)
}

// double angular_velocity = 5;
inline void RobotCommand::clear_angular_velocity() {
  _impl_.angular_velocity_ = 0;
}
inline double RobotCommand::_internal_angular_velocity() const {
  return _impl_.angular_velocity_;
}
inline double RobotCommand::angular_velocity() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.angular_velocity)
  return _internal_angular_velocity();
}
inline void RobotCommand::_internal_set_angular_velocity(double value) {
  
  _impl_.angular_velocity_ = value;
}
inline void RobotCommand::set_angular_velocity(double value) {
  _internal_set_angular_velocity(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.angular_velocity)
}

// bool use_angular_velocity = 6;
inline void RobotCommand::clear_use_angular_velocity() {
  _impl_.use_angular_velocity_ = false;
}
inline bool RobotCommand::_internal_use_angular_velocity() const {
  return _impl_.use_angular_velocity_;
}
inline bool RobotCommand::use_angular_velocity() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.use_angular_velocity)
  return _internal_use_angular_velocity();
}
inline void RobotCommand::_internal_set_use_angular_velocity(bool value) {
  
  _impl_.use_angular_velocity_ = value;
}
inline void RobotCommand::set_use_angular_velocity(bool value) {
  _internal_set_use_angular_velocity(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.use_angular_velocity)
}

// double camera_yaw_of_robot = 7;
inline void RobotCommand::clear_camera_yaw_of_robot() {
  _impl_.camera_yaw_of_robot_ = 0;
}
inline double RobotCommand::_internal_camera_yaw_of_robot() const {
  return _impl_.camera_yaw_of_robot_;
}
inline double RobotCommand::camera_yaw_of_robot() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.camera_yaw_of_robot)
  return _internal_camera_yaw_of_robot();
}
inline void RobotCommand::_internal_set_camera_yaw_of_robot(double value) {
  
  _impl_.camera_yaw_of_robot_ = value;
}
inline void RobotCommand::set_camera_yaw_of_robot(double value) {
  _internal_set_camera_yaw_of_robot(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.camera_yaw_of_robot)
}

// bool camera_yaw_of_robot_is_set = 8;
inline void RobotCommand::clear_camera_yaw_of_robot_is_set() {
  _impl_.camera_yaw_of_robot_is_set_ = false;
}
inline bool RobotCommand::_internal_camera_yaw_of_robot_is_set() const {
  return _impl_.camera_yaw_of_robot_is_set_;
}
inline bool RobotCommand::camera_yaw_of_robot_is_set() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.camera_yaw_of_robot_is_set)
  return _internal_camera_yaw_of_robot_is_set();
}
inline void RobotCommand::_internal_set_camera_yaw_of_robot_is_set(bool value) {
  
  _impl_.camera_yaw_of_robot_is_set_ = value;
}
inline void RobotCommand::set_camera_yaw_of_robot_is_set(bool value) {
  _internal_set_camera_yaw_of_robot_is_set(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.camera_yaw_of_robot_is_set)
}

// double kick_speed = 9;
inline void RobotCommand::clear_kick_speed() {
  _impl_.kick_speed_ = 0;
}
inline double RobotCommand::_internal_kick_speed() const {
  return _impl_.kick_speed_;
}
inline double RobotCommand::kick_speed() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.kick_speed)
  return _internal_kick_speed();
}
inline void RobotCommand::_internal_set_kick_speed(double value) {
  
  _impl_.kick_speed_ = value;
}
inline void RobotCommand::set_kick_speed(double value) {
  _internal_set_kick_speed(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.kick_speed)
}

// bool wait_for_ball = 10;
inline void RobotCommand::clear_wait_for_ball() {
  _impl_.wait_for_ball_ = false;
}
inline bool RobotCommand::_internal_wait_for_ball() const {
  return _impl_.wait_for_ball_;
}
inline bool RobotCommand::wait_for_ball() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.wait_for_ball)
  return _internal_wait_for_ball();
}
inline void RobotCommand::_internal_set_wait_for_ball(bool value) {
  
  _impl_.wait_for_ball_ = value;
}
inline void RobotCommand::set_wait_for_ball(bool value) {
  _internal_set_wait_for_ball(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.wait_for_ball)
}

// bool kick_at_yaw = 11;
inline void RobotCommand::clear_kick_at_yaw() {
  _impl_.kick_at_yaw_ = false;
}
inline bool RobotCommand::_internal_kick_at_yaw() const {
  return _impl_.kick_at_yaw_;
}
inline bool RobotCommand::kick_at_yaw() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.kick_at_yaw)
  return _internal_kick_at_yaw();
}
inline void RobotCommand::_internal_set_kick_at_yaw(bool value) {
  
  _impl_.kick_at_yaw_ = value;
}
inline void RobotCommand::set_kick_at_yaw(bool value) {
  _internal_set_kick_at_yaw(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.kick_at_yaw)
}

// .proto.RobotCommand.KickType kick_type = 12;
inline void RobotCommand::clear_kick_type() {
  _impl_.kick_type_ = 0;
}
inline ::proto::RobotCommand_KickType RobotCommand::_internal_kick_type() const {
  return static_cast< ::proto::RobotCommand_KickType >(_impl_.kick_type_);
}
inline ::proto::RobotCommand_KickType RobotCommand::kick_type() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.kick_type)
  return _internal_kick_type();
}
inline void RobotCommand::_internal_set_kick_type(::proto::RobotCommand_KickType value) {
  
  _impl_.kick_type_ = value;
}
inline void RobotCommand::set_kick_type(::proto::RobotCommand_KickType value) {
  _internal_set_kick_type(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.kick_type)
}

// bool dribbler_on = 13;
inline void RobotCommand::clear_dribbler_on() {
  _impl_.dribbler_on_ = false;
}
inline bool RobotCommand::_internal_dribbler_on() const {
  return _impl_.dribbler_on_;
}
inline bool RobotCommand::dribbler_on() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.dribbler_on)
  return _internal_dribbler_on();
}
inline void RobotCommand::_internal_set_dribbler_on(bool value) {
  
  _impl_.dribbler_on_ = value;
}
inline void RobotCommand::set_dribbler_on(bool value) {
  _internal_set_dribbler_on(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.dribbler_on)
}

// bool wheels_off = 14;
inline void RobotCommand::clear_wheels_off() {
  _impl_.wheels_off_ = false;
}
inline bool RobotCommand::_internal_wheels_off() const {
  return _impl_.wheels_off_;
}
inline bool RobotCommand::wheels_off() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.wheels_off)
  return _internal_wheels_off();
}
inline void RobotCommand::_internal_set_wheels_off(bool value) {
  
  _impl_.wheels_off_ = value;
}
inline void RobotCommand::set_wheels_off(bool value) {
  _internal_set_wheels_off(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.wheels_off)
}

// double acceleration_x = 15;
inline void RobotCommand::clear_acceleration_x() {
  _impl_.acceleration_x_ = 0;
}
inline double RobotCommand::_internal_acceleration_x() const {
  return _impl_.acceleration_x_;
}
inline double RobotCommand::acceleration_x() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.acceleration_x)
  return _internal_acceleration_x();
}
inline void RobotCommand::_internal_set_acceleration_x(double value) {
  
  _impl_.acceleration_x_ = value;
}
inline void RobotCommand::set_acceleration_x(double value) {
  _internal_set_acceleration_x(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.acceleration_x)
}

// double acceleration_y = 16;
inline void RobotCommand::clear_acceleration_y() {
  _impl_.acceleration_y_ = 0;
}
inline double RobotCommand::_internal_acceleration_y() const {
  return _impl_.acceleration_y_;
}
inline double RobotCommand::acceleration_y() const {
  // @@protoc_insertion_point(field_get:proto.RobotCommand.acceleration_y)
  return _internal_acceleration_y();
}
inline void RobotCommand::_internal_set_acceleration_y(double value) {
  
  _impl_.acceleration_y_ = value;
}
inline void RobotCommand::set_acceleration_y(double value) {
  _internal_set_acceleration_y(value);
  // @@protoc_insertion_point(field_set:proto.RobotCommand.acceleration_y)
}

// -------------------------------------------------------------------

// RobotCommands

// repeated .proto.RobotCommand robot_commands = 1;
inline int RobotCommands::_internal_robot_commands_size() const {
  return _impl_.robot_commands_.size();
}
inline int RobotCommands::robot_commands_size() const {
  return _internal_robot_commands_size();
}
inline void RobotCommands::clear_robot_commands() {
  _impl_.robot_commands_.Clear();
}
inline ::proto::RobotCommand* RobotCommands::mutable_robot_commands(int index) {
  // @@protoc_insertion_point(field_mutable:proto.RobotCommands.robot_commands)
  return _impl_.robot_commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RobotCommand >*
RobotCommands::mutable_robot_commands() {
  // @@protoc_insertion_point(field_mutable_list:proto.RobotCommands.robot_commands)
  return &_impl_.robot_commands_;
}
inline const ::proto::RobotCommand& RobotCommands::_internal_robot_commands(int index) const {
  return _impl_.robot_commands_.Get(index);
}
inline const ::proto::RobotCommand& RobotCommands::robot_commands(int index) const {
  // @@protoc_insertion_point(field_get:proto.RobotCommands.robot_commands)
  return _internal_robot_commands(index);
}
inline ::proto::RobotCommand* RobotCommands::_internal_add_robot_commands() {
  return _impl_.robot_commands_.Add();
}
inline ::proto::RobotCommand* RobotCommands::add_robot_commands() {
  ::proto::RobotCommand* _add = _internal_add_robot_commands();
  // @@protoc_insertion_point(field_add:proto.RobotCommands.robot_commands)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::RobotCommand >&
RobotCommands::robot_commands() const {
  // @@protoc_insertion_point(field_list:proto.RobotCommands.robot_commands)
  return _impl_.robot_commands_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::proto::RobotCommand_KickType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::RobotCommand_KickType>() {
  return ::proto::RobotCommand_KickType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RobotCommands_2eproto
