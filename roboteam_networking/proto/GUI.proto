syntax = "proto3";
import "GameSettings.proto";
import "State.proto";
import "Vector2f.proto";
import "ssl_simulation_control.proto";

package proto;

message Drawing {
    enum Method {
        LINES_CONNECTED = 0;
        DOTS = 1;
        CROSSES = 2;
        PLUSES = 3;
        CIRCLES = 4;
    }

    enum Color {
        RED = 0;
        GREEN = 1;
        BLUE = 2;
        YELLOW = 3;
        CYAN = 4;
        MAGENTA = 5;
        WHITE = 6;
        BLACK = 7;
    }

    enum Category {
        PATH_PLANNING = 0;
        DEBUG = 1;
        MARGINS = 2;
    }

    uint32 retain_for_ticks = 1;
    string label = 2;
    Color color = 3;
    Method method = 4;
    repeated Vector2f points = 5;
    Category category = 6;
    uint32 for_robot_id = 7; // -1 means the drawing is for not for a specific robot
    uint32 size = 8;
    uint32 thickness = 9;
}

message Metric {
    message BoundedValue {
        double value = 1;
        double min = 2;
        double max = 3;
        string unit = 4;
    }

    message Decimal {
        double value = 1;
        double min_recorded = 2; // If set they will be computed on the fly in the UI
        double max_recorded = 3; // If set they will be computed on the fly in the UI
        string unit = 4;
    }

    string label = 1;
    oneof value {
        BoundedValue bounded_value = 2;
        Decimal decimal = 3;
    }
}

message STPStatus {
    message STPRobot {
        enum Status {
            WAITING = 0;
            SUCCESSFUL = 1;
            FAILURE = 2;
            RUNNING = 3;
        };

        message Role {
            string name = 1;
            Status status = 2;
        };

        message Tactic {
            string name = 1;
            Status status = 2;
        };

        message Skill {
            string name = 1;
            Status status = 2;
        };

        uint32 id = 1;
        Role role = 2;
        Tactic tactic = 3;
        Skill skill = 4;
    }

    message ScoredPlay {
        string play_name = 1;
        uint32 play_score = 2;
    }

    PlayInfo current_play = 2;
    uint32 score = 3;
    map<int32, STPRobot> robots = 4;
    repeated ScoredPlay scored_plays = 5;
    int32 current_tick = 6;
    double tick_duration = 7;
    double average_tick_duration = 8;
}

message RuntimeConfig {
    bool use_referee = 1;
    bool ignore_invariants = 2;
}

message AIState {
    bool is_paused = 1;
    repeated string plays = 2;
    repeated string rule_sets = 3;
    GameSettings game_settings = 5;
    RuntimeConfig runtime_config = 6;
}

message PlayInfo {
    string play_name = 1;
    string ruleset_name = 2;
    int32 keeper_id = 3;
}

message MsgToInterface {
    message VisualizationBuffer {
        repeated Drawing drawings = 1;
        repeated Metric metrics = 2;
    }

    oneof kind {
        STPStatus stp_status = 1;
        AIState ai_state = 2;
        State state = 3;
        VisualizationBuffer visualizations = 4;

    }
}

message MsgFromInterface {
    oneof kind {
        PlayInfo set_play = 1;
        GameSettings set_game_settings = 2;
        RuntimeConfig set_runtime_config = 3;

        bool pause_ai = 4; // true == stop, false == resume
        Vector2f set_ball_pos = 5;

        SimulatorCommand simulator_command = 6;
    }
}