// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ]
11111111 -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- remVersion
-------- ----1111 -------- -------- -------- id
-------- -------- 1------- -------- -------- play
-------- -------- -1------ -------- -------- pause
-------- -------- --1----- -------- -------- stop
-------- -------- ---1---- -------- -------- previousSong
-------- -------- ----1--- -------- -------- nextSong
-------- -------- -----111 11------ -------- volume
-------- -------- -------- --1----- -------- volumeUp
-------- -------- -------- ---1---- -------- volumeDown
-------- -------- -------- ----1111 -------- folderId
-------- -------- -------- -------- 11111111 songId
*/

#ifndef __REM_ROBOT_MUSIC_COMMAND_H
#define __REM_ROBOT_MUSIC_COMMAND_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_RobotMusicCommandPayload {
    uint8_t payload[PACKET_SIZE_REM_ROBOT_MUSIC_COMMAND];
} REM_RobotMusicCommandPayload;

typedef struct _REM_RobotMusicCommand {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   id                  ; // integer [0, 15]              Id of the robot
    bool       play                ; // integer [0, 1]               Set to play the current song
    bool       pause               ; // integer [0, 1]               Set to pause the current song
    bool       stop                ; // integer [0, 1]               Set to stop the current song
    bool       previousSong        ; // integer [0, 1]               Set to stop the current song
    bool       nextSong            ; // integer [0, 1]               Set to stop the current song
    uint32_t   volume              ; // integer [0, 31]              Set the volume. Value between 1 and 31. 0 is ignored
    bool       volumeUp            ; // integer [0, 1]               Set to increase the volume
    bool       volumeDown          ; // integer [0, 1]               Set to decrease the volume
    uint32_t   folderId            ; // integer [0, 15]              The id of the folder, from which to pick a song
    uint32_t   songId              ; // integer [0, 255]             Id of the song, given the folder
} REM_RobotMusicCommand;

// ================================ GETTERS ================================
static inline uint32_t REM_RobotMusicCommand_get_header(REM_RobotMusicCommandPayload *remrmcp){
    return ((remrmcp->payload[0]));
}

static inline uint32_t REM_RobotMusicCommand_get_remVersion(REM_RobotMusicCommandPayload *remrmcp){
    return ((remrmcp->payload[1] & 0b11110000) >> 4);
}

static inline uint32_t REM_RobotMusicCommand_get_id(REM_RobotMusicCommandPayload *remrmcp){
    return ((remrmcp->payload[1] & 0b00001111));
}

static inline bool REM_RobotMusicCommand_get_play(REM_RobotMusicCommandPayload *remrmcp){
    return (remrmcp->payload[2] & 0b10000000) > 0;
}

static inline bool REM_RobotMusicCommand_get_pause(REM_RobotMusicCommandPayload *remrmcp){
    return (remrmcp->payload[2] & 0b01000000) > 0;
}

static inline bool REM_RobotMusicCommand_get_stop(REM_RobotMusicCommandPayload *remrmcp){
    return (remrmcp->payload[2] & 0b00100000) > 0;
}

static inline bool REM_RobotMusicCommand_get_previousSong(REM_RobotMusicCommandPayload *remrmcp){
    return (remrmcp->payload[2] & 0b00010000) > 0;
}

static inline bool REM_RobotMusicCommand_get_nextSong(REM_RobotMusicCommandPayload *remrmcp){
    return (remrmcp->payload[2] & 0b00001000) > 0;
}

static inline uint32_t REM_RobotMusicCommand_get_volume(REM_RobotMusicCommandPayload *remrmcp){
    return ((remrmcp->payload[2] & 0b00000111) << 2) | ((remrmcp->payload[3] & 0b11000000) >> 6);
}

static inline bool REM_RobotMusicCommand_get_volumeUp(REM_RobotMusicCommandPayload *remrmcp){
    return (remrmcp->payload[3] & 0b00100000) > 0;
}

static inline bool REM_RobotMusicCommand_get_volumeDown(REM_RobotMusicCommandPayload *remrmcp){
    return (remrmcp->payload[3] & 0b00010000) > 0;
}

static inline uint32_t REM_RobotMusicCommand_get_folderId(REM_RobotMusicCommandPayload *remrmcp){
    return ((remrmcp->payload[3] & 0b00001111));
}

static inline uint32_t REM_RobotMusicCommand_get_songId(REM_RobotMusicCommandPayload *remrmcp){
    return ((remrmcp->payload[4]));
}

// ================================ SETTERS ================================
static inline void REM_RobotMusicCommand_set_header(REM_RobotMusicCommandPayload *remrmcp, uint32_t header){
    remrmcp->payload[0] = header;
}

static inline void REM_RobotMusicCommand_set_remVersion(REM_RobotMusicCommandPayload *remrmcp, uint32_t remVersion){
    remrmcp->payload[1] = ((remVersion << 4) & 0b11110000) | (remrmcp->payload[1] & 0b00001111);
}

static inline void REM_RobotMusicCommand_set_id(REM_RobotMusicCommandPayload *remrmcp, uint32_t id){
    remrmcp->payload[1] = (id & 0b00001111) | (remrmcp->payload[1] & 0b11110000);
}

static inline void REM_RobotMusicCommand_set_play(REM_RobotMusicCommandPayload *remrmcp, bool play){
    remrmcp->payload[2] = ((play << 7) & 0b10000000) | (remrmcp->payload[2] & 0b01111111);
}

static inline void REM_RobotMusicCommand_set_pause(REM_RobotMusicCommandPayload *remrmcp, bool pause){
    remrmcp->payload[2] = ((pause << 6) & 0b01000000) | (remrmcp->payload[2] & 0b10111111);
}

static inline void REM_RobotMusicCommand_set_stop(REM_RobotMusicCommandPayload *remrmcp, bool stop){
    remrmcp->payload[2] = ((stop << 5) & 0b00100000) | (remrmcp->payload[2] & 0b11011111);
}

static inline void REM_RobotMusicCommand_set_previousSong(REM_RobotMusicCommandPayload *remrmcp, bool previousSong){
    remrmcp->payload[2] = ((previousSong << 4) & 0b00010000) | (remrmcp->payload[2] & 0b11101111);
}

static inline void REM_RobotMusicCommand_set_nextSong(REM_RobotMusicCommandPayload *remrmcp, bool nextSong){
    remrmcp->payload[2] = ((nextSong << 3) & 0b00001000) | (remrmcp->payload[2] & 0b11110111);
}

static inline void REM_RobotMusicCommand_set_volume(REM_RobotMusicCommandPayload *remrmcp, uint32_t volume){
    remrmcp->payload[2] = ((volume >> 2) & 0b00000111) | (remrmcp->payload[2] & 0b11111000);
    remrmcp->payload[3] = ((volume << 6) & 0b11000000) | (remrmcp->payload[3] & 0b00111111);
}

static inline void REM_RobotMusicCommand_set_volumeUp(REM_RobotMusicCommandPayload *remrmcp, bool volumeUp){
    remrmcp->payload[3] = ((volumeUp << 5) & 0b00100000) | (remrmcp->payload[3] & 0b11011111);
}

static inline void REM_RobotMusicCommand_set_volumeDown(REM_RobotMusicCommandPayload *remrmcp, bool volumeDown){
    remrmcp->payload[3] = ((volumeDown << 4) & 0b00010000) | (remrmcp->payload[3] & 0b11101111);
}

static inline void REM_RobotMusicCommand_set_folderId(REM_RobotMusicCommandPayload *remrmcp, uint32_t folderId){
    remrmcp->payload[3] = (folderId & 0b00001111) | (remrmcp->payload[3] & 0b11110000);
}

static inline void REM_RobotMusicCommand_set_songId(REM_RobotMusicCommandPayload *remrmcp, uint32_t songId){
    remrmcp->payload[4] = songId;
}

// ================================ ENCODE ================================
static inline void encodeREM_RobotMusicCommand(REM_RobotMusicCommandPayload *remrmcp, REM_RobotMusicCommand *remrmc){
    REM_RobotMusicCommand_set_header              (remrmcp, remrmc->header);
    REM_RobotMusicCommand_set_remVersion          (remrmcp, remrmc->remVersion);
    REM_RobotMusicCommand_set_id                  (remrmcp, remrmc->id);
    REM_RobotMusicCommand_set_play                (remrmcp, remrmc->play);
    REM_RobotMusicCommand_set_pause               (remrmcp, remrmc->pause);
    REM_RobotMusicCommand_set_stop                (remrmcp, remrmc->stop);
    REM_RobotMusicCommand_set_previousSong        (remrmcp, remrmc->previousSong);
    REM_RobotMusicCommand_set_nextSong            (remrmcp, remrmc->nextSong);
    REM_RobotMusicCommand_set_volume              (remrmcp, remrmc->volume);
    REM_RobotMusicCommand_set_volumeUp            (remrmcp, remrmc->volumeUp);
    REM_RobotMusicCommand_set_volumeDown          (remrmcp, remrmc->volumeDown);
    REM_RobotMusicCommand_set_folderId            (remrmcp, remrmc->folderId);
    REM_RobotMusicCommand_set_songId              (remrmcp, remrmc->songId);
}

// ================================ DECODE ================================
static inline void decodeREM_RobotMusicCommand(REM_RobotMusicCommand *remrmc, REM_RobotMusicCommandPayload *remrmcp){
    remrmc->header       = REM_RobotMusicCommand_get_header(remrmcp);
    remrmc->remVersion   = REM_RobotMusicCommand_get_remVersion(remrmcp);
    remrmc->id           = REM_RobotMusicCommand_get_id(remrmcp);
    remrmc->play         = REM_RobotMusicCommand_get_play(remrmcp);
    remrmc->pause        = REM_RobotMusicCommand_get_pause(remrmcp);
    remrmc->stop         = REM_RobotMusicCommand_get_stop(remrmcp);
    remrmc->previousSong = REM_RobotMusicCommand_get_previousSong(remrmcp);
    remrmc->nextSong     = REM_RobotMusicCommand_get_nextSong(remrmcp);
    remrmc->volume       = REM_RobotMusicCommand_get_volume(remrmcp);
    remrmc->volumeUp     = REM_RobotMusicCommand_get_volumeUp(remrmcp);
    remrmc->volumeDown   = REM_RobotMusicCommand_get_volumeDown(remrmcp);
    remrmc->folderId     = REM_RobotMusicCommand_get_folderId(remrmcp);
    remrmc->songId       = REM_RobotMusicCommand_get_songId(remrmcp);
}

#endif /*__REM_ROBOT_MUSIC_COMMAND_H*/
