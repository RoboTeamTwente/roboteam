// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ]
11111111 -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- toRobotId
-------- ----1--- -------- -------- -------- toColor
-------- -----1-- -------- -------- -------- toBC
-------- ------1- -------- -------- -------- toBS
-------- -------1 -------- -------- -------- toPC
-------- -------- 1111---- -------- -------- fromRobotId
-------- -------- ----1--- -------- -------- fromColor
-------- -------- -----1-- -------- -------- reserved
-------- -------- ------1- -------- -------- fromBS
-------- -------- -------1 -------- -------- fromPC
-------- -------- -------- 1111---- -------- remVersion
-------- -------- -------- ----1111 -------- messageId
-------- -------- -------- -------- 11111111 payloadSize
*/

#ifndef __REM_ROBOT_LOG_H
#define __REM_ROBOT_LOG_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_RobotLogPayload {
    uint8_t payload[PACKET_SIZE_REM_ROBOT_LOG];
} REM_RobotLogPayload;

typedef struct _REM_RobotLog {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   toRobotId           ; // integer [0, 15]              Id of the receiving robot
    bool       toColor             ; // integer [0, 1]               Color of the receiving robot / basestation. Yellow = 0, Blue = 1
    bool       toBC                ; // integer [0, 1]               Bit indicating this packet has to be broadcasted to all robots
    bool       toBS                ; // integer [0, 1]               Bit indicating this packet is meant for the basestation
    bool       toPC                ; // integer [0, 1]               Bit indicating this packet is meant for the PC
    uint32_t   fromRobotId         ; // integer [0, 15]              Id of the transmitting robot
    bool       fromColor           ; // integer [0, 1]               Color of the transmitting robot / basestation. Yellow = 0, Blue = 1
    bool       reserved            ; // integer [0, 1]               reserved
    bool       fromBS              ; // integer [0, 1]               Bit indicating this packet is coming from the basestation
    bool       fromPC              ; // integer [0, 1]               Bit indicating this packet is coming from the PC
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   messageId           ; // integer [0, 15]              messageId. Can be used for aligning packets
    uint32_t   payloadSize         ; // integer [0, 255]             Size of the payload. At most 255 bytes including the generic_packet_header. Keep the 127 byte SX1280 limit in mind
} REM_RobotLog;

// ================================ GETTERS ================================
static inline uint32_t REM_RobotLog_get_header(REM_RobotLogPayload *remrlp){
    return ((remrlp->payload[0]));
}

static inline uint32_t REM_RobotLog_get_toRobotId(REM_RobotLogPayload *remrlp){
    return ((remrlp->payload[1] & 0b11110000) >> 4);
}

static inline bool REM_RobotLog_get_toColor(REM_RobotLogPayload *remrlp){
    return (remrlp->payload[1] & 0b00001000) > 0;
}

static inline bool REM_RobotLog_get_toBC(REM_RobotLogPayload *remrlp){
    return (remrlp->payload[1] & 0b00000100) > 0;
}

static inline bool REM_RobotLog_get_toBS(REM_RobotLogPayload *remrlp){
    return (remrlp->payload[1] & 0b00000010) > 0;
}

static inline bool REM_RobotLog_get_toPC(REM_RobotLogPayload *remrlp){
    return (remrlp->payload[1] & 0b00000001) > 0;
}

static inline uint32_t REM_RobotLog_get_fromRobotId(REM_RobotLogPayload *remrlp){
    return ((remrlp->payload[2] & 0b11110000) >> 4);
}

static inline bool REM_RobotLog_get_fromColor(REM_RobotLogPayload *remrlp){
    return (remrlp->payload[2] & 0b00001000) > 0;
}

static inline bool REM_RobotLog_get_reserved(REM_RobotLogPayload *remrlp){
    return (remrlp->payload[2] & 0b00000100) > 0;
}

static inline bool REM_RobotLog_get_fromBS(REM_RobotLogPayload *remrlp){
    return (remrlp->payload[2] & 0b00000010) > 0;
}

static inline bool REM_RobotLog_get_fromPC(REM_RobotLogPayload *remrlp){
    return (remrlp->payload[2] & 0b00000001) > 0;
}

static inline uint32_t REM_RobotLog_get_remVersion(REM_RobotLogPayload *remrlp){
    return ((remrlp->payload[3] & 0b11110000) >> 4);
}

static inline uint32_t REM_RobotLog_get_messageId(REM_RobotLogPayload *remrlp){
    return ((remrlp->payload[3] & 0b00001111));
}

static inline uint32_t REM_RobotLog_get_payloadSize(REM_RobotLogPayload *remrlp){
    return ((remrlp->payload[4]));
}

// ================================ SETTERS ================================
static inline void REM_RobotLog_set_header(REM_RobotLogPayload *remrlp, uint32_t header){
    remrlp->payload[0] = header;
}

static inline void REM_RobotLog_set_toRobotId(REM_RobotLogPayload *remrlp, uint32_t toRobotId){
    remrlp->payload[1] = ((toRobotId << 4) & 0b11110000) | (remrlp->payload[1] & 0b00001111);
}

static inline void REM_RobotLog_set_toColor(REM_RobotLogPayload *remrlp, bool toColor){
    remrlp->payload[1] = ((toColor << 3) & 0b00001000) | (remrlp->payload[1] & 0b11110111);
}

static inline void REM_RobotLog_set_toBC(REM_RobotLogPayload *remrlp, bool toBC){
    remrlp->payload[1] = ((toBC << 2) & 0b00000100) | (remrlp->payload[1] & 0b11111011);
}

static inline void REM_RobotLog_set_toBS(REM_RobotLogPayload *remrlp, bool toBS){
    remrlp->payload[1] = ((toBS << 1) & 0b00000010) | (remrlp->payload[1] & 0b11111101);
}

static inline void REM_RobotLog_set_toPC(REM_RobotLogPayload *remrlp, bool toPC){
    remrlp->payload[1] = (toPC & 0b00000001) | (remrlp->payload[1] & 0b11111110);
}

static inline void REM_RobotLog_set_fromRobotId(REM_RobotLogPayload *remrlp, uint32_t fromRobotId){
    remrlp->payload[2] = ((fromRobotId << 4) & 0b11110000) | (remrlp->payload[2] & 0b00001111);
}

static inline void REM_RobotLog_set_fromColor(REM_RobotLogPayload *remrlp, bool fromColor){
    remrlp->payload[2] = ((fromColor << 3) & 0b00001000) | (remrlp->payload[2] & 0b11110111);
}

static inline void REM_RobotLog_set_reserved(REM_RobotLogPayload *remrlp, bool reserved){
    remrlp->payload[2] = ((reserved << 2) & 0b00000100) | (remrlp->payload[2] & 0b11111011);
}

static inline void REM_RobotLog_set_fromBS(REM_RobotLogPayload *remrlp, bool fromBS){
    remrlp->payload[2] = ((fromBS << 1) & 0b00000010) | (remrlp->payload[2] & 0b11111101);
}

static inline void REM_RobotLog_set_fromPC(REM_RobotLogPayload *remrlp, bool fromPC){
    remrlp->payload[2] = (fromPC & 0b00000001) | (remrlp->payload[2] & 0b11111110);
}

static inline void REM_RobotLog_set_remVersion(REM_RobotLogPayload *remrlp, uint32_t remVersion){
    remrlp->payload[3] = ((remVersion << 4) & 0b11110000) | (remrlp->payload[3] & 0b00001111);
}

static inline void REM_RobotLog_set_messageId(REM_RobotLogPayload *remrlp, uint32_t messageId){
    remrlp->payload[3] = (messageId & 0b00001111) | (remrlp->payload[3] & 0b11110000);
}

static inline void REM_RobotLog_set_payloadSize(REM_RobotLogPayload *remrlp, uint32_t payloadSize){
    remrlp->payload[4] = payloadSize;
}

// ================================ ENCODE ================================
static inline void encodeREM_RobotLog(REM_RobotLogPayload *remrlp, REM_RobotLog *remrl){
    REM_RobotLog_set_header              (remrlp, remrl->header);
    REM_RobotLog_set_toRobotId           (remrlp, remrl->toRobotId);
    REM_RobotLog_set_toColor             (remrlp, remrl->toColor);
    REM_RobotLog_set_toBC                (remrlp, remrl->toBC);
    REM_RobotLog_set_toBS                (remrlp, remrl->toBS);
    REM_RobotLog_set_toPC                (remrlp, remrl->toPC);
    REM_RobotLog_set_fromRobotId         (remrlp, remrl->fromRobotId);
    REM_RobotLog_set_fromColor           (remrlp, remrl->fromColor);
    REM_RobotLog_set_reserved            (remrlp, remrl->reserved);
    REM_RobotLog_set_fromBS              (remrlp, remrl->fromBS);
    REM_RobotLog_set_fromPC              (remrlp, remrl->fromPC);
    REM_RobotLog_set_remVersion          (remrlp, remrl->remVersion);
    REM_RobotLog_set_messageId           (remrlp, remrl->messageId);
    REM_RobotLog_set_payloadSize         (remrlp, remrl->payloadSize);
}

// ================================ DECODE ================================
static inline void decodeREM_RobotLog(REM_RobotLog *remrl, REM_RobotLogPayload *remrlp){
    remrl->header        = REM_RobotLog_get_header(remrlp);
    remrl->toRobotId     = REM_RobotLog_get_toRobotId(remrlp);
    remrl->toColor       = REM_RobotLog_get_toColor(remrlp);
    remrl->toBC          = REM_RobotLog_get_toBC(remrlp);
    remrl->toBS          = REM_RobotLog_get_toBS(remrlp);
    remrl->toPC          = REM_RobotLog_get_toPC(remrlp);
    remrl->fromRobotId   = REM_RobotLog_get_fromRobotId(remrlp);
    remrl->fromColor     = REM_RobotLog_get_fromColor(remrlp);
    remrl->reserved      = REM_RobotLog_get_reserved(remrlp);
    remrl->fromBS        = REM_RobotLog_get_fromBS(remrlp);
    remrl->fromPC        = REM_RobotLog_get_fromPC(remrlp);
    remrl->remVersion    = REM_RobotLog_get_remVersion(remrlp);
    remrl->messageId     = REM_RobotLog_get_messageId(remrlp);
    remrl->payloadSize   = REM_RobotLog_get_payloadSize(remrlp);
}

#endif /*__REM_ROBOT_LOG_H*/
