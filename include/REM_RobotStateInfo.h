// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ] [  10  ] [  11  ] [  12  ] [  13  ] [  14  ] [  15  ] [  16  ] [  17  ] [  18  ] [  19  ] [  20  ] [  21  ] [  22  ] [  23  ] [  24  ] [  25  ] [  26  ] [  27  ] [  28  ] [  29  ] [  30  ] [  31  ] [  32  ] [  33  ] [  34  ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- remVersion
-------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- id
-------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- messageId
-------- -------- ----1111 11111111 11111111 11111111 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- xsensAcc1
-------- -------- -------- -------- -------- -------- ----1111 11111111 11111111 11111111 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- xsensAcc2
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----1111 11111111 11111111 11111111 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- xsensYaw
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----1111 11111111 11111111 11111111 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- rateOfTurn
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----1111 11111111 11111111 11111111 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- wheelSpeed1
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----1111 11111111 11111111 11111111 1111---- -------- -------- -------- -------- -------- -------- -------- -------- wheelSpeed2
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----1111 11111111 11111111 11111111 1111---- -------- -------- -------- -------- wheelSpeed3
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----1111 11111111 11111111 11111111 1111---- wheelSpeed4
*/

#ifndef __REM_ROBOT_STATE_INFO_H
#define __REM_ROBOT_STATE_INFO_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_RobotStateInfoPayload {
    uint8_t payload[PACKET_SIZE_REM_ROBOT_STATE_INFO];
} REM_RobotStateInfoPayload;

typedef struct _REM_RobotStateInfo {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   id                  ; // integer [0, 15]              Id of the robot 
    uint32_t   messageId           ; // integer [0, 15]              Id of the message
    float      xsensAcc1           ; // float   [-50000.000, 50000.000] xsensAcc1
    float      xsensAcc2           ; // float   [-50000.000, 50000.000] xsensAcc2
    float      xsensYaw            ; // float   [-50000.000, 50000.000] xsensYaw
    float      rateOfTurn          ; // float   [-50000.000, 50000.000] rateOfTurn
    float      wheelSpeed1         ; // float   [-50000.000, 50000.000] wheelSpeed1
    float      wheelSpeed2         ; // float   [-50000.000, 50000.000] wheelSpeed2
    float      wheelSpeed3         ; // float   [-50000.000, 50000.000] wheelSpeed3
    float      wheelSpeed4         ; // float   [-50000.000, 50000.000] wheelSpeed4
} REM_RobotStateInfo;

// ================================ GETTERS ================================
static inline uint32_t REM_RobotStateInfo_get_header(REM_RobotStateInfoPayload *remrsip){
    return ((remrsip->payload[0]));
}

static inline uint32_t REM_RobotStateInfo_get_remVersion(REM_RobotStateInfoPayload *remrsip){
    return ((remrsip->payload[1] & 0b11110000) >> 4);
}

static inline uint32_t REM_RobotStateInfo_get_id(REM_RobotStateInfoPayload *remrsip){
    return ((remrsip->payload[1] & 0b00001111));
}

static inline uint32_t REM_RobotStateInfo_get_messageId(REM_RobotStateInfoPayload *remrsip){
    return ((remrsip->payload[2] & 0b11110000) >> 4);
}

static inline float REM_RobotStateInfo_get_xsensAcc1(REM_RobotStateInfoPayload *remrsip){
    uint32_t _xsensAcc1 = ((remrsip->payload[2] & 0b00001111) << 28) | ((remrsip->payload[3]) << 20) | ((remrsip->payload[4]) << 12) | ((remrsip->payload[5]) << 4) | ((remrsip->payload[6] & 0b11110000) >> 4);
    return (_xsensAcc1 * 0.0000232830643708) + -50000.0000000000000000;
}

static inline float REM_RobotStateInfo_get_xsensAcc2(REM_RobotStateInfoPayload *remrsip){
    uint32_t _xsensAcc2 = ((remrsip->payload[6] & 0b00001111) << 28) | ((remrsip->payload[7]) << 20) | ((remrsip->payload[8]) << 12) | ((remrsip->payload[9]) << 4) | ((remrsip->payload[10] & 0b11110000) >> 4);
    return (_xsensAcc2 * 0.0000232830643708) + -50000.0000000000000000;
}

static inline float REM_RobotStateInfo_get_xsensYaw(REM_RobotStateInfoPayload *remrsip){
    uint32_t _xsensYaw = ((remrsip->payload[10] & 0b00001111) << 28) | ((remrsip->payload[11]) << 20) | ((remrsip->payload[12]) << 12) | ((remrsip->payload[13]) << 4) | ((remrsip->payload[14] & 0b11110000) >> 4);
    return (_xsensYaw * 0.0000232830643708) + -50000.0000000000000000;
}

static inline float REM_RobotStateInfo_get_rateOfTurn(REM_RobotStateInfoPayload *remrsip){
    uint32_t _rateOfTurn = ((remrsip->payload[14] & 0b00001111) << 28) | ((remrsip->payload[15]) << 20) | ((remrsip->payload[16]) << 12) | ((remrsip->payload[17]) << 4) | ((remrsip->payload[18] & 0b11110000) >> 4);
    return (_rateOfTurn * 0.0000232830643708) + -50000.0000000000000000;
}

static inline float REM_RobotStateInfo_get_wheelSpeed1(REM_RobotStateInfoPayload *remrsip){
    uint32_t _wheelSpeed1 = ((remrsip->payload[18] & 0b00001111) << 28) | ((remrsip->payload[19]) << 20) | ((remrsip->payload[20]) << 12) | ((remrsip->payload[21]) << 4) | ((remrsip->payload[22] & 0b11110000) >> 4);
    return (_wheelSpeed1 * 0.0000232830643708) + -50000.0000000000000000;
}

static inline float REM_RobotStateInfo_get_wheelSpeed2(REM_RobotStateInfoPayload *remrsip){
    uint32_t _wheelSpeed2 = ((remrsip->payload[22] & 0b00001111) << 28) | ((remrsip->payload[23]) << 20) | ((remrsip->payload[24]) << 12) | ((remrsip->payload[25]) << 4) | ((remrsip->payload[26] & 0b11110000) >> 4);
    return (_wheelSpeed2 * 0.0000232830643708) + -50000.0000000000000000;
}

static inline float REM_RobotStateInfo_get_wheelSpeed3(REM_RobotStateInfoPayload *remrsip){
    uint32_t _wheelSpeed3 = ((remrsip->payload[26] & 0b00001111) << 28) | ((remrsip->payload[27]) << 20) | ((remrsip->payload[28]) << 12) | ((remrsip->payload[29]) << 4) | ((remrsip->payload[30] & 0b11110000) >> 4);
    return (_wheelSpeed3 * 0.0000232830643708) + -50000.0000000000000000;
}

static inline float REM_RobotStateInfo_get_wheelSpeed4(REM_RobotStateInfoPayload *remrsip){
    uint32_t _wheelSpeed4 = ((remrsip->payload[30] & 0b00001111) << 28) | ((remrsip->payload[31]) << 20) | ((remrsip->payload[32]) << 12) | ((remrsip->payload[33]) << 4) | ((remrsip->payload[34] & 0b11110000) >> 4);
    return (_wheelSpeed4 * 0.0000232830643708) + -50000.0000000000000000;
}

// ================================ SETTERS ================================
static inline void REM_RobotStateInfo_set_header(REM_RobotStateInfoPayload *remrsip, uint32_t header){
    remrsip->payload[0] = header;
}

static inline void REM_RobotStateInfo_set_remVersion(REM_RobotStateInfoPayload *remrsip, uint32_t remVersion){
    remrsip->payload[1] = ((remVersion << 4) & 0b11110000) | (remrsip->payload[1] & 0b00001111);
}

static inline void REM_RobotStateInfo_set_id(REM_RobotStateInfoPayload *remrsip, uint32_t id){
    remrsip->payload[1] = (id & 0b00001111) | (remrsip->payload[1] & 0b11110000);
}

static inline void REM_RobotStateInfo_set_messageId(REM_RobotStateInfoPayload *remrsip, uint32_t messageId){
    remrsip->payload[2] = ((messageId << 4) & 0b11110000) | (remrsip->payload[2] & 0b00001111);
}

static inline void REM_RobotStateInfo_set_xsensAcc1(REM_RobotStateInfoPayload *remrsip, float xsensAcc1){
    uint32_t _xsensAcc1 = (uint32_t)((xsensAcc1 +50000.0000000000000000) / 0.0000232830643708);
    remrsip->payload[2] = ((_xsensAcc1 >> 28) & 0b00001111) | (remrsip->payload[2] & 0b11110000);
    remrsip->payload[3] = (_xsensAcc1 >> 20);
    remrsip->payload[4] = (_xsensAcc1 >> 12);
    remrsip->payload[5] = (_xsensAcc1 >> 4);
    remrsip->payload[6] = ((_xsensAcc1 << 4) & 0b11110000) | (remrsip->payload[6] & 0b00001111);
}

static inline void REM_RobotStateInfo_set_xsensAcc2(REM_RobotStateInfoPayload *remrsip, float xsensAcc2){
    uint32_t _xsensAcc2 = (uint32_t)((xsensAcc2 +50000.0000000000000000) / 0.0000232830643708);
    remrsip->payload[6] = ((_xsensAcc2 >> 28) & 0b00001111) | (remrsip->payload[6] & 0b11110000);
    remrsip->payload[7] = (_xsensAcc2 >> 20);
    remrsip->payload[8] = (_xsensAcc2 >> 12);
    remrsip->payload[9] = (_xsensAcc2 >> 4);
    remrsip->payload[10] = ((_xsensAcc2 << 4) & 0b11110000) | (remrsip->payload[10] & 0b00001111);
}

static inline void REM_RobotStateInfo_set_xsensYaw(REM_RobotStateInfoPayload *remrsip, float xsensYaw){
    uint32_t _xsensYaw = (uint32_t)((xsensYaw +50000.0000000000000000) / 0.0000232830643708);
    remrsip->payload[10] = ((_xsensYaw >> 28) & 0b00001111) | (remrsip->payload[10] & 0b11110000);
    remrsip->payload[11] = (_xsensYaw >> 20);
    remrsip->payload[12] = (_xsensYaw >> 12);
    remrsip->payload[13] = (_xsensYaw >> 4);
    remrsip->payload[14] = ((_xsensYaw << 4) & 0b11110000) | (remrsip->payload[14] & 0b00001111);
}

static inline void REM_RobotStateInfo_set_rateOfTurn(REM_RobotStateInfoPayload *remrsip, float rateOfTurn){
    uint32_t _rateOfTurn = (uint32_t)((rateOfTurn +50000.0000000000000000) / 0.0000232830643708);
    remrsip->payload[14] = ((_rateOfTurn >> 28) & 0b00001111) | (remrsip->payload[14] & 0b11110000);
    remrsip->payload[15] = (_rateOfTurn >> 20);
    remrsip->payload[16] = (_rateOfTurn >> 12);
    remrsip->payload[17] = (_rateOfTurn >> 4);
    remrsip->payload[18] = ((_rateOfTurn << 4) & 0b11110000) | (remrsip->payload[18] & 0b00001111);
}

static inline void REM_RobotStateInfo_set_wheelSpeed1(REM_RobotStateInfoPayload *remrsip, float wheelSpeed1){
    uint32_t _wheelSpeed1 = (uint32_t)((wheelSpeed1 +50000.0000000000000000) / 0.0000232830643708);
    remrsip->payload[18] = ((_wheelSpeed1 >> 28) & 0b00001111) | (remrsip->payload[18] & 0b11110000);
    remrsip->payload[19] = (_wheelSpeed1 >> 20);
    remrsip->payload[20] = (_wheelSpeed1 >> 12);
    remrsip->payload[21] = (_wheelSpeed1 >> 4);
    remrsip->payload[22] = ((_wheelSpeed1 << 4) & 0b11110000) | (remrsip->payload[22] & 0b00001111);
}

static inline void REM_RobotStateInfo_set_wheelSpeed2(REM_RobotStateInfoPayload *remrsip, float wheelSpeed2){
    uint32_t _wheelSpeed2 = (uint32_t)((wheelSpeed2 +50000.0000000000000000) / 0.0000232830643708);
    remrsip->payload[22] = ((_wheelSpeed2 >> 28) & 0b00001111) | (remrsip->payload[22] & 0b11110000);
    remrsip->payload[23] = (_wheelSpeed2 >> 20);
    remrsip->payload[24] = (_wheelSpeed2 >> 12);
    remrsip->payload[25] = (_wheelSpeed2 >> 4);
    remrsip->payload[26] = ((_wheelSpeed2 << 4) & 0b11110000) | (remrsip->payload[26] & 0b00001111);
}

static inline void REM_RobotStateInfo_set_wheelSpeed3(REM_RobotStateInfoPayload *remrsip, float wheelSpeed3){
    uint32_t _wheelSpeed3 = (uint32_t)((wheelSpeed3 +50000.0000000000000000) / 0.0000232830643708);
    remrsip->payload[26] = ((_wheelSpeed3 >> 28) & 0b00001111) | (remrsip->payload[26] & 0b11110000);
    remrsip->payload[27] = (_wheelSpeed3 >> 20);
    remrsip->payload[28] = (_wheelSpeed3 >> 12);
    remrsip->payload[29] = (_wheelSpeed3 >> 4);
    remrsip->payload[30] = ((_wheelSpeed3 << 4) & 0b11110000) | (remrsip->payload[30] & 0b00001111);
}

static inline void REM_RobotStateInfo_set_wheelSpeed4(REM_RobotStateInfoPayload *remrsip, float wheelSpeed4){
    uint32_t _wheelSpeed4 = (uint32_t)((wheelSpeed4 +50000.0000000000000000) / 0.0000232830643708);
    remrsip->payload[30] = ((_wheelSpeed4 >> 28) & 0b00001111) | (remrsip->payload[30] & 0b11110000);
    remrsip->payload[31] = (_wheelSpeed4 >> 20);
    remrsip->payload[32] = (_wheelSpeed4 >> 12);
    remrsip->payload[33] = (_wheelSpeed4 >> 4);
    remrsip->payload[34] = ((_wheelSpeed4 << 4) & 0b11110000) | (remrsip->payload[34] & 0b00001111);
}

// ================================ ENCODE ================================
static inline void encodeREM_RobotStateInfo(REM_RobotStateInfoPayload *remrsip, REM_RobotStateInfo *remrsi){
    REM_RobotStateInfo_set_header              (remrsip, remrsi->header);
    REM_RobotStateInfo_set_remVersion          (remrsip, remrsi->remVersion);
    REM_RobotStateInfo_set_id                  (remrsip, remrsi->id);
    REM_RobotStateInfo_set_messageId           (remrsip, remrsi->messageId);
    REM_RobotStateInfo_set_xsensAcc1           (remrsip, remrsi->xsensAcc1);
    REM_RobotStateInfo_set_xsensAcc2           (remrsip, remrsi->xsensAcc2);
    REM_RobotStateInfo_set_xsensYaw            (remrsip, remrsi->xsensYaw);
    REM_RobotStateInfo_set_rateOfTurn          (remrsip, remrsi->rateOfTurn);
    REM_RobotStateInfo_set_wheelSpeed1         (remrsip, remrsi->wheelSpeed1);
    REM_RobotStateInfo_set_wheelSpeed2         (remrsip, remrsi->wheelSpeed2);
    REM_RobotStateInfo_set_wheelSpeed3         (remrsip, remrsi->wheelSpeed3);
    REM_RobotStateInfo_set_wheelSpeed4         (remrsip, remrsi->wheelSpeed4);
}

// ================================ DECODE ================================
static inline void decodeREM_RobotStateInfo(REM_RobotStateInfo *remrsi, REM_RobotStateInfoPayload *remrsip){
    remrsi->header       = REM_RobotStateInfo_get_header(remrsip);
    remrsi->remVersion   = REM_RobotStateInfo_get_remVersion(remrsip);
    remrsi->id           = REM_RobotStateInfo_get_id(remrsip);
    remrsi->messageId    = REM_RobotStateInfo_get_messageId(remrsip);
    remrsi->xsensAcc1    = REM_RobotStateInfo_get_xsensAcc1(remrsip);
    remrsi->xsensAcc2    = REM_RobotStateInfo_get_xsensAcc2(remrsip);
    remrsi->xsensYaw     = REM_RobotStateInfo_get_xsensYaw(remrsip);
    remrsi->rateOfTurn   = REM_RobotStateInfo_get_rateOfTurn(remrsip);
    remrsi->wheelSpeed1  = REM_RobotStateInfo_get_wheelSpeed1(remrsip);
    remrsi->wheelSpeed2  = REM_RobotStateInfo_get_wheelSpeed2(remrsip);
    remrsi->wheelSpeed3  = REM_RobotStateInfo_get_wheelSpeed3(remrsip);
    remrsi->wheelSpeed4  = REM_RobotStateInfo_get_wheelSpeed4(remrsip);
}

#endif /*__REM_ROBOT_STATE_INFO_H*/
