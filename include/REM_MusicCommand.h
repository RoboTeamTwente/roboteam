// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ]
11111111 -------- -------- -------- header
-------- 1111---- -------- -------- remVersion
-------- ----1111 -------- -------- id
-------- -------- 11111--- -------- volume
-------- -------- -----1-- -------- play
-------- -------- ------11 -------- folder_id
-------- -------- -------- 11111111 song_id
*/

#ifndef __REM_MUSIC_COMMAND_H
#define __REM_MUSIC_COMMAND_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_MusicCommandPayload {
    uint8_t payload[PACKET_SIZE_REM_MUSIC_COMMAND];
} REM_MusicCommandPayload;

typedef struct _REM_MusicCommand {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   id                  ; // integer [0, 15]              Id of the robot
    uint32_t   volume              ; // integer [0, 31]              Volume of the song. 31 is loudest
    bool       play                ; // integer [0, 1]               When set, a song will be played. If not, the song will be stopped
    uint32_t   folder_id           ; // integer [0, 3]               The id of the folder, from which to pick a song
    uint32_t   song_id             ; // integer [0, 255]             Id of the song, given the folder
} REM_MusicCommand;

// ================================ GETTERS ================================
static inline uint32_t REM_MusicCommand_get_header(REM_MusicCommandPayload *remmcp){
    return ((remmcp->payload[0]));
}

static inline uint32_t REM_MusicCommand_get_remVersion(REM_MusicCommandPayload *remmcp){
    return ((remmcp->payload[1] & 0b11110000) >> 4);
}

static inline uint32_t REM_MusicCommand_get_id(REM_MusicCommandPayload *remmcp){
    return ((remmcp->payload[1] & 0b00001111));
}

static inline uint32_t REM_MusicCommand_get_volume(REM_MusicCommandPayload *remmcp){
    return ((remmcp->payload[2] & 0b11111000) >> 3);
}

static inline bool REM_MusicCommand_get_play(REM_MusicCommandPayload *remmcp){
    return (remmcp->payload[2] & 0b00000100) > 0;
}

static inline uint32_t REM_MusicCommand_get_folder_id(REM_MusicCommandPayload *remmcp){
    return ((remmcp->payload[2] & 0b00000011));
}

static inline uint32_t REM_MusicCommand_get_song_id(REM_MusicCommandPayload *remmcp){
    return ((remmcp->payload[3]));
}

// ================================ SETTERS ================================
static inline void REM_MusicCommand_set_header(REM_MusicCommandPayload *remmcp, uint32_t header){
    remmcp->payload[0] = header;
}

static inline void REM_MusicCommand_set_remVersion(REM_MusicCommandPayload *remmcp, uint32_t remVersion){
    remmcp->payload[1] = ((remVersion << 4) & 0b11110000) | (remmcp->payload[1] & 0b00001111);
}

static inline void REM_MusicCommand_set_id(REM_MusicCommandPayload *remmcp, uint32_t id){
    remmcp->payload[1] = (id & 0b00001111) | (remmcp->payload[1] & 0b11110000);
}

static inline void REM_MusicCommand_set_volume(REM_MusicCommandPayload *remmcp, uint32_t volume){
    remmcp->payload[2] = ((volume << 3) & 0b11111000) | (remmcp->payload[2] & 0b00000111);
}

static inline void REM_MusicCommand_set_play(REM_MusicCommandPayload *remmcp, bool play){
    remmcp->payload[2] = ((play << 2) & 0b00000100) | (remmcp->payload[2] & 0b11111011);
}

static inline void REM_MusicCommand_set_folder_id(REM_MusicCommandPayload *remmcp, uint32_t folder_id){
    remmcp->payload[2] = (folder_id & 0b00000011) | (remmcp->payload[2] & 0b11111100);
}

static inline void REM_MusicCommand_set_song_id(REM_MusicCommandPayload *remmcp, uint32_t song_id){
    remmcp->payload[3] = song_id;
}

// ================================ ENCODE ================================
static inline void encodeREM_MusicCommand(REM_MusicCommandPayload *remmcp, REM_MusicCommand *remmc){
    REM_MusicCommand_set_header              (remmcp, remmc->header);
    REM_MusicCommand_set_remVersion          (remmcp, remmc->remVersion);
    REM_MusicCommand_set_id                  (remmcp, remmc->id);
    REM_MusicCommand_set_volume              (remmcp, remmc->volume);
    REM_MusicCommand_set_play                (remmcp, remmc->play);
    REM_MusicCommand_set_folder_id           (remmcp, remmc->folder_id);
    REM_MusicCommand_set_song_id             (remmcp, remmc->song_id);
}

// ================================ DECODE ================================
static inline void decodeREM_MusicCommand(REM_MusicCommand *remmc, REM_MusicCommandPayload *remmcp){
    remmc->header        = REM_MusicCommand_get_header(remmcp);
    remmc->remVersion    = REM_MusicCommand_get_remVersion(remmcp);
    remmc->id            = REM_MusicCommand_get_id(remmcp);
    remmc->volume        = REM_MusicCommand_get_volume(remmcp);
    remmc->play          = REM_MusicCommand_get_play(remmcp);
    remmc->folder_id     = REM_MusicCommand_get_folder_id(remmcp);
    remmc->song_id       = REM_MusicCommand_get_song_id(remmcp);
}

#endif /*__REM_MUSIC_COMMAND_H*/
