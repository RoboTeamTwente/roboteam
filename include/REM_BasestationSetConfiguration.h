// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ]
11111111 -------- header
-------- 1111---- remVersion
-------- ----1--- channel
*/

#ifndef __REM_BASESTATION_SET_CONFIGURATION_H
#define __REM_BASESTATION_SET_CONFIGURATION_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_BasestationSetConfigurationPayload {
    uint8_t payload[PACKET_SIZE_REM_BASESTATION_SET_CONFIGURATION];
} REM_BasestationSetConfigurationPayload;

typedef struct _REM_BasestationSetConfiguration {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    bool       channel             ; // integer [0, 1]               Channel on which the basestation and robots communicate
} REM_BasestationSetConfiguration;

// ================================ GETTERS ================================
static inline uint32_t REM_BasestationSetConfiguration_get_header(REM_BasestationSetConfigurationPayload *rembscp){
    return ((rembscp->payload[0]));
}

static inline uint32_t REM_BasestationSetConfiguration_get_remVersion(REM_BasestationSetConfigurationPayload *rembscp){
    return ((rembscp->payload[1] & 0b11110000) >> 4);
}

static inline bool REM_BasestationSetConfiguration_get_channel(REM_BasestationSetConfigurationPayload *rembscp){
    return (rembscp->payload[1] & 0b00001000) > 0;
}

// ================================ SETTERS ================================
static inline void REM_BasestationSetConfiguration_set_header(REM_BasestationSetConfigurationPayload *rembscp, uint32_t header){
    rembscp->payload[0] = header;
}

static inline void REM_BasestationSetConfiguration_set_remVersion(REM_BasestationSetConfigurationPayload *rembscp, uint32_t remVersion){
    rembscp->payload[1] = ((remVersion << 4) & 0b11110000) | (rembscp->payload[1] & 0b00001111);
}

static inline void REM_BasestationSetConfiguration_set_channel(REM_BasestationSetConfigurationPayload *rembscp, bool channel){
    rembscp->payload[1] = ((channel << 3) & 0b00001000) | (rembscp->payload[1] & 0b11110111);
}

// ================================ ENCODE ================================
static inline void encodeREM_BasestationSetConfiguration(REM_BasestationSetConfigurationPayload *rembscp, REM_BasestationSetConfiguration *rembsc){
    REM_BasestationSetConfiguration_set_header              (rembscp, rembsc->header);
    REM_BasestationSetConfiguration_set_remVersion          (rembscp, rembsc->remVersion);
    REM_BasestationSetConfiguration_set_channel             (rembscp, rembsc->channel);
}

// ================================ DECODE ================================
static inline void decodeREM_BasestationSetConfiguration(REM_BasestationSetConfiguration *rembsc, REM_BasestationSetConfigurationPayload *rembscp){
    rembsc->header       = REM_BasestationSetConfiguration_get_header(rembscp);
    rembsc->remVersion   = REM_BasestationSetConfiguration_get_remVersion(rembscp);
    rembsc->channel      = REM_BasestationSetConfiguration_get_channel(rembscp);
}

#endif /*__REM_BASESTATION_SET_CONFIGURATION_H*/
