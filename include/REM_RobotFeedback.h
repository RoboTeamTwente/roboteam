// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ] [  10  ] [  11  ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- remVersion
-------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- id
-------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- messageId
-------- -------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- -------- batteryLevel
-------- -------- -------- 1------- -------- -------- -------- -------- -------- -------- -------- -------- XsensCalibrated
-------- -------- -------- -1------ -------- -------- -------- -------- -------- -------- -------- -------- ballSensorWorking
-------- -------- -------- --1----- -------- -------- -------- -------- -------- -------- -------- -------- hasBall
-------- -------- -------- ---1---- -------- -------- -------- -------- -------- -------- -------- -------- capacitorCharged
-------- -------- -------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- ballPos
-------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- rho
-------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- theta
-------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- angle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 1111---- -------- wheelLocked
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----1111 -------- wheelBraking
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 rssi
*/

#ifndef __REM_ROBOT_FEEDBACK_H
#define __REM_ROBOT_FEEDBACK_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_RobotFeedbackPayload {
    uint8_t payload[PACKET_SIZE_REM_ROBOT_FEEDBACK];
} REM_RobotFeedbackPayload;

typedef struct _REM_RobotFeedback {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   id                  ; // integer [0, 15]              Id of the robot 
    uint32_t   messageId           ; // integer [0, 15]              Id of the message
    uint32_t   batteryLevel        ; // integer [0, 15]              The voltage level of the battery
    bool       XsensCalibrated     ; // integer [0, 1]               Indicates if the XSens IMU is calibrated
    bool       ballSensorWorking   ; // integer [0, 1]               Indicates if the ballsensor is working
    bool       hasBall             ; // integer [0, 1]               Indicates if the ball is somewhere in front of the ballsensor
    bool       capacitorCharged    ; // integer [0, 1]               Indicates if the capacitor for kicking and chipping is charged
    float      ballPos             ; // float   [-0.500, 0.500]      Indicates where in front of the ballsensor the ball is
    float      rho                 ; // float   [0.000, 8.000]       The estimated magnitude of movement (m/s)
    float      theta               ; // float   [-3.142, 3.142]      The estimated direction of movement (rad)
    float      angle               ; // float   [-3.142, 3.142]      The estimated angle (rad)
    uint32_t   wheelLocked         ; // integer [0, 15]              Indicates if a wheel is locked. One bit per wheel
    uint32_t   wheelBraking        ; // integer [0, 15]              Indicates if a wheel is slipping. One bit per wheel
    uint32_t   rssi                ; // integer [0, 255]             Signal strength of the last packet received by the robot
} REM_RobotFeedback;

// ================================ GETTERS ================================
static inline uint32_t REM_RobotFeedback_get_header(REM_RobotFeedbackPayload *remrfp){
    return ((remrfp->payload[0]));
}

static inline uint32_t REM_RobotFeedback_get_remVersion(REM_RobotFeedbackPayload *remrfp){
    return ((remrfp->payload[1] & 0b11110000) >> 4);
}

static inline uint32_t REM_RobotFeedback_get_id(REM_RobotFeedbackPayload *remrfp){
    return ((remrfp->payload[1] & 0b00001111));
}

static inline uint32_t REM_RobotFeedback_get_messageId(REM_RobotFeedbackPayload *remrfp){
    return ((remrfp->payload[2] & 0b11110000) >> 4);
}

static inline uint32_t REM_RobotFeedback_get_batteryLevel(REM_RobotFeedbackPayload *remrfp){
    return ((remrfp->payload[2] & 0b00001111));
}

static inline bool REM_RobotFeedback_get_XsensCalibrated(REM_RobotFeedbackPayload *remrfp){
    return (remrfp->payload[3] & 0b10000000) > 0;
}

static inline bool REM_RobotFeedback_get_ballSensorWorking(REM_RobotFeedbackPayload *remrfp){
    return (remrfp->payload[3] & 0b01000000) > 0;
}

static inline bool REM_RobotFeedback_get_hasBall(REM_RobotFeedbackPayload *remrfp){
    return (remrfp->payload[3] & 0b00100000) > 0;
}

static inline bool REM_RobotFeedback_get_capacitorCharged(REM_RobotFeedbackPayload *remrfp){
    return (remrfp->payload[3] & 0b00010000) > 0;
}

static inline float REM_RobotFeedback_get_ballPos(REM_RobotFeedbackPayload *remrfp){
    uint32_t _ballPos = ((remrfp->payload[3] & 0b00001111));
    return (_ballPos * 0.0666666666666667) + -0.5000000000000000;
}

static inline float REM_RobotFeedback_get_rho(REM_RobotFeedbackPayload *remrfp){
    uint32_t _rho = ((remrfp->payload[4]) << 8) | ((remrfp->payload[5]));
    return (_rho * 0.0001220721751736) + 0.0000000000000000;
}

static inline float REM_RobotFeedback_get_theta(REM_RobotFeedbackPayload *remrfp){
    uint32_t _theta = ((remrfp->payload[6]) << 8) | ((remrfp->payload[7]));
    return (_theta * 0.0000958752621833) + -3.1415926535897931;
}

static inline float REM_RobotFeedback_get_angle(REM_RobotFeedbackPayload *remrfp){
    uint32_t _angle = ((remrfp->payload[8]) << 8) | ((remrfp->payload[9]));
    return (_angle * 0.0000958752621833) + -3.1415926535897931;
}

static inline uint32_t REM_RobotFeedback_get_wheelLocked(REM_RobotFeedbackPayload *remrfp){
    return ((remrfp->payload[10] & 0b11110000) >> 4);
}

static inline uint32_t REM_RobotFeedback_get_wheelBraking(REM_RobotFeedbackPayload *remrfp){
    return ((remrfp->payload[10] & 0b00001111));
}

static inline uint32_t REM_RobotFeedback_get_rssi(REM_RobotFeedbackPayload *remrfp){
    return ((remrfp->payload[11]));
}

// ================================ SETTERS ================================
static inline void REM_RobotFeedback_set_header(REM_RobotFeedbackPayload *remrfp, uint32_t header){
    remrfp->payload[0] = header;
}

static inline void REM_RobotFeedback_set_remVersion(REM_RobotFeedbackPayload *remrfp, uint32_t remVersion){
    remrfp->payload[1] = ((remVersion << 4) & 0b11110000) | (remrfp->payload[1] & 0b00001111);
}

static inline void REM_RobotFeedback_set_id(REM_RobotFeedbackPayload *remrfp, uint32_t id){
    remrfp->payload[1] = (id & 0b00001111) | (remrfp->payload[1] & 0b11110000);
}

static inline void REM_RobotFeedback_set_messageId(REM_RobotFeedbackPayload *remrfp, uint32_t messageId){
    remrfp->payload[2] = ((messageId << 4) & 0b11110000) | (remrfp->payload[2] & 0b00001111);
}

static inline void REM_RobotFeedback_set_batteryLevel(REM_RobotFeedbackPayload *remrfp, uint32_t batteryLevel){
    remrfp->payload[2] = (batteryLevel & 0b00001111) | (remrfp->payload[2] & 0b11110000);
}

static inline void REM_RobotFeedback_set_XsensCalibrated(REM_RobotFeedbackPayload *remrfp, bool XsensCalibrated){
    remrfp->payload[3] = ((XsensCalibrated << 7) & 0b10000000) | (remrfp->payload[3] & 0b01111111);
}

static inline void REM_RobotFeedback_set_ballSensorWorking(REM_RobotFeedbackPayload *remrfp, bool ballSensorWorking){
    remrfp->payload[3] = ((ballSensorWorking << 6) & 0b01000000) | (remrfp->payload[3] & 0b10111111);
}

static inline void REM_RobotFeedback_set_hasBall(REM_RobotFeedbackPayload *remrfp, bool hasBall){
    remrfp->payload[3] = ((hasBall << 5) & 0b00100000) | (remrfp->payload[3] & 0b11011111);
}

static inline void REM_RobotFeedback_set_capacitorCharged(REM_RobotFeedbackPayload *remrfp, bool capacitorCharged){
    remrfp->payload[3] = ((capacitorCharged << 4) & 0b00010000) | (remrfp->payload[3] & 0b11101111);
}

static inline void REM_RobotFeedback_set_ballPos(REM_RobotFeedbackPayload *remrfp, float ballPos){
    uint32_t _ballPos = (uint32_t)((ballPos +0.5000000000000000) / 0.0666666666666667);
    remrfp->payload[3] = (_ballPos & 0b00001111) | (remrfp->payload[3] & 0b11110000);
}

static inline void REM_RobotFeedback_set_rho(REM_RobotFeedbackPayload *remrfp, float rho){
    uint32_t _rho = (uint32_t)(rho / 0.0001220721751736);
    remrfp->payload[4] = (_rho >> 8);
    remrfp->payload[5] = _rho;
}

static inline void REM_RobotFeedback_set_theta(REM_RobotFeedbackPayload *remrfp, float theta){
    uint32_t _theta = (uint32_t)((theta +3.1415926535897931) / 0.0000958752621833);
    remrfp->payload[6] = (_theta >> 8);
    remrfp->payload[7] = _theta;
}

static inline void REM_RobotFeedback_set_angle(REM_RobotFeedbackPayload *remrfp, float angle){
    uint32_t _angle = (uint32_t)((angle +3.1415926535897931) / 0.0000958752621833);
    remrfp->payload[8] = (_angle >> 8);
    remrfp->payload[9] = _angle;
}

static inline void REM_RobotFeedback_set_wheelLocked(REM_RobotFeedbackPayload *remrfp, uint32_t wheelLocked){
    remrfp->payload[10] = ((wheelLocked << 4) & 0b11110000) | (remrfp->payload[10] & 0b00001111);
}

static inline void REM_RobotFeedback_set_wheelBraking(REM_RobotFeedbackPayload *remrfp, uint32_t wheelBraking){
    remrfp->payload[10] = (wheelBraking & 0b00001111) | (remrfp->payload[10] & 0b11110000);
}

static inline void REM_RobotFeedback_set_rssi(REM_RobotFeedbackPayload *remrfp, uint32_t rssi){
    remrfp->payload[11] = rssi;
}

// ================================ ENCODE ================================
static inline void encodeREM_RobotFeedback(REM_RobotFeedbackPayload *remrfp, REM_RobotFeedback *remrf){
    REM_RobotFeedback_set_header              (remrfp, remrf->header);
    REM_RobotFeedback_set_remVersion          (remrfp, remrf->remVersion);
    REM_RobotFeedback_set_id                  (remrfp, remrf->id);
    REM_RobotFeedback_set_messageId           (remrfp, remrf->messageId);
    REM_RobotFeedback_set_batteryLevel        (remrfp, remrf->batteryLevel);
    REM_RobotFeedback_set_XsensCalibrated     (remrfp, remrf->XsensCalibrated);
    REM_RobotFeedback_set_ballSensorWorking   (remrfp, remrf->ballSensorWorking);
    REM_RobotFeedback_set_hasBall             (remrfp, remrf->hasBall);
    REM_RobotFeedback_set_capacitorCharged    (remrfp, remrf->capacitorCharged);
    REM_RobotFeedback_set_ballPos             (remrfp, remrf->ballPos);
    REM_RobotFeedback_set_rho                 (remrfp, remrf->rho);
    REM_RobotFeedback_set_theta               (remrfp, remrf->theta);
    REM_RobotFeedback_set_angle               (remrfp, remrf->angle);
    REM_RobotFeedback_set_wheelLocked         (remrfp, remrf->wheelLocked);
    REM_RobotFeedback_set_wheelBraking        (remrfp, remrf->wheelBraking);
    REM_RobotFeedback_set_rssi                (remrfp, remrf->rssi);
}

// ================================ DECODE ================================
static inline void decodeREM_RobotFeedback(REM_RobotFeedback *remrf, REM_RobotFeedbackPayload *remrfp){
    remrf->header        = REM_RobotFeedback_get_header(remrfp);
    remrf->remVersion    = REM_RobotFeedback_get_remVersion(remrfp);
    remrf->id            = REM_RobotFeedback_get_id(remrfp);
    remrf->messageId     = REM_RobotFeedback_get_messageId(remrfp);
    remrf->batteryLevel  = REM_RobotFeedback_get_batteryLevel(remrfp);
    remrf->XsensCalibrated= REM_RobotFeedback_get_XsensCalibrated(remrfp);
    remrf->ballSensorWorking= REM_RobotFeedback_get_ballSensorWorking(remrfp);
    remrf->hasBall       = REM_RobotFeedback_get_hasBall(remrfp);
    remrf->capacitorCharged= REM_RobotFeedback_get_capacitorCharged(remrfp);
    remrf->ballPos       = REM_RobotFeedback_get_ballPos(remrfp);
    remrf->rho           = REM_RobotFeedback_get_rho(remrfp);
    remrf->theta         = REM_RobotFeedback_get_theta(remrfp);
    remrf->angle         = REM_RobotFeedback_get_angle(remrfp);
    remrf->wheelLocked   = REM_RobotFeedback_get_wheelLocked(remrfp);
    remrf->wheelBraking  = REM_RobotFeedback_get_wheelBraking(remrfp);
    remrf->rssi          = REM_RobotFeedback_get_rssi(remrfp);
}

#endif /*__REM_ROBOT_FEEDBACK_H*/
