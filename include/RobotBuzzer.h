// AUTOGENERATED. Run generator/main.py to regenerate
// Generated on June 05 2021, 02:36:07

#ifndef __ROBOT_BUZZER_H
#define __ROBOT_BUZZER_H

#include <stdbool.h>
#include <stdint.h>
#include "BaseTypes.h"

typedef struct _RobotBuzzerPayload {
	uint8_t payload[PACKET_SIZE_ROBOT_BUZZER];
} RobotBuzzerPayload;



/** ================================ PACKET ================================ 
[---0--] [---1--] [---2--] [---3--] [---4--] [---5--] [---6--] [---7--]
11111111 -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- id
-------- ----1111 11111111 1111---- -------- -------- -------- -------- period
-------- -------- -------- ----1111 11111111 11111111 11111111 1111---- duration
*/



/** ================================ STRUCT ================================ */
typedef struct _RobotBuzzer {
    uint8_t    header;                  // Header byte indicating the type of packet
    uint8_t    id;                      // Id of the robot
    uint16_t   period;                  // Sound that the buzzer makes.
    float      duration;                // Duration of the sound
} RobotBuzzer;



/** ================================ GETTERS ================================ */
static inline uint8_t RobotBuzzer_get_header(RobotBuzzerPayload *rbp){
    return ((rbp->payload[0]));
}
static inline uint8_t RobotBuzzer_get_id(RobotBuzzerPayload *rbp){
    return ((rbp->payload[1] & 0b11110000) >> 4);
}
static inline uint16_t RobotBuzzer_get_period(RobotBuzzerPayload *rbp){
    return ((rbp->payload[1] & 0b00001111) << 12) | ((rbp->payload[2]) << 4) | ((rbp->payload[3] & 0b11110000) >> 4);
}
static inline float RobotBuzzer_get_duration(RobotBuzzerPayload *rbp){
    uint32_t duration = ((rbp->payload[3] & 0b00001111) << 28) | ((rbp->payload[4]) << 20) | ((rbp->payload[5]) << 12) | ((rbp->payload[6]) << 4) | ((rbp->payload[7] & 0b11110000) >> 4);
    return (duration * 0.0000000023283064) + 0.0000000000000000;
}



/** ================================ SETTERS ================================ */
static inline void RobotBuzzer_set_header(RobotBuzzerPayload *rbp, uint8_t header){
    rbp->payload[0] = header;
}
static inline void RobotBuzzer_set_id(RobotBuzzerPayload *rbp, uint8_t id){
    rbp->payload[1] = ((id << 4) & 0b11110000) | (rbp->payload[1] & 0b00001111);
}
static inline void RobotBuzzer_set_period(RobotBuzzerPayload *rbp, uint16_t period){
    rbp->payload[1] = ((period >> 12) & 0b00001111) | (rbp->payload[1] & 0b11110000);
    rbp->payload[2] = (period >> 4);
    rbp->payload[3] = ((period << 4) & 0b11110000) | (rbp->payload[3] & 0b00001111);
}
static inline void RobotBuzzer_set_duration(RobotBuzzerPayload *rbp, float _duration){
    uint32_t duration = (_duration - 0.0000000000000000) * 429496729.6000000238418579;
    rbp->payload[3] = ((duration >> 28) & 0b00001111) | (rbp->payload[3] & 0b11110000);
    rbp->payload[4] = (duration >> 20);
    rbp->payload[5] = (duration >> 12);
    rbp->payload[6] = (duration >> 4);
    rbp->payload[7] = ((duration << 4) & 0b11110000) | (rbp->payload[7] & 0b00001111);
}



/** ================================ DECODE ================================ */
static inline void decodeRobotBuzzer(RobotBuzzer *rb, RobotBuzzerPayload *rbp){
	rb->header              = RobotBuzzer_get_header(rbp);
	rb->id                  = RobotBuzzer_get_id(rbp);
	rb->period              = RobotBuzzer_get_period(rbp);
	rb->duration            = RobotBuzzer_get_duration(rbp);
}



/** ================================ ENCODE ================================ */
static inline void encodeRobotBuzzer(RobotBuzzerPayload *rbp, RobotBuzzer *rb){
	RobotBuzzer_set_header              (rbp, rb->header);
	RobotBuzzer_set_id                  (rbp, rb->id);
	RobotBuzzer_set_period              (rbp, rb->period);
	RobotBuzzer_set_duration            (rbp, rb->duration);
}

#endif /*__ROBOT_BUZZER_H*/
