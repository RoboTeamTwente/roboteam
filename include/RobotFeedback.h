// AUTOGENERATED. Run generator/main.py to regenerate
// Generated on July 04 2021, 22:32:07

/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ] [  10  ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- id
-------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- -------- messageId
-------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- batteryLevel
-------- -------- ----1--- -------- -------- -------- -------- -------- -------- -------- -------- XsensCalibrated
-------- -------- -----1-- -------- -------- -------- -------- -------- -------- -------- -------- ballSensorWorking
-------- -------- ------1- -------- -------- -------- -------- -------- -------- -------- -------- hasBall
-------- -------- -------1 -------- -------- -------- -------- -------- -------- -------- -------- capacitorCharged
-------- -------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- ballPos
-------- -------- -------- ----1111 11111111 1111---- -------- -------- -------- -------- -------- rho
-------- -------- -------- -------- -------- ----1111 11111111 1111---- -------- -------- -------- theta
-------- -------- -------- -------- -------- -------- -------- ----1111 11111111 1111---- -------- angle
-------- -------- -------- -------- -------- -------- -------- -------- -------- ----1111 -------- wheelLocked
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 1111---- wheelBraking
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----1111 rssi
*/

#ifndef __ROBOT_FEEDBACK_H
#define __ROBOT_FEEDBACK_H

#include <stdbool.h>
#include <stdint.h>
#include "BaseTypes.h"

typedef struct _RobotFeedbackPayload {
    uint8_t payload[PACKET_SIZE_ROBOT_FEEDBACK];
} RobotFeedbackPayload;

typedef struct _RobotFeedback {
    uint32_t   header              ; // Header byte indicating the type of packet
    uint32_t   id                  ; // Id of the robot 
    uint32_t   messageId           ; // Id of the message
    uint32_t   batteryLevel        ; // The voltage level of the battery
    bool       XsensCalibrated     ; // Indicates if the XSens IMU is calibrated
    bool       ballSensorWorking   ; // Indicates if the ballsensor is working
    bool       hasBall             ; // Indicates if the ball is somewhere in front of the ballsensor
    bool       capacitorCharged    ; // Indicates if the capacitor for kicking and chipping is charged
    float      ballPos             ; // Indicates where in front of the ballsensor the ball is
    float      rho                 ; // The estimated magnitude of movement (m/s)
    float      theta               ; // The estimated direction of movement (rad)
    float      angle               ; // The estimated angle (rad)
    uint32_t   wheelLocked         ; // Indicates if a wheel is locked. One bit per wheel
    uint32_t   wheelBraking        ; // Indicates if a wheel is slipping. One bit per wheel
    uint32_t   rssi                ; // Signal strength of the last packet received by the robot
} RobotFeedback;

// ================================ GETTERS ================================
static inline uint32_t RobotFeedback_get_header(RobotFeedbackPayload *rfp){
    return ((rfp->payload[0]));
}

static inline uint32_t RobotFeedback_get_id(RobotFeedbackPayload *rfp){
    return ((rfp->payload[1] & 0b11110000) >> 4);
}

static inline uint32_t RobotFeedback_get_messageId(RobotFeedbackPayload *rfp){
    return ((rfp->payload[1] & 0b00001111));
}

// ================================ SETTERS ================================
static inline void RobotFeedback_set_header(RobotFeedbackPayload *rfp, uint32_t header){
    rfp->payload[0] = header;
}

static inline void RobotFeedback_set_id(RobotFeedbackPayload *rfp, uint32_t id){
    rfp->payload[1] = ((id << 4) & 0b11110000) | (payload[1] & 0b00001111);
}

static inline void RobotFeedback_set_messageId(RobotFeedbackPayload *rfp, uint32_t messageId){
    rfp->payload[1] = (messageId & 0b00001111) | (payload[1] & 0b11110000);
}

// ================================ ENCODE ================================
static inline void encodeRobotFeedback(RobotFeedbackPayload *rfp, RobotFeedback *rf){
    RobotFeedback_set_header              (rfp, rf->header);
    RobotFeedback_set_id                  (rfp, rf->id);
    RobotFeedback_set_messageId           (rfp, rf->messageId);
    RobotFeedback_set_batteryLevel        (rfp, rf->batteryLevel);
    RobotFeedback_set_XsensCalibrated     (rfp, rf->XsensCalibrated);
    RobotFeedback_set_ballSensorWorking   (rfp, rf->ballSensorWorking);
    RobotFeedback_set_hasBall             (rfp, rf->hasBall);
    RobotFeedback_set_capacitorCharged    (rfp, rf->capacitorCharged);
    RobotFeedback_set_ballPos             (rfp, rf->ballPos);
    RobotFeedback_set_rho                 (rfp, rf->rho);
    RobotFeedback_set_theta               (rfp, rf->theta);
    RobotFeedback_set_angle               (rfp, rf->angle);
    RobotFeedback_set_wheelLocked         (rfp, rf->wheelLocked);
    RobotFeedback_set_wheelBraking        (rfp, rf->wheelBraking);
    RobotFeedback_set_rssi                (rfp, rf->rssi);
}

// ================================ DECODE ================================
static inline void decodeRobotFeedback(RobotFeedback *rf, RobotFeedbackPayload *rfp){
    rf->header           = RobotFeedback_get_header(rfp);
    rf->id               = RobotFeedback_get_id(rfp);
    rf->messageId        = RobotFeedback_get_messageId(rfp);
    rf->batteryLevel     = RobotFeedback_get_batteryLevel(rfp);
    rf->XsensCalibrated  = RobotFeedback_get_XsensCalibrated(rfp);
    rf->ballSensorWorking= RobotFeedback_get_ballSensorWorking(rfp);
    rf->hasBall          = RobotFeedback_get_hasBall(rfp);
    rf->capacitorCharged = RobotFeedback_get_capacitorCharged(rfp);
    rf->ballPos          = RobotFeedback_get_ballPos(rfp);
    rf->rho              = RobotFeedback_get_rho(rfp);
    rf->theta            = RobotFeedback_get_theta(rfp);
    rf->angle            = RobotFeedback_get_angle(rfp);
    rf->wheelLocked      = RobotFeedback_get_wheelLocked(rfp);
    rf->wheelBraking     = RobotFeedback_get_wheelBraking(rfp);
    rf->rssi             = RobotFeedback_get_rssi(rfp);
}

#endif /*__ROBOT_FEEDBACK_H*/
