syntax = "proto3";

package proto;

message RobotCommand {
    uint32 id = 1;                  // id of robot [0,15]

    float x_velocity = 2;           // (m/s) Velocity relative to the field, from goal to goal
    float y_velocity = 3;           // (m/s) Velocity relative to the field, from sideline to sideline
    bool rotation_as_velocity = 4;  // true if rotation is a angularVelocity, false if it is an absolute angle relative to the field
    float rotation = 5;             // (rad/s) or (rad) depending on rotationAsVelocity

    float kick_speed = 6;           // [0, 6.5] (m/s) The wanted speed at which the ball should move from the robot
    bool use_chipper = 7;           // True if the ballspeed should be obtained by chipping instead of kicking
    bool dont_wait_for_ball = 8;    // If true, the kicker/chipper will activate even if the robot does not have the ball

    float dribbler_speed = 9;       // [0, 1] Rotational speed of the dribbler. 1 means full power.
}

/* This message is meant for AI to send to RobotHub. It contains commands for all
   robots that AI wants to control, combined with of which team the robots are */
message RobotCommands {
    repeated RobotCommand commands = 1;
    bool commands_are_for_team_yellow = 2;
}