# AUTOGENERATED. Run generator/main.py to regenerate
"""
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ] [  10  ] [  11  ] [  12  ] [  13  ] [  14  ] [  15  ] [  16  ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toRobotId
-------- ----1--- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toColor
-------- -----1-- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toBC
-------- ------1- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toBS
-------- -------1 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toPC
-------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromRobotId
-------- -------- ----1--- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromColor
-------- -------- -----1-- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- reserved
-------- -------- ------1- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromBS
-------- -------- -------1 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromPC
-------- -------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- remVersion
-------- -------- -------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- messageId
-------- -------- -------- -------- 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- payloadSize
-------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- rho
-------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- theta
-------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- angle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- angularVelocity
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- cameraAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 1------- -------- useCameraAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -1------ -------- useAbsoluteAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --111--- -------- dribbler
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -----1-- -------- doKick
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ------1- -------- doChip
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------1 -------- kickAtAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 1111---- kickChipPower
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----1--- doForce
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -----1-- feedback
"""

import numpy as np
from . import REM_BaseTypes



class REM_RobotCommand:
    header = 0                # integer [0, 255]             Header byte indicating the type of packet
    toRobotId = 0             # integer [0, 15]              Id of the receiving robot
    toColor = 0               # integer [0, 1]               Color of the receiving robot / basestation. Yellow = 0, Blue = 1
    toBC = 0                  # integer [0, 1]               Bit indicating this packet has to be broadcasted to all robots
    toBS = 0                  # integer [0, 1]               Bit indicating this packet is meant for the basestation
    toPC = 0                  # integer [0, 1]               Bit indicating this packet is meant for the PC
    fromRobotId = 0           # integer [0, 15]              Id of the transmitting robot
    fromColor = 0             # integer [0, 1]               Color of the transmitting robot / basestation. Yellow = 0, Blue = 1
    reserved = 0              # integer [0, 1]               reserved
    fromBS = 0                # integer [0, 1]               Bit indicating this packet is coming from the basestation
    fromPC = 0                # integer [0, 1]               Bit indicating this packet is coming from the PC
    remVersion = 0            # integer [0, 15]              Version of roboteam_embedded_messages
    messageId = 0             # integer [0, 15]              messageId. Can be used for aligning packets
    payloadSize = 0           # integer [0, 255]             Size of the payload. At most 255 bytes including the generic_packet_header. Keep the 127 byte SX1280 limit in mind
    rho = 0                   # float   [0.000, 8.000]       Magnitude of movement (m/s)
    theta = 0                 # float   [-3.142, 3.142]      Direction of movement (radians)
    angle = 0                 # float   [-3.142, 3.142]      Absolute angle (rad)
    angularVelocity = 0       # float   [-12.566, 12.566]    Angular velocity (rad/s)
    cameraAngle = 0           # float   [-3.142, 3.142]      Angle of the robot as seen by camera (rad)
    useCameraAngle = 0        # integer [0, 1]               Use the info in 'cameraAngle'
    useAbsoluteAngle = 0      # integer [0, 1]               0 = angular velocity, 1 = absolute angle
    dribbler = 0              # float   [0.000, 1.000]       Dribbler speed
    doKick = 0                # integer [0, 1]               Do a kick if ballsensor
    doChip = 0                # integer [0, 1]               Do a chip if ballsensor
    kickAtAngle = 0           # integer [0, 1]               Do a kick once angle is reached
    kickChipPower = 0         # float   [0.000, 6.500]       Speed of the ball in m/s
    doForce = 0               # integer [0, 1]               Do regardless of ballsensor
    feedback = 0              # integer [0, 1]               Ignore the packet. Just send feedback



# ================================ GETTERS ================================
    @staticmethod
    def get_header(payload):
        return ((payload[0]));

    @staticmethod
    def get_toRobotId(payload):
        return ((payload[1] & 0b11110000) >> 4);

    @staticmethod
    def get_toColor(payload):
        return (payload[1] & 0b00001000) > 0;

    @staticmethod
    def get_toBC(payload):
        return (payload[1] & 0b00000100) > 0;

    @staticmethod
    def get_toBS(payload):
        return (payload[1] & 0b00000010) > 0;

    @staticmethod
    def get_toPC(payload):
        return (payload[1] & 0b00000001) > 0;

    @staticmethod
    def get_fromRobotId(payload):
        return ((payload[2] & 0b11110000) >> 4);

    @staticmethod
    def get_fromColor(payload):
        return (payload[2] & 0b00001000) > 0;

    @staticmethod
    def get_reserved(payload):
        return (payload[2] & 0b00000100) > 0;

    @staticmethod
    def get_fromBS(payload):
        return (payload[2] & 0b00000010) > 0;

    @staticmethod
    def get_fromPC(payload):
        return (payload[2] & 0b00000001) > 0;

    @staticmethod
    def get_remVersion(payload):
        return ((payload[3] & 0b11110000) >> 4);

    @staticmethod
    def get_messageId(payload):
        return ((payload[3] & 0b00001111));

    @staticmethod
    def get_payloadSize(payload):
        return ((payload[4]));

    @staticmethod
    def get_rho(payload):
        _rho = ((payload[5]) << 8) | ((payload[6]));
        return (_rho * 0.0001220721751736) + 0.0000000000000000;

    @staticmethod
    def get_theta(payload):
        _theta = ((payload[7]) << 8) | ((payload[8]));
        return (_theta * 0.0000958752621833) + -3.1415926535897931;

    @staticmethod
    def get_angle(payload):
        _angle = ((payload[9]) << 8) | ((payload[10]));
        return (_angle * 0.0000958752621833) + -3.1415926535897931;

    @staticmethod
    def get_angularVelocity(payload):
        _angularVelocity = ((payload[11]) << 8) | ((payload[12]));
        return (_angularVelocity * 0.0003835010487330) + -12.5663706143591725;

    @staticmethod
    def get_cameraAngle(payload):
        _cameraAngle = ((payload[13]) << 8) | ((payload[14]));
        return (_cameraAngle * 0.0000958752621833) + -3.1415926535897931;

    @staticmethod
    def get_useCameraAngle(payload):
        return (payload[15] & 0b10000000) > 0;

    @staticmethod
    def get_useAbsoluteAngle(payload):
        return (payload[15] & 0b01000000) > 0;

    @staticmethod
    def get_dribbler(payload):
        _dribbler = ((payload[15] & 0b00111000) >> 3);
        return (_dribbler * 0.1428571428571428) + 0.0000000000000000;

    @staticmethod
    def get_doKick(payload):
        return (payload[15] & 0b00000100) > 0;

    @staticmethod
    def get_doChip(payload):
        return (payload[15] & 0b00000010) > 0;

    @staticmethod
    def get_kickAtAngle(payload):
        return (payload[15] & 0b00000001) > 0;

    @staticmethod
    def get_kickChipPower(payload):
        _kickChipPower = ((payload[16] & 0b11110000) >> 4);
        return (_kickChipPower * 0.4333333333333333) + 0.0000000000000000;

    @staticmethod
    def get_doForce(payload):
        return (payload[16] & 0b00001000) > 0;

    @staticmethod
    def get_feedback(payload):
        return (payload[16] & 0b00000100) > 0;

# ================================ SETTERS ================================
    @staticmethod
    def set_header(payload, header):
        payload[0] = header;

    @staticmethod
    def set_toRobotId(payload, toRobotId):
        payload[1] = ((toRobotId << 4) & 0b11110000) | (payload[1] & 0b00001111);

    @staticmethod
    def set_toColor(payload, toColor):
        payload[1] = ((toColor << 3) & 0b00001000) | (payload[1] & 0b11110111);

    @staticmethod
    def set_toBC(payload, toBC):
        payload[1] = ((toBC << 2) & 0b00000100) | (payload[1] & 0b11111011);

    @staticmethod
    def set_toBS(payload, toBS):
        payload[1] = ((toBS << 1) & 0b00000010) | (payload[1] & 0b11111101);

    @staticmethod
    def set_toPC(payload, toPC):
        payload[1] = (toPC & 0b00000001) | (payload[1] & 0b11111110);

    @staticmethod
    def set_fromRobotId(payload, fromRobotId):
        payload[2] = ((fromRobotId << 4) & 0b11110000) | (payload[2] & 0b00001111);

    @staticmethod
    def set_fromColor(payload, fromColor):
        payload[2] = ((fromColor << 3) & 0b00001000) | (payload[2] & 0b11110111);

    @staticmethod
    def set_reserved(payload, reserved):
        payload[2] = ((reserved << 2) & 0b00000100) | (payload[2] & 0b11111011);

    @staticmethod
    def set_fromBS(payload, fromBS):
        payload[2] = ((fromBS << 1) & 0b00000010) | (payload[2] & 0b11111101);

    @staticmethod
    def set_fromPC(payload, fromPC):
        payload[2] = (fromPC & 0b00000001) | (payload[2] & 0b11111110);

    @staticmethod
    def set_remVersion(payload, remVersion):
        payload[3] = ((remVersion << 4) & 0b11110000) | (payload[3] & 0b00001111);

    @staticmethod
    def set_messageId(payload, messageId):
        payload[3] = (messageId & 0b00001111) | (payload[3] & 0b11110000);

    @staticmethod
    def set_payloadSize(payload, payloadSize):
        payload[4] = payloadSize;

    @staticmethod
    def set_rho(payload, rho):
        _rho = int(rho / 0.0001220721751736);
        payload[5] = (_rho >> 8);
        payload[6] = _rho;

    @staticmethod
    def set_theta(payload, theta):
        _theta = int((theta +3.1415926535897931) / 0.0000958752621833);
        payload[7] = (_theta >> 8);
        payload[8] = _theta;

    @staticmethod
    def set_angle(payload, angle):
        _angle = int((angle +3.1415926535897931) / 0.0000958752621833);
        payload[9] = (_angle >> 8);
        payload[10] = _angle;

    @staticmethod
    def set_angularVelocity(payload, angularVelocity):
        _angularVelocity = int((angularVelocity +12.5663706143591725) / 0.0003835010487330);
        payload[11] = (_angularVelocity >> 8);
        payload[12] = _angularVelocity;

    @staticmethod
    def set_cameraAngle(payload, cameraAngle):
        _cameraAngle = int((cameraAngle +3.1415926535897931) / 0.0000958752621833);
        payload[13] = (_cameraAngle >> 8);
        payload[14] = _cameraAngle;

    @staticmethod
    def set_useCameraAngle(payload, useCameraAngle):
        payload[15] = ((useCameraAngle << 7) & 0b10000000) | (payload[15] & 0b01111111);

    @staticmethod
    def set_useAbsoluteAngle(payload, useAbsoluteAngle):
        payload[15] = ((useAbsoluteAngle << 6) & 0b01000000) | (payload[15] & 0b10111111);

    @staticmethod
    def set_dribbler(payload, dribbler):
        _dribbler = int(dribbler / 0.1428571428571428);
        payload[15] = ((_dribbler << 3) & 0b00111000) | (payload[15] & 0b11000111);

    @staticmethod
    def set_doKick(payload, doKick):
        payload[15] = ((doKick << 2) & 0b00000100) | (payload[15] & 0b11111011);

    @staticmethod
    def set_doChip(payload, doChip):
        payload[15] = ((doChip << 1) & 0b00000010) | (payload[15] & 0b11111101);

    @staticmethod
    def set_kickAtAngle(payload, kickAtAngle):
        payload[15] = (kickAtAngle & 0b00000001) | (payload[15] & 0b11111110);

    @staticmethod
    def set_kickChipPower(payload, kickChipPower):
        _kickChipPower = int(kickChipPower / 0.4333333333333333);
        payload[16] = ((_kickChipPower << 4) & 0b11110000) | (payload[16] & 0b00001111);

    @staticmethod
    def set_doForce(payload, doForce):
        payload[16] = ((doForce << 3) & 0b00001000) | (payload[16] & 0b11110111);

    @staticmethod
    def set_feedback(payload, feedback):
        payload[16] = ((feedback << 2) & 0b00000100) | (payload[16] & 0b11111011);

# ================================ ENCODE ================================
    def encode(self):
        payload = np.zeros(REM_BaseTypes.PACKET_SIZE_REM_ROBOT_COMMAND, dtype=np.uint8)
        REM_RobotCommand.set_header              (payload, self.header)
        REM_RobotCommand.set_toRobotId           (payload, self.toRobotId)
        REM_RobotCommand.set_toColor             (payload, self.toColor)
        REM_RobotCommand.set_toBC                (payload, self.toBC)
        REM_RobotCommand.set_toBS                (payload, self.toBS)
        REM_RobotCommand.set_toPC                (payload, self.toPC)
        REM_RobotCommand.set_fromRobotId         (payload, self.fromRobotId)
        REM_RobotCommand.set_fromColor           (payload, self.fromColor)
        REM_RobotCommand.set_reserved            (payload, self.reserved)
        REM_RobotCommand.set_fromBS              (payload, self.fromBS)
        REM_RobotCommand.set_fromPC              (payload, self.fromPC)
        REM_RobotCommand.set_remVersion          (payload, self.remVersion)
        REM_RobotCommand.set_messageId           (payload, self.messageId)
        REM_RobotCommand.set_payloadSize         (payload, self.payloadSize)
        REM_RobotCommand.set_rho                 (payload, self.rho)
        REM_RobotCommand.set_theta               (payload, self.theta)
        REM_RobotCommand.set_angle               (payload, self.angle)
        REM_RobotCommand.set_angularVelocity     (payload, self.angularVelocity)
        REM_RobotCommand.set_cameraAngle         (payload, self.cameraAngle)
        REM_RobotCommand.set_useCameraAngle      (payload, self.useCameraAngle)
        REM_RobotCommand.set_useAbsoluteAngle    (payload, self.useAbsoluteAngle)
        REM_RobotCommand.set_dribbler            (payload, self.dribbler)
        REM_RobotCommand.set_doKick              (payload, self.doKick)
        REM_RobotCommand.set_doChip              (payload, self.doChip)
        REM_RobotCommand.set_kickAtAngle         (payload, self.kickAtAngle)
        REM_RobotCommand.set_kickChipPower       (payload, self.kickChipPower)
        REM_RobotCommand.set_doForce             (payload, self.doForce)
        REM_RobotCommand.set_feedback            (payload, self.feedback)
        return payload


# ================================ DECODE ================================
    def decode(self, payload):
        self.header           = REM_RobotCommand.get_header(payload)
        self.toRobotId        = REM_RobotCommand.get_toRobotId(payload)
        self.toColor          = REM_RobotCommand.get_toColor(payload)
        self.toBC             = REM_RobotCommand.get_toBC(payload)
        self.toBS             = REM_RobotCommand.get_toBS(payload)
        self.toPC             = REM_RobotCommand.get_toPC(payload)
        self.fromRobotId      = REM_RobotCommand.get_fromRobotId(payload)
        self.fromColor        = REM_RobotCommand.get_fromColor(payload)
        self.reserved         = REM_RobotCommand.get_reserved(payload)
        self.fromBS           = REM_RobotCommand.get_fromBS(payload)
        self.fromPC           = REM_RobotCommand.get_fromPC(payload)
        self.remVersion       = REM_RobotCommand.get_remVersion(payload)
        self.messageId        = REM_RobotCommand.get_messageId(payload)
        self.payloadSize      = REM_RobotCommand.get_payloadSize(payload)
        self.rho              = REM_RobotCommand.get_rho(payload)
        self.theta            = REM_RobotCommand.get_theta(payload)
        self.angle            = REM_RobotCommand.get_angle(payload)
        self.angularVelocity  = REM_RobotCommand.get_angularVelocity(payload)
        self.cameraAngle      = REM_RobotCommand.get_cameraAngle(payload)
        self.useCameraAngle   = REM_RobotCommand.get_useCameraAngle(payload)
        self.useAbsoluteAngle = REM_RobotCommand.get_useAbsoluteAngle(payload)
        self.dribbler         = REM_RobotCommand.get_dribbler(payload)
        self.doKick           = REM_RobotCommand.get_doKick(payload)
        self.doChip           = REM_RobotCommand.get_doChip(payload)
        self.kickAtAngle      = REM_RobotCommand.get_kickAtAngle(payload)
        self.kickChipPower    = REM_RobotCommand.get_kickChipPower(payload)
        self.doForce          = REM_RobotCommand.get_doForce(payload)
        self.feedback         = REM_RobotCommand.get_feedback(payload)


    def print_bit_string(self):
        payload = self.encode()
        for i in range(len(payload)):
            print(format(payload[i], '08b'), end=" ")
        print()
