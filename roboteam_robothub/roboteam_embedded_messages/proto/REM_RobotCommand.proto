// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ] [  10  ] [  11  ] [  12  ] [  13  ] [  14  ] [  15  ] [  16  ] [  17  ] [  18  ] [  19  ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toRobotId
-------- ----1--- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toColor
-------- -----1-- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toBC
-------- ------1- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toBS
-------- -------1 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- toPC
-------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromRobotId
-------- -------- ----1--- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromColor
-------- -------- -----1-- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- reserved
-------- -------- ------1- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromBS
-------- -------- -------1 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- fromPC
-------- -------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- remVersion
-------- -------- -------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- messageId
-------- -------- -------- -------- 11111111 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- timestamp
-------- -------- -------- -------- -------- -------- -------- 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- payloadSize
-------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- rho
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- theta
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- angle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- angularVelocity
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- cameraAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 1------- -------- useCameraAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -1------ -------- useAbsoluteAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- --111--- -------- dribbler
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -----1-- -------- doKick
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ------1- -------- doChip
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------1 -------- kickAtAngle
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 1111---- kickChipPower
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- ----1--- doForce
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -----1-- feedback
*/

syntax="proto3";

package proto;

message REM_RobotCommand {
    uint32 header = 1;        // integer [0, 255]             Header byte indicating the type of packet
    uint32 toRobotId = 2;     // integer [0, 15]              Id of the receiving robot
    bool toColor = 3;         // integer [0, 1]               Color of the receiving robot / basestation. Yellow = 0, Blue = 1
    bool toBC = 4;            // integer [0, 1]               Bit indicating this packet has to be broadcasted to all robots
    bool toBS = 5;            // integer [0, 1]               Bit indicating this packet is meant for the basestation
    bool toPC = 6;            // integer [0, 1]               Bit indicating this packet is meant for the PC
    uint32 fromRobotId = 7;   // integer [0, 15]              Id of the transmitting robot
    bool fromColor = 8;       // integer [0, 1]               Color of the transmitting robot / basestation. Yellow = 0, Blue = 1
    bool reserved = 9;        // integer [0, 1]               reserved
    bool fromBS = 10;         // integer [0, 1]               Bit indicating this packet is coming from the basestation
    bool fromPC = 11;         // integer [0, 1]               Bit indicating this packet is coming from the PC
    uint32 remVersion = 12;   // integer [0, 15]              Version of roboteam_embedded_messages
    uint32 messageId = 13;    // integer [0, 15]              messageId. Can be used for aligning packets
    uint32 timestamp = 14;    // integer [0, 16777215]        Timestamp in milliseconds
    uint32 payloadSize = 15;  // integer [0, 255]             Size of the payload. At most 255 bytes including the generic_packet_header. Keep the 127 byte SX1280 limit in mind
    float rho = 16;           // float   [0.000, 8.000]       Magnitude of movement (m/s)
    float theta = 17;         // float   [-3.142, 3.142]      Direction of movement (radians)
    float angle = 18;         // float   [-3.142, 3.142]      Absolute angle (rad)
    float angularVelocity = 19; // float   [-12.566, 12.566]    Angular velocity (rad/s)
    float cameraAngle = 20;   // float   [-3.142, 3.142]      Angle of the robot as seen by camera (rad)
    bool useCameraAngle = 21; // integer [0, 1]               Use the info in 'cameraAngle'
    bool useAbsoluteAngle = 22; // integer [0, 1]               0 = angular velocity, 1 = absolute angle
    float dribbler = 23;      // float   [0.000, 1.000]       Dribbler speed
    bool doKick = 24;         // integer [0, 1]               Do a kick if ballsensor
    bool doChip = 25;         // integer [0, 1]               Do a chip if ballsensor
    bool kickAtAngle = 26;    // integer [0, 1]               Do a kick once angle is reached
    float kickChipPower = 27; // float   [0.000, 6.500]       Speed of the ball in m/s
    bool doForce = 28;        // integer [0, 1]               Do regardless of ballsensor
    bool feedback = 29;       // integer [0, 1]               Ignore the packet. Just send feedback
}
