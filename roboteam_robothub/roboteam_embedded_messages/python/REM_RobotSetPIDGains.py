# AUTOGENERATED. Run generator/main.py to regenerate
"""
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ] [  10  ] [  11  ] [  12  ] [  13  ] [  14  ] [  15  ] [  16  ] [  17  ] [  18  ] [  19  ] [  20  ] [  21  ] [  22  ] [  23  ] [  24  ] [  25  ] [  26  ] [  27  ] [  28  ] [  29  ] [  30  ] [  31  ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- remVersion
-------- ----1111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- id
-------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- PbodyX
-------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- IbodyX
-------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- DbodyX
-------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- PbodyY
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- IbodyY
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- DbodyY
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- PbodyW
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- IbodyW
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- DbodyW
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- PbodyYaw
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- -------- -------- IbodyYaw
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- -------- -------- DbodyYaw
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- -------- -------- Pwheels
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 -------- -------- Iwheels
-------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- -------- 11111111 11111111 Dwheels
"""

import numpy as np
from . import REM_BaseTypes



class REM_RobotSetPIDGains:
    header = 0                # integer [0, 255]             Header byte indicating the type of packet
    remVersion = 0            # integer [0, 15]              Version of roboteam_embedded_messages
    id = 0                    # integer [0, 15]              Id of the robot
    PbodyX = 0                # float   [0.000, 40.000]      Commanded P gain of the PID for body_x (x-direction)
    IbodyX = 0                # float   [0.000, 20.000]      Commanded I gain of the PID for body_x (x-direction)
    DbodyX = 0                # float   [0.000, 10.000]      Commanded D gain of the PID for body_x (x-direction)
    PbodyY = 0                # float   [0.000, 40.000]      Commanded P gain of the PID for body_y (y-direction)
    IbodyY = 0                # float   [0.000, 20.000]      Commanded I gain of the PID for body_y (y-direction)
    DbodyY = 0                # float   [0.000, 10.000]      Commanded D gain of the PID for body_y (y-direction)
    PbodyW = 0                # float   [0.000, 40.000]      Commanded P gain of the PID for body_w (Angular velocity)
    IbodyW = 0                # float   [0.000, 20.000]      Commanded I gain of the PID for body_w (Angular velocity)
    DbodyW = 0                # float   [0.000, 10.000]      Commanded D gain of the PID for body_w (Angular velocity)
    PbodyYaw = 0              # float   [0.000, 40.000]      Commanded P gain of the PID for body_yaw (Absolute angle)
    IbodyYaw = 0              # float   [0.000, 20.000]      Commanded I gain of the PID for body_yaw (Absolute angle)
    DbodyYaw = 0              # float   [0.000, 10.000]      Commanded D gain of the PID for body_yaw (Absolute angle)
    Pwheels = 0               # float   [0.000, 40.000]      Commanded P gain of the PID for the wheels
    Iwheels = 0               # float   [0.000, 20.000]      Commanded I gain of the PID for the wheels
    Dwheels = 0               # float   [0.000, 10.000]      Commanded D gain of the PID for the wheels



# ================================ GETTERS ================================
    @staticmethod
    def get_header(payload):
        return ((payload[0]));

    @staticmethod
    def get_remVersion(payload):
        return ((payload[1] & 0b11110000) >> 4);

    @staticmethod
    def get_id(payload):
        return ((payload[1] & 0b00001111));

    @staticmethod
    def get_PbodyX(payload):
        _PbodyX = ((payload[2]) << 8) | ((payload[3]));
        return (_PbodyX * 0.0006103608758679) + 0.0000000000000000;

    @staticmethod
    def get_IbodyX(payload):
        _IbodyX = ((payload[4]) << 8) | ((payload[5]));
        return (_IbodyX * 0.0003051804379339) + 0.0000000000000000;

    @staticmethod
    def get_DbodyX(payload):
        _DbodyX = ((payload[6]) << 8) | ((payload[7]));
        return (_DbodyX * 0.0001525902189670) + 0.0000000000000000;

    @staticmethod
    def get_PbodyY(payload):
        _PbodyY = ((payload[8]) << 8) | ((payload[9]));
        return (_PbodyY * 0.0006103608758679) + 0.0000000000000000;

    @staticmethod
    def get_IbodyY(payload):
        _IbodyY = ((payload[10]) << 8) | ((payload[11]));
        return (_IbodyY * 0.0003051804379339) + 0.0000000000000000;

    @staticmethod
    def get_DbodyY(payload):
        _DbodyY = ((payload[12]) << 8) | ((payload[13]));
        return (_DbodyY * 0.0001525902189670) + 0.0000000000000000;

    @staticmethod
    def get_PbodyW(payload):
        _PbodyW = ((payload[14]) << 8) | ((payload[15]));
        return (_PbodyW * 0.0006103608758679) + 0.0000000000000000;

    @staticmethod
    def get_IbodyW(payload):
        _IbodyW = ((payload[16]) << 8) | ((payload[17]));
        return (_IbodyW * 0.0003051804379339) + 0.0000000000000000;

    @staticmethod
    def get_DbodyW(payload):
        _DbodyW = ((payload[18]) << 8) | ((payload[19]));
        return (_DbodyW * 0.0001525902189670) + 0.0000000000000000;

    @staticmethod
    def get_PbodyYaw(payload):
        _PbodyYaw = ((payload[20]) << 8) | ((payload[21]));
        return (_PbodyYaw * 0.0006103608758679) + 0.0000000000000000;

    @staticmethod
    def get_IbodyYaw(payload):
        _IbodyYaw = ((payload[22]) << 8) | ((payload[23]));
        return (_IbodyYaw * 0.0003051804379339) + 0.0000000000000000;

    @staticmethod
    def get_DbodyYaw(payload):
        _DbodyYaw = ((payload[24]) << 8) | ((payload[25]));
        return (_DbodyYaw * 0.0001525902189670) + 0.0000000000000000;

    @staticmethod
    def get_Pwheels(payload):
        _Pwheels = ((payload[26]) << 8) | ((payload[27]));
        return (_Pwheels * 0.0006103608758679) + 0.0000000000000000;

    @staticmethod
    def get_Iwheels(payload):
        _Iwheels = ((payload[28]) << 8) | ((payload[29]));
        return (_Iwheels * 0.0003051804379339) + 0.0000000000000000;

    @staticmethod
    def get_Dwheels(payload):
        _Dwheels = ((payload[30]) << 8) | ((payload[31]));
        return (_Dwheels * 0.0001525902189670) + 0.0000000000000000;

# ================================ SETTERS ================================
    @staticmethod
    def set_header(payload, header):
        payload[0] = header;

    @staticmethod
    def set_remVersion(payload, remVersion):
        payload[1] = ((remVersion << 4) & 0b11110000) | (payload[1] & 0b00001111);

    @staticmethod
    def set_id(payload, id):
        payload[1] = (id & 0b00001111) | (payload[1] & 0b11110000);

    @staticmethod
    def set_PbodyX(payload, PbodyX):
        _PbodyX = int(PbodyX / 0.0006103608758679);
        payload[2] = (_PbodyX >> 8);
        payload[3] = _PbodyX;

    @staticmethod
    def set_IbodyX(payload, IbodyX):
        _IbodyX = int(IbodyX / 0.0003051804379339);
        payload[4] = (_IbodyX >> 8);
        payload[5] = _IbodyX;

    @staticmethod
    def set_DbodyX(payload, DbodyX):
        _DbodyX = int(DbodyX / 0.0001525902189670);
        payload[6] = (_DbodyX >> 8);
        payload[7] = _DbodyX;

    @staticmethod
    def set_PbodyY(payload, PbodyY):
        _PbodyY = int(PbodyY / 0.0006103608758679);
        payload[8] = (_PbodyY >> 8);
        payload[9] = _PbodyY;

    @staticmethod
    def set_IbodyY(payload, IbodyY):
        _IbodyY = int(IbodyY / 0.0003051804379339);
        payload[10] = (_IbodyY >> 8);
        payload[11] = _IbodyY;

    @staticmethod
    def set_DbodyY(payload, DbodyY):
        _DbodyY = int(DbodyY / 0.0001525902189670);
        payload[12] = (_DbodyY >> 8);
        payload[13] = _DbodyY;

    @staticmethod
    def set_PbodyW(payload, PbodyW):
        _PbodyW = int(PbodyW / 0.0006103608758679);
        payload[14] = (_PbodyW >> 8);
        payload[15] = _PbodyW;

    @staticmethod
    def set_IbodyW(payload, IbodyW):
        _IbodyW = int(IbodyW / 0.0003051804379339);
        payload[16] = (_IbodyW >> 8);
        payload[17] = _IbodyW;

    @staticmethod
    def set_DbodyW(payload, DbodyW):
        _DbodyW = int(DbodyW / 0.0001525902189670);
        payload[18] = (_DbodyW >> 8);
        payload[19] = _DbodyW;

    @staticmethod
    def set_PbodyYaw(payload, PbodyYaw):
        _PbodyYaw = int(PbodyYaw / 0.0006103608758679);
        payload[20] = (_PbodyYaw >> 8);
        payload[21] = _PbodyYaw;

    @staticmethod
    def set_IbodyYaw(payload, IbodyYaw):
        _IbodyYaw = int(IbodyYaw / 0.0003051804379339);
        payload[22] = (_IbodyYaw >> 8);
        payload[23] = _IbodyYaw;

    @staticmethod
    def set_DbodyYaw(payload, DbodyYaw):
        _DbodyYaw = int(DbodyYaw / 0.0001525902189670);
        payload[24] = (_DbodyYaw >> 8);
        payload[25] = _DbodyYaw;

    @staticmethod
    def set_Pwheels(payload, Pwheels):
        _Pwheels = int(Pwheels / 0.0006103608758679);
        payload[26] = (_Pwheels >> 8);
        payload[27] = _Pwheels;

    @staticmethod
    def set_Iwheels(payload, Iwheels):
        _Iwheels = int(Iwheels / 0.0003051804379339);
        payload[28] = (_Iwheels >> 8);
        payload[29] = _Iwheels;

    @staticmethod
    def set_Dwheels(payload, Dwheels):
        _Dwheels = int(Dwheels / 0.0001525902189670);
        payload[30] = (_Dwheels >> 8);
        payload[31] = _Dwheels;

# ================================ ENCODE ================================
    def encode(self):
        payload = np.zeros(REM_BaseTypes.PACKET_SIZE_REM_ROBOT_SET_PIDGAINS, dtype=np.uint8)
        REM_RobotSetPIDGains.set_header              (payload, self.header)
        REM_RobotSetPIDGains.set_remVersion          (payload, self.remVersion)
        REM_RobotSetPIDGains.set_id                  (payload, self.id)
        REM_RobotSetPIDGains.set_PbodyX              (payload, self.PbodyX)
        REM_RobotSetPIDGains.set_IbodyX              (payload, self.IbodyX)
        REM_RobotSetPIDGains.set_DbodyX              (payload, self.DbodyX)
        REM_RobotSetPIDGains.set_PbodyY              (payload, self.PbodyY)
        REM_RobotSetPIDGains.set_IbodyY              (payload, self.IbodyY)
        REM_RobotSetPIDGains.set_DbodyY              (payload, self.DbodyY)
        REM_RobotSetPIDGains.set_PbodyW              (payload, self.PbodyW)
        REM_RobotSetPIDGains.set_IbodyW              (payload, self.IbodyW)
        REM_RobotSetPIDGains.set_DbodyW              (payload, self.DbodyW)
        REM_RobotSetPIDGains.set_PbodyYaw            (payload, self.PbodyYaw)
        REM_RobotSetPIDGains.set_IbodyYaw            (payload, self.IbodyYaw)
        REM_RobotSetPIDGains.set_DbodyYaw            (payload, self.DbodyYaw)
        REM_RobotSetPIDGains.set_Pwheels             (payload, self.Pwheels)
        REM_RobotSetPIDGains.set_Iwheels             (payload, self.Iwheels)
        REM_RobotSetPIDGains.set_Dwheels             (payload, self.Dwheels)
        return payload


# ================================ DECODE ================================
    def decode(self, payload):
        self.header           = REM_RobotSetPIDGains.get_header(payload)
        self.remVersion       = REM_RobotSetPIDGains.get_remVersion(payload)
        self.id               = REM_RobotSetPIDGains.get_id(payload)
        self.PbodyX           = REM_RobotSetPIDGains.get_PbodyX(payload)
        self.IbodyX           = REM_RobotSetPIDGains.get_IbodyX(payload)
        self.DbodyX           = REM_RobotSetPIDGains.get_DbodyX(payload)
        self.PbodyY           = REM_RobotSetPIDGains.get_PbodyY(payload)
        self.IbodyY           = REM_RobotSetPIDGains.get_IbodyY(payload)
        self.DbodyY           = REM_RobotSetPIDGains.get_DbodyY(payload)
        self.PbodyW           = REM_RobotSetPIDGains.get_PbodyW(payload)
        self.IbodyW           = REM_RobotSetPIDGains.get_IbodyW(payload)
        self.DbodyW           = REM_RobotSetPIDGains.get_DbodyW(payload)
        self.PbodyYaw         = REM_RobotSetPIDGains.get_PbodyYaw(payload)
        self.IbodyYaw         = REM_RobotSetPIDGains.get_IbodyYaw(payload)
        self.DbodyYaw         = REM_RobotSetPIDGains.get_DbodyYaw(payload)
        self.Pwheels          = REM_RobotSetPIDGains.get_Pwheels(payload)
        self.Iwheels          = REM_RobotSetPIDGains.get_Iwheels(payload)
        self.Dwheels          = REM_RobotSetPIDGains.get_Dwheels(payload)


    def print_bit_string(self):
        payload = self.encode()
        for i in range(len(payload)):
            print(format(payload[i], '08b'), end=" ")
        print()
