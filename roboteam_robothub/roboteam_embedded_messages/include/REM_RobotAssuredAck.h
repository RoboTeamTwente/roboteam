// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ]
11111111 -------- -------- header
-------- 1111---- -------- remVersion
-------- ----1111 -------- id
-------- -------- 11111111 sequenceNumber
*/

#ifndef __REM_ROBOT_ASSURED_ACK_H
#define __REM_ROBOT_ASSURED_ACK_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_RobotAssuredAckPayload {
    uint8_t payload[PACKET_SIZE_REM_ROBOT_ASSURED_ACK];
} REM_RobotAssuredAckPayload;

typedef struct _REM_RobotAssuredAck {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   id                  ; // integer [0, 15]              Id of the robot
    uint32_t   sequenceNumber      ; // integer [0, 255]             Number to match this packet with AssuredPacket
} REM_RobotAssuredAck;

// ================================ GETTERS ================================
static inline uint32_t REM_RobotAssuredAck_get_header(REM_RobotAssuredAckPayload *remraap){
    return ((remraap->payload[0]));
}

static inline uint32_t REM_RobotAssuredAck_get_remVersion(REM_RobotAssuredAckPayload *remraap){
    return ((remraap->payload[1] & 0b11110000) >> 4);
}

static inline uint32_t REM_RobotAssuredAck_get_id(REM_RobotAssuredAckPayload *remraap){
    return ((remraap->payload[1] & 0b00001111));
}

static inline uint32_t REM_RobotAssuredAck_get_sequenceNumber(REM_RobotAssuredAckPayload *remraap){
    return ((remraap->payload[2]));
}

// ================================ SETTERS ================================
static inline void REM_RobotAssuredAck_set_header(REM_RobotAssuredAckPayload *remraap, uint32_t header){
    remraap->payload[0] = header;
}

static inline void REM_RobotAssuredAck_set_remVersion(REM_RobotAssuredAckPayload *remraap, uint32_t remVersion){
    remraap->payload[1] = ((remVersion << 4) & 0b11110000) | (remraap->payload[1] & 0b00001111);
}

static inline void REM_RobotAssuredAck_set_id(REM_RobotAssuredAckPayload *remraap, uint32_t id){
    remraap->payload[1] = (id & 0b00001111) | (remraap->payload[1] & 0b11110000);
}

static inline void REM_RobotAssuredAck_set_sequenceNumber(REM_RobotAssuredAckPayload *remraap, uint32_t sequenceNumber){
    remraap->payload[2] = sequenceNumber;
}

// ================================ ENCODE ================================
static inline void encodeREM_RobotAssuredAck(REM_RobotAssuredAckPayload *remraap, REM_RobotAssuredAck *remraa){
    REM_RobotAssuredAck_set_header              (remraap, remraa->header);
    REM_RobotAssuredAck_set_remVersion          (remraap, remraa->remVersion);
    REM_RobotAssuredAck_set_id                  (remraap, remraa->id);
    REM_RobotAssuredAck_set_sequenceNumber      (remraap, remraa->sequenceNumber);
}

// ================================ DECODE ================================
static inline void decodeREM_RobotAssuredAck(REM_RobotAssuredAck *remraa, REM_RobotAssuredAckPayload *remraap){
    remraa->header       = REM_RobotAssuredAck_get_header(remraap);
    remraa->remVersion   = REM_RobotAssuredAck_get_remVersion(remraap);
    remraa->id           = REM_RobotAssuredAck_get_id(remraap);
    remraa->sequenceNumber= REM_RobotAssuredAck_get_sequenceNumber(remraap);
}

#endif /*__REM_ROBOT_ASSURED_ACK_H*/
