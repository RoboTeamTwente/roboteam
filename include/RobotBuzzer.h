// AUTOGENERATED. Run generator/main.py to regenerate
// Generated on June 05 2021, 00:48:34

#ifndef __ROBOT_BUZZER_H
#define __ROBOT_BUZZER_H

#include <stdbool.h>
#include <stdint.h>
#include "BaseTypes.h"

typedef struct _RobotBuzzerPayload {
	uint8_t payload[PACKET_SIZE_ROBOT_BUZZER];
} RobotBuzzerPayload;



/** ================================ PACKET ================================ 
[---0--] [---1--] [---2--] [---3--] [---4--] [---5--] [---6--]
11111111 -------- -------- -------- -------- -------- -------- header
-------- 11111111 11111111 -------- -------- -------- -------- period
-------- -------- -------- 11111111 11111111 11111111 11111111 duration
*/



/** ================================ STRUCT ================================ */
typedef struct _RobotBuzzer {
    uint8_t    header;                  // Header byte indicating the type of packet
    uint16_t   period;                  // Sound that the buzzer makes.
    float      duration;                // Duration of the sound
} RobotBuzzer;



/** ================================ GETTERS ================================ */
static inline uint8_t RobotBuzzer_get_header(RobotBuzzerPayload *rbp){
    return ((rbp->payload[0]));
}
static inline uint16_t RobotBuzzer_get_period(RobotBuzzerPayload *rbp){
    return ((rbp->payload[1]) << 8) | ((rbp->payload[2]));
}
static inline float RobotBuzzer_get_duration(RobotBuzzerPayload *rbp){
    uint32_t duration = ((rbp->payload[3]) << 24) | ((rbp->payload[4]) << 16) | ((rbp->payload[5]) << 8) | ((rbp->payload[6]));
    return (duration * 0.0000000023283064) + 0.0000000000000000;
}



/** ================================ SETTERS ================================ */
static inline void RobotBuzzer_set_header(RobotBuzzerPayload *rbp, uint8_t header){
    rbp->payload[0] = header;
}
static inline void RobotBuzzer_set_period(RobotBuzzerPayload *rbp, uint16_t period){
    rbp->payload[1] = (period >> 8);
    rbp->payload[2] = period;
}
static inline void RobotBuzzer_set_duration(RobotBuzzerPayload *rbp, float _duration){
    uint32_t duration = (_duration - 0.0000000000000000) * 429496729.6000000238418579;
    rbp->payload[3] = (duration >> 24);
    rbp->payload[4] = (duration >> 16);
    rbp->payload[5] = (duration >> 8);
    rbp->payload[6] = duration;
}



/** ================================ DECODE ================================ */
static inline void decodeRobotBuzzer(RobotBuzzer *rb, RobotBuzzerPayload *rbp){
	rb->header              = RobotBuzzer_get_header(rbp);
	rb->period              = RobotBuzzer_get_period(rbp);
	rb->duration            = RobotBuzzer_get_duration(rbp);
}



/** ================================ ENCODE ================================ */
static inline void encodeRobotBuzzer(RobotBuzzerPayload *rbp, RobotBuzzer *rb){
	RobotBuzzer_set_header              (rbp, rb->header);
	RobotBuzzer_set_period              (rbp, rb->period);
	RobotBuzzer_set_duration            (rbp, rb->duration);
}

#endif /*__ROBOT_BUZZER_H*/
