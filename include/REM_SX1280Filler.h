// AUTOGENERATED. Run generator/main.py to regenerate
/*
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ] [  5   ] [  6   ] [  7   ] [  8   ] [  9   ]
11111111 -------- -------- -------- -------- -------- -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- -------- -------- -------- -------- -------- toRobotId
-------- ----1--- -------- -------- -------- -------- -------- -------- -------- -------- toColor
-------- -----1-- -------- -------- -------- -------- -------- -------- -------- -------- toBC
-------- ------1- -------- -------- -------- -------- -------- -------- -------- -------- toBS
-------- -------1 -------- -------- -------- -------- -------- -------- -------- -------- toPC
-------- -------- 1111---- -------- -------- -------- -------- -------- -------- -------- fromRobotId
-------- -------- ----1--- -------- -------- -------- -------- -------- -------- -------- fromColor
-------- -------- -----1-- -------- -------- -------- -------- -------- -------- -------- reserved
-------- -------- ------1- -------- -------- -------- -------- -------- -------- -------- fromBS
-------- -------- -------1 -------- -------- -------- -------- -------- -------- -------- fromPC
-------- -------- -------- 1111---- -------- -------- -------- -------- -------- -------- remVersion
-------- -------- -------- ----1111 -------- -------- -------- -------- -------- -------- messageId
-------- -------- -------- -------- 11111111 -------- -------- -------- -------- -------- payloadSize
-------- -------- -------- -------- -------- 11111111 11111111 11111111 11111111 1111---- fillerBits
*/

#ifndef __REM_SX1280FILLER_H
#define __REM_SX1280FILLER_H

#include <stdbool.h>
#include <stdint.h>
#include "REM_BaseTypes.h"

typedef struct _REM_SX1280FillerPayload {
    uint8_t payload[PACKET_SIZE_REM_SX1280FILLER];
} REM_SX1280FillerPayload;

typedef struct _REM_SX1280Filler {
    uint32_t   header              ; // integer [0, 255]             Header byte indicating the type of packet
    uint32_t   toRobotId           ; // integer [0, 15]              Id of the receiving robot
    bool       toColor             ; // integer [0, 1]               Color of the receiving robot / basestation. Yellow = 0, Blue = 1
    bool       toBC                ; // integer [0, 1]               Bit indicating this packet has to be broadcasted to all robots
    bool       toBS                ; // integer [0, 1]               Bit indicating this packet is meant for the basestation
    bool       toPC                ; // integer [0, 1]               Bit indicating this packet is meant for the PC
    uint32_t   fromRobotId         ; // integer [0, 15]              Id of the transmitting robot
    bool       fromColor           ; // integer [0, 1]               Color of the transmitting robot / basestation. Yellow = 0, Blue = 1
    bool       reserved            ; // integer [0, 1]               reserved
    bool       fromBS              ; // integer [0, 1]               Bit indicating this packet is coming from the basestation
    bool       fromPC              ; // integer [0, 1]               Bit indicating this packet is coming from the PC
    uint32_t   remVersion          ; // integer [0, 15]              Version of roboteam_embedded_messages
    uint32_t   messageId           ; // integer [0, 15]              messageId. Can be used for aligning packets
    uint32_t   payloadSize         ; // integer [0, 255]             Size of the payload. At most 255 bytes including the generic_packet_header. Keep the 127 byte SX1280 limit in mind
    uint64_t   fillerBits          ; // integer [0, 68719476735]     SX1280 requires a minimum of 6 bytes payload. See documentation page 124.
} REM_SX1280Filler;

// ================================ GETTERS ================================
static inline uint32_t REM_SX1280Filler_get_header(REM_SX1280FillerPayload *remsxfp){
    return ((remsxfp->payload[0]));
}

static inline uint32_t REM_SX1280Filler_get_toRobotId(REM_SX1280FillerPayload *remsxfp){
    return ((remsxfp->payload[1] & 0b11110000) >> 4);
}

static inline bool REM_SX1280Filler_get_toColor(REM_SX1280FillerPayload *remsxfp){
    return (remsxfp->payload[1] & 0b00001000) > 0;
}

static inline bool REM_SX1280Filler_get_toBC(REM_SX1280FillerPayload *remsxfp){
    return (remsxfp->payload[1] & 0b00000100) > 0;
}

static inline bool REM_SX1280Filler_get_toBS(REM_SX1280FillerPayload *remsxfp){
    return (remsxfp->payload[1] & 0b00000010) > 0;
}

static inline bool REM_SX1280Filler_get_toPC(REM_SX1280FillerPayload *remsxfp){
    return (remsxfp->payload[1] & 0b00000001) > 0;
}

static inline uint32_t REM_SX1280Filler_get_fromRobotId(REM_SX1280FillerPayload *remsxfp){
    return ((remsxfp->payload[2] & 0b11110000) >> 4);
}

static inline bool REM_SX1280Filler_get_fromColor(REM_SX1280FillerPayload *remsxfp){
    return (remsxfp->payload[2] & 0b00001000) > 0;
}

static inline bool REM_SX1280Filler_get_reserved(REM_SX1280FillerPayload *remsxfp){
    return (remsxfp->payload[2] & 0b00000100) > 0;
}

static inline bool REM_SX1280Filler_get_fromBS(REM_SX1280FillerPayload *remsxfp){
    return (remsxfp->payload[2] & 0b00000010) > 0;
}

static inline bool REM_SX1280Filler_get_fromPC(REM_SX1280FillerPayload *remsxfp){
    return (remsxfp->payload[2] & 0b00000001) > 0;
}

static inline uint32_t REM_SX1280Filler_get_remVersion(REM_SX1280FillerPayload *remsxfp){
    return ((remsxfp->payload[3] & 0b11110000) >> 4);
}

static inline uint32_t REM_SX1280Filler_get_messageId(REM_SX1280FillerPayload *remsxfp){
    return ((remsxfp->payload[3] & 0b00001111));
}

static inline uint32_t REM_SX1280Filler_get_payloadSize(REM_SX1280FillerPayload *remsxfp){
    return ((remsxfp->payload[4]));
}

static inline uint64_t REM_SX1280Filler_get_fillerBits(REM_SX1280FillerPayload *remsxfp){
    return ((remsxfp->payload[5]) << 28) | ((remsxfp->payload[6]) << 20) | ((remsxfp->payload[7]) << 12) | ((remsxfp->payload[8]) << 4) | ((remsxfp->payload[9] & 0b11110000) >> 4);
}

// ================================ SETTERS ================================
static inline void REM_SX1280Filler_set_header(REM_SX1280FillerPayload *remsxfp, uint32_t header){
    remsxfp->payload[0] = header;
}

static inline void REM_SX1280Filler_set_toRobotId(REM_SX1280FillerPayload *remsxfp, uint32_t toRobotId){
    remsxfp->payload[1] = ((toRobotId << 4) & 0b11110000) | (remsxfp->payload[1] & 0b00001111);
}

static inline void REM_SX1280Filler_set_toColor(REM_SX1280FillerPayload *remsxfp, bool toColor){
    remsxfp->payload[1] = ((toColor << 3) & 0b00001000) | (remsxfp->payload[1] & 0b11110111);
}

static inline void REM_SX1280Filler_set_toBC(REM_SX1280FillerPayload *remsxfp, bool toBC){
    remsxfp->payload[1] = ((toBC << 2) & 0b00000100) | (remsxfp->payload[1] & 0b11111011);
}

static inline void REM_SX1280Filler_set_toBS(REM_SX1280FillerPayload *remsxfp, bool toBS){
    remsxfp->payload[1] = ((toBS << 1) & 0b00000010) | (remsxfp->payload[1] & 0b11111101);
}

static inline void REM_SX1280Filler_set_toPC(REM_SX1280FillerPayload *remsxfp, bool toPC){
    remsxfp->payload[1] = (toPC & 0b00000001) | (remsxfp->payload[1] & 0b11111110);
}

static inline void REM_SX1280Filler_set_fromRobotId(REM_SX1280FillerPayload *remsxfp, uint32_t fromRobotId){
    remsxfp->payload[2] = ((fromRobotId << 4) & 0b11110000) | (remsxfp->payload[2] & 0b00001111);
}

static inline void REM_SX1280Filler_set_fromColor(REM_SX1280FillerPayload *remsxfp, bool fromColor){
    remsxfp->payload[2] = ((fromColor << 3) & 0b00001000) | (remsxfp->payload[2] & 0b11110111);
}

static inline void REM_SX1280Filler_set_reserved(REM_SX1280FillerPayload *remsxfp, bool reserved){
    remsxfp->payload[2] = ((reserved << 2) & 0b00000100) | (remsxfp->payload[2] & 0b11111011);
}

static inline void REM_SX1280Filler_set_fromBS(REM_SX1280FillerPayload *remsxfp, bool fromBS){
    remsxfp->payload[2] = ((fromBS << 1) & 0b00000010) | (remsxfp->payload[2] & 0b11111101);
}

static inline void REM_SX1280Filler_set_fromPC(REM_SX1280FillerPayload *remsxfp, bool fromPC){
    remsxfp->payload[2] = (fromPC & 0b00000001) | (remsxfp->payload[2] & 0b11111110);
}

static inline void REM_SX1280Filler_set_remVersion(REM_SX1280FillerPayload *remsxfp, uint32_t remVersion){
    remsxfp->payload[3] = ((remVersion << 4) & 0b11110000) | (remsxfp->payload[3] & 0b00001111);
}

static inline void REM_SX1280Filler_set_messageId(REM_SX1280FillerPayload *remsxfp, uint32_t messageId){
    remsxfp->payload[3] = (messageId & 0b00001111) | (remsxfp->payload[3] & 0b11110000);
}

static inline void REM_SX1280Filler_set_payloadSize(REM_SX1280FillerPayload *remsxfp, uint32_t payloadSize){
    remsxfp->payload[4] = payloadSize;
}

static inline void REM_SX1280Filler_set_fillerBits(REM_SX1280FillerPayload *remsxfp, uint64_t fillerBits){
    remsxfp->payload[5] = (fillerBits >> 28);
    remsxfp->payload[6] = (fillerBits >> 20);
    remsxfp->payload[7] = (fillerBits >> 12);
    remsxfp->payload[8] = (fillerBits >> 4);
    remsxfp->payload[9] = ((fillerBits << 4) & 0b11110000) | (remsxfp->payload[9] & 0b00001111);
}

// ================================ ENCODE ================================
static inline void encodeREM_SX1280Filler(REM_SX1280FillerPayload *remsxfp, REM_SX1280Filler *remsxf){
    REM_SX1280Filler_set_header              (remsxfp, remsxf->header);
    REM_SX1280Filler_set_toRobotId           (remsxfp, remsxf->toRobotId);
    REM_SX1280Filler_set_toColor             (remsxfp, remsxf->toColor);
    REM_SX1280Filler_set_toBC                (remsxfp, remsxf->toBC);
    REM_SX1280Filler_set_toBS                (remsxfp, remsxf->toBS);
    REM_SX1280Filler_set_toPC                (remsxfp, remsxf->toPC);
    REM_SX1280Filler_set_fromRobotId         (remsxfp, remsxf->fromRobotId);
    REM_SX1280Filler_set_fromColor           (remsxfp, remsxf->fromColor);
    REM_SX1280Filler_set_reserved            (remsxfp, remsxf->reserved);
    REM_SX1280Filler_set_fromBS              (remsxfp, remsxf->fromBS);
    REM_SX1280Filler_set_fromPC              (remsxfp, remsxf->fromPC);
    REM_SX1280Filler_set_remVersion          (remsxfp, remsxf->remVersion);
    REM_SX1280Filler_set_messageId           (remsxfp, remsxf->messageId);
    REM_SX1280Filler_set_payloadSize         (remsxfp, remsxf->payloadSize);
    REM_SX1280Filler_set_fillerBits          (remsxfp, remsxf->fillerBits);
}

// ================================ DECODE ================================
static inline void decodeREM_SX1280Filler(REM_SX1280Filler *remsxf, REM_SX1280FillerPayload *remsxfp){
    remsxf->header       = REM_SX1280Filler_get_header(remsxfp);
    remsxf->toRobotId    = REM_SX1280Filler_get_toRobotId(remsxfp);
    remsxf->toColor      = REM_SX1280Filler_get_toColor(remsxfp);
    remsxf->toBC         = REM_SX1280Filler_get_toBC(remsxfp);
    remsxf->toBS         = REM_SX1280Filler_get_toBS(remsxfp);
    remsxf->toPC         = REM_SX1280Filler_get_toPC(remsxfp);
    remsxf->fromRobotId  = REM_SX1280Filler_get_fromRobotId(remsxfp);
    remsxf->fromColor    = REM_SX1280Filler_get_fromColor(remsxfp);
    remsxf->reserved     = REM_SX1280Filler_get_reserved(remsxfp);
    remsxf->fromBS       = REM_SX1280Filler_get_fromBS(remsxfp);
    remsxf->fromPC       = REM_SX1280Filler_get_fromPC(remsxfp);
    remsxf->remVersion   = REM_SX1280Filler_get_remVersion(remsxfp);
    remsxf->messageId    = REM_SX1280Filler_get_messageId(remsxfp);
    remsxf->payloadSize  = REM_SX1280Filler_get_payloadSize(remsxfp);
    remsxf->fillerBits   = REM_SX1280Filler_get_fillerBits(remsxfp);
}

#endif /*__REM_SX1280FILLER_H*/
