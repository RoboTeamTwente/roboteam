# AUTOGENERATED. Run generator/main.py to regenerate
"""
[  0   ] [  1   ] [  2   ] [  3   ] [  4   ]
11111111 -------- -------- -------- -------- header
-------- 1111---- -------- -------- -------- remVersion
-------- ----1111 -------- -------- -------- id
-------- -------- 1------- -------- -------- play
-------- -------- -1------ -------- -------- pause
-------- -------- --1----- -------- -------- stop
-------- -------- ---1---- -------- -------- previousSong
-------- -------- ----1--- -------- -------- nextSong
-------- -------- -----111 11------ -------- volume
-------- -------- -------- --1----- -------- volumeUp
-------- -------- -------- ---1---- -------- volumeDown
-------- -------- -------- ----11-- -------- folderId
-------- -------- -------- ------11 111111-- songId
"""

import numpy as np
from . import REM_BaseTypes



class REM_RobotMusicCommand:
    header = 0                # integer [0, 255]             Header byte indicating the type of packet
    remVersion = 0            # integer [0, 15]              Version of roboteam_embedded_messages
    id = 0                    # integer [0, 15]              Id of the robot
    play = 0                  # integer [0, 1]               Set to play the current song
    pause = 0                 # integer [0, 1]               Set to pause the current song
    stop = 0                  # integer [0, 1]               Set to stop the current song
    previousSong = 0          # integer [0, 1]               Set to stop the current song
    nextSong = 0              # integer [0, 1]               Set to stop the current song
    volume = 0                # integer [0, 31]              Set the volume. Value between 1 and 31. 0 is ignored
    volumeUp = 0              # integer [0, 1]               Set to increase the volume
    volumeDown = 0            # integer [0, 1]               Set to decrease the volume
    folderId = 0              # integer [0, 3]               The id of the folder, from which to pick a song
    songId = 0                # integer [0, 255]             Id of the song, given the folder



# ================================ GETTERS ================================
    @staticmethod
    def get_header(payload):
        return ((payload[0]));

    @staticmethod
    def get_remVersion(payload):
        return ((payload[1] & 0b11110000) >> 4);

    @staticmethod
    def get_id(payload):
        return ((payload[1] & 0b00001111));

    @staticmethod
    def get_play(payload):
        return (payload[2] & 0b10000000) > 0;

    @staticmethod
    def get_pause(payload):
        return (payload[2] & 0b01000000) > 0;

    @staticmethod
    def get_stop(payload):
        return (payload[2] & 0b00100000) > 0;

    @staticmethod
    def get_previousSong(payload):
        return (payload[2] & 0b00010000) > 0;

    @staticmethod
    def get_nextSong(payload):
        return (payload[2] & 0b00001000) > 0;

    @staticmethod
    def get_volume(payload):
        return ((payload[2] & 0b00000111) << 2) | ((payload[3] & 0b11000000) >> 6);

    @staticmethod
    def get_volumeUp(payload):
        return (payload[3] & 0b00100000) > 0;

    @staticmethod
    def get_volumeDown(payload):
        return (payload[3] & 0b00010000) > 0;

    @staticmethod
    def get_folderId(payload):
        return ((payload[3] & 0b00001100) >> 2);

    @staticmethod
    def get_songId(payload):
        return ((payload[3] & 0b00000011) << 6) | ((payload[4] & 0b11111100) >> 2);

# ================================ SETTERS ================================
    @staticmethod
    def set_header(payload, header):
        payload[0] = header;

    @staticmethod
    def set_remVersion(payload, remVersion):
        payload[1] = ((remVersion << 4) & 0b11110000) | (payload[1] & 0b00001111);

    @staticmethod
    def set_id(payload, id):
        payload[1] = (id & 0b00001111) | (payload[1] & 0b11110000);

    @staticmethod
    def set_play(payload, play):
        payload[2] = ((play << 7) & 0b10000000) | (payload[2] & 0b01111111);

    @staticmethod
    def set_pause(payload, pause):
        payload[2] = ((pause << 6) & 0b01000000) | (payload[2] & 0b10111111);

    @staticmethod
    def set_stop(payload, stop):
        payload[2] = ((stop << 5) & 0b00100000) | (payload[2] & 0b11011111);

    @staticmethod
    def set_previousSong(payload, previousSong):
        payload[2] = ((previousSong << 4) & 0b00010000) | (payload[2] & 0b11101111);

    @staticmethod
    def set_nextSong(payload, nextSong):
        payload[2] = ((nextSong << 3) & 0b00001000) | (payload[2] & 0b11110111);

    @staticmethod
    def set_volume(payload, volume):
        payload[2] = ((volume >> 2) & 0b00000111) | (payload[2] & 0b11111000);
        payload[3] = ((volume << 6) & 0b11000000) | (payload[3] & 0b00111111);

    @staticmethod
    def set_volumeUp(payload, volumeUp):
        payload[3] = ((volumeUp << 5) & 0b00100000) | (payload[3] & 0b11011111);

    @staticmethod
    def set_volumeDown(payload, volumeDown):
        payload[3] = ((volumeDown << 4) & 0b00010000) | (payload[3] & 0b11101111);

    @staticmethod
    def set_folderId(payload, folderId):
        payload[3] = ((folderId << 2) & 0b00001100) | (payload[3] & 0b11110011);

    @staticmethod
    def set_songId(payload, songId):
        payload[3] = ((songId >> 6) & 0b00000011) | (payload[3] & 0b11111100);
        payload[4] = ((songId << 2) & 0b11111100) | (payload[4] & 0b00000011);

# ================================ ENCODE ================================
    def encode(self):
        payload = np.zeros(REM_BaseTypes.PACKET_SIZE_REM_ROBOT_MUSIC_COMMAND, dtype=np.uint8)
        REM_RobotMusicCommand.set_header              (payload, self.header)
        REM_RobotMusicCommand.set_remVersion          (payload, self.remVersion)
        REM_RobotMusicCommand.set_id                  (payload, self.id)
        REM_RobotMusicCommand.set_play                (payload, self.play)
        REM_RobotMusicCommand.set_pause               (payload, self.pause)
        REM_RobotMusicCommand.set_stop                (payload, self.stop)
        REM_RobotMusicCommand.set_previousSong        (payload, self.previousSong)
        REM_RobotMusicCommand.set_nextSong            (payload, self.nextSong)
        REM_RobotMusicCommand.set_volume              (payload, self.volume)
        REM_RobotMusicCommand.set_volumeUp            (payload, self.volumeUp)
        REM_RobotMusicCommand.set_volumeDown          (payload, self.volumeDown)
        REM_RobotMusicCommand.set_folderId            (payload, self.folderId)
        REM_RobotMusicCommand.set_songId              (payload, self.songId)
        return payload


# ================================ DECODE ================================
    def decode(self, payload):
        self.header           = REM_RobotMusicCommand.get_header(payload)
        self.remVersion       = REM_RobotMusicCommand.get_remVersion(payload)
        self.id               = REM_RobotMusicCommand.get_id(payload)
        self.play             = REM_RobotMusicCommand.get_play(payload)
        self.pause            = REM_RobotMusicCommand.get_pause(payload)
        self.stop             = REM_RobotMusicCommand.get_stop(payload)
        self.previousSong     = REM_RobotMusicCommand.get_previousSong(payload)
        self.nextSong         = REM_RobotMusicCommand.get_nextSong(payload)
        self.volume           = REM_RobotMusicCommand.get_volume(payload)
        self.volumeUp         = REM_RobotMusicCommand.get_volumeUp(payload)
        self.volumeDown       = REM_RobotMusicCommand.get_volumeDown(payload)
        self.folderId         = REM_RobotMusicCommand.get_folderId(payload)
        self.songId           = REM_RobotMusicCommand.get_songId(payload)


    def print_bit_string(self):
        payload = self.encode()
        for i in range(len(payload)):
            print(format(payload[i], '08b'), end=" ")
        print()
